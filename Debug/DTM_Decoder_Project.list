
DTM_Decoder_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c008  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000131c4  0800c198  0800c198  0000d198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f35c  0801f35c  000210f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801f35c  0801f35c  0002035c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f364  0801f364  000210f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f364  0801f364  00020364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f368  0801f368  00020368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  0801f36c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016ab8  200000f4  0801f460  000210f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20016bac  0801f460  00021bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000210f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000259a3  00000000  00000000  00021124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cb1  00000000  00000000  00046ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b70  00000000  00000000  0004b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001450  00000000  00000000  0004d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bcbd  00000000  00000000  0004e738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024085  00000000  00000000  0007a3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e2db  00000000  00000000  0009e47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001ac755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079e4  00000000  00000000  001ac810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001b41f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000397d  00000000  00000000  001b4261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  001b7bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f4 	.word	0x200000f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c180 	.word	0x0800c180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f8 	.word	0x200000f8
 80001cc:	0800c180 	.word	0x0800c180

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96a 	b.w	8000934 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <init_player>:
PLAY_FILE* __handle;
P_STATE* __state;

extern void myprintf(const char*, ...);

void init_player(const char* file_name, uint16_t* buffer, uint32_t length, PLAY_FILE* pf_handle, P_STATE* state){
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
	if(!pf_handle)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d077      	beq.n	8000a3c <init_player+0x104>
		return;

	FRESULT res;
	UINT bytes_read;

	HAL_Delay(1000);
 800094c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000950:	f001 fab2 	bl	8001eb8 <HAL_Delay>
	res = f_mount(&(pf_handle->f_system), DEVICE_PATH, 1);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	2201      	movs	r2, #1
 8000958:	493a      	ldr	r1, [pc, #232]	@ (8000a44 <init_player+0x10c>)
 800095a:	4618      	mov	r0, r3
 800095c:	f009 f972 	bl	8009c44 <f_mount>
 8000960:	4603      	mov	r3, r0
 8000962:	75fb      	strb	r3, [r7, #23]
	if(res != FR_OK){
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d007      	beq.n	800097a <init_player+0x42>
		*state |= PLAY_ERROR;
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	b2da      	uxtb	r2, r3
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	701a      	strb	r2, [r3, #0]
		return;
 8000978:	e061      	b.n	8000a3e <init_player+0x106>
	}

	*state |= SD_MOUNT;
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	b2da      	uxtb	r2, r3
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	701a      	strb	r2, [r3, #0]
	myprintf("Successfully Mounted SD CARD\r\n");
 8000988:	482f      	ldr	r0, [pc, #188]	@ (8000a48 <init_player+0x110>)
 800098a:	f000 f953 	bl	8000c34 <myprintf>

	res = f_open(&(pf_handle->file), file_name, FA_READ);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8000994:	2201      	movs	r2, #1
 8000996:	68f9      	ldr	r1, [r7, #12]
 8000998:	4618      	mov	r0, r3
 800099a:	f009 f999 	bl	8009cd0 <f_open>
 800099e:	4603      	mov	r3, r0
 80009a0:	75fb      	strb	r3, [r7, #23]
	if(res != FR_OK){
 80009a2:	7dfb      	ldrb	r3, [r7, #23]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00c      	beq.n	80009c2 <init_player+0x8a>
		f_unmount(DEVICE_PATH);
 80009a8:	2200      	movs	r2, #0
 80009aa:	4926      	ldr	r1, [pc, #152]	@ (8000a44 <init_player+0x10c>)
 80009ac:	2000      	movs	r0, #0
 80009ae:	f009 f949 	bl	8009c44 <f_mount>
		*state |= PLAY_ERROR;
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	701a      	strb	r2, [r3, #0]
		return;
 80009c0:	e03d      	b.n	8000a3e <init_player+0x106>
	}

	*state |= FILE_OPEN;
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	701a      	strb	r2, [r3, #0]
	myprintf("Successfully Opened '%s' file\r\n", file_name);
 80009d0:	68f9      	ldr	r1, [r7, #12]
 80009d2:	481e      	ldr	r0, [pc, #120]	@ (8000a4c <init_player+0x114>)
 80009d4:	f000 f92e 	bl	8000c34 <myprintf>

	res = f_read(&(pf_handle->file), &(pf_handle->header), sizeof(pf_handle->header), &bytes_read);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	f503 700c 	add.w	r0, r3, #560	@ 0x230
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	f503 618c 	add.w	r1, r3, #1120	@ 0x460
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	222c      	movs	r2, #44	@ 0x2c
 80009ea:	f009 fb2b 	bl	800a044 <f_read>
 80009ee:	4603      	mov	r3, r0
 80009f0:	75fb      	strb	r3, [r7, #23]
	if(res != FR_OK){
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d012      	beq.n	8000a1e <init_player+0xe6>
		f_close(&(pf_handle->file));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80009fe:	4618      	mov	r0, r3
 8000a00:	f009 fcdd 	bl	800a3be <f_close>
		f_unmount(DEVICE_PATH);
 8000a04:	2200      	movs	r2, #0
 8000a06:	490f      	ldr	r1, [pc, #60]	@ (8000a44 <init_player+0x10c>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f009 f91b 	bl	8009c44 <f_mount>
		*state |= PLAY_ERROR | CLOSE_FILE;
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	701a      	strb	r2, [r3, #0]
		return;
 8000a1c:	e00f      	b.n	8000a3e <init_player+0x106>
	}

	pf_handle->buffer = buffer;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	f8c3 248c 	str.w	r2, [r3, #1164]	@ 0x48c
	pf_handle->buf_size = length;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	f8c3 2490 	str.w	r2, [r3, #1168]	@ 0x490
	__handle = pf_handle;
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <init_player+0x118>)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	6013      	str	r3, [r2, #0]
	__state  = state;
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <init_player+0x11c>)
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	e000      	b.n	8000a3e <init_player+0x106>
		return;
 8000a3c:	bf00      	nop
}
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	0800c198 	.word	0x0800c198
 8000a48:	0800c19c 	.word	0x0800c19c
 8000a4c:	0800c1bc 	.word	0x0800c1bc
 8000a50:	20000110 	.word	0x20000110
 8000a54:	20000114 	.word	0x20000114

08000a58 <__play_output_stream_t16>:

UINT __play_output_stream_t16(uint16_t* buffer, PLAY_FILE* pf_handle, P_STATE* state){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
	if(pf_handle == NULL)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d105      	bne.n	8000a76 <__play_output_stream_t16+0x1e>
		return (*__state & PLAY_STATE);
 8000a6a:	4b38      	ldr	r3, [pc, #224]	@ (8000b4c <__play_output_stream_t16+0xf4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	e065      	b.n	8000b42 <__play_output_stream_t16+0xea>

	int16_t data = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	833b      	strh	r3, [r7, #24]
	UINT cnt = 0, btr = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
	FRESULT res;

	do{
		if(cnt >= pf_handle->buf_size){ *state |= BUFFER_CMPLT; break;}
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	f8d3 3490 	ldr.w	r3, [r3, #1168]	@ 0x490
 8000a88:	69fa      	ldr	r2, [r7, #28]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d307      	bcc.n	8000a9e <__play_output_stream_t16+0x46>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f043 0320 	orr.w	r3, r3, #32
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e032      	b.n	8000b04 <__play_output_stream_t16+0xac>

		res = f_read(&(pf_handle->file), &data, 1 * sizeof(data), &btr);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	f503 700c 	add.w	r0, r3, #560	@ 0x230
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	f107 0118 	add.w	r1, r7, #24
 8000aac:	2202      	movs	r2, #2
 8000aae:	f009 fac9 	bl	800a044 <f_read>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	76fb      	strb	r3, [r7, #27]
		if(res != FR_OK)
 8000ab6:	7efb      	ldrb	r3, [r7, #27]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d122      	bne.n	8000b02 <__play_output_stream_t16+0xaa>
			break;

		*buffer = ((data >> 4) + 0x800) &0xfff;
 8000abc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ac0:	111b      	asrs	r3, r3, #4
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	801a      	strh	r2, [r3, #0]
		buffer++;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3302      	adds	r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
		cnt++;
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
	}while(!f_eof(&(pf_handle->file)) && (*__state & PLAY_STATE));
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d008      	beq.n	8000b04 <__play_output_stream_t16+0xac>
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <__play_output_stream_t16+0xf4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f003 0308 	and.w	r3, r3, #8
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1c0      	bne.n	8000a82 <__play_output_stream_t16+0x2a>
 8000b00:	e000      	b.n	8000b04 <__play_output_stream_t16+0xac>
			break;
 8000b02:	bf00      	nop

	if(f_eof(&(pf_handle->file))){
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d10e      	bne.n	8000b32 <__play_output_stream_t16+0xda>
		*state &= ~PLAY_STATE;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	f023 0308 	bic.w	r3, r3, #8
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	701a      	strb	r2, [r3, #0]
		*state |= CLOSE_FILE;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	e006      	b.n	8000b40 <__play_output_stream_t16+0xe8>
	}else
		*state |= READ_CMPLT;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	701a      	strb	r2, [r3, #0]
	return res;
 8000b40:	7efb      	ldrb	r3, [r7, #27]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000114 	.word	0x20000114

08000b50 <start_player_t16>:

void start_player_t16(PLAY_FILE* pf_handle, P_STATE* state){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	if((*state & (PLAY_ERROR | CLOSE_FILE)) > 0)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dc32      	bgt.n	8000bcc <start_player_t16+0x7c>
		return;

	if((*state & (SD_MOUNT | FILE_OPEN)) != (SD_MOUNT | FILE_OPEN))
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	f003 0306 	and.w	r3, r3, #6
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d12e      	bne.n	8000bd0 <start_player_t16+0x80>
		return;

	FRESULT res;

	if ((*state & PLAY_STATE) == 0 )
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d106      	bne.n	8000b8c <start_player_t16+0x3c>
		*state |= PLAY_STATE;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	701a      	strb	r2, [r3, #0]

//	myprintf("Player Started.............\r\n");

	res = __play_output_stream_t16(pf_handle->buffer, pf_handle, state);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	@ 0x48c
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff5e 	bl	8000a58 <__play_output_stream_t16>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK){
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d015      	beq.n	8000bd2 <start_player_t16+0x82>
		f_close(&(pf_handle->file));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8000bac:	4618      	mov	r0, r3
 8000bae:	f009 fc06 	bl	800a3be <f_close>
		f_unmount(DEVICE_PATH);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4908      	ldr	r1, [pc, #32]	@ (8000bd8 <start_player_t16+0x88>)
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f009 f844 	bl	8009c44 <f_mount>
		*state |= PLAY_ERROR | CLOSE_FILE;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	701a      	strb	r2, [r3, #0]
		return;
 8000bca:	e002      	b.n	8000bd2 <start_player_t16+0x82>
		return;
 8000bcc:	bf00      	nop
 8000bce:	e000      	b.n	8000bd2 <start_player_t16+0x82>
		return;
 8000bd0:	bf00      	nop

//	f_close(&(pf_handle->file));
//	f_unmount(DEVICE_PATH);

//	myprintf("Player Stopped.............\r\n");
}
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	0800c198 	.word	0x0800c198

08000bdc <player_error_handler>:

void player_error_handler(PLAY_FILE* pf_handle, P_STATE* state){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	if((*state & (PLAY_ERROR | CLOSE_FILE)) == 0)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d017      	beq.n	8000c22 <player_error_handler+0x46>
		return;

	if((*state & FILE_OPEN) > 0)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	dd05      	ble.n	8000c0a <player_error_handler+0x2e>
		f_close(&(pf_handle->file));
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8000c04:	4618      	mov	r0, r3
 8000c06:	f009 fbda 	bl	800a3be <f_close>

	f_unmount(DEVICE_PATH);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4907      	ldr	r1, [pc, #28]	@ (8000c2c <player_error_handler+0x50>)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f009 f818 	bl	8009c44 <f_mount>
	*state = 0;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
	myprintf("File Closed.............\r\n");
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <player_error_handler+0x54>)
 8000c1c:	f000 f80a 	bl	8000c34 <myprintf>
 8000c20:	e000      	b.n	8000c24 <player_error_handler+0x48>
		return;
 8000c22:	bf00      	nop
}
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800c198 	.word	0x0800c198
 8000c30:	0800c1dc 	.word	0x0800c1dc

08000c34 <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Print Player Output Statuses Via UART
extern void myprintf(const char *fmt, ...) {
 8000c34:	b40f      	push	{r0, r1, r2, r3}
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c4a:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <myprintf+0x44>)
 8000c4c:	f00a fde8 	bl	800b820 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000c50:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <myprintf+0x44>)
 8000c52:	f7ff fabd 	bl	80001d0 <strlen>
 8000c56:	4603      	mov	r3, r0
 8000c58:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	4905      	ldr	r1, [pc, #20]	@ (8000c78 <myprintf+0x44>)
 8000c64:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <myprintf+0x48>)
 8000c66:	f006 f807 	bl	8006c78 <HAL_UART_Transmit>

}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr
 8000c78:	20016914 	.word	0x20016914
 8000c7c:	200002d0 	.word	0x200002d0

08000c80 <Process_Signal>:
//Calculates the Output FFT of the Audio Signal from ADC
void Process_Signal(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

	//Calculate the output FFT Frequencies at 20kHz Sampling frequency
	for(int i = 0; i < FFT_LENGTH/2; i++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	e015      	b.n	8000cb8 <Process_Signal+0x38>
		output_fft_freq[i] = (float)(i)/FFT_LENGTH * SAMPLING_RATE;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c96:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000cf8 <Process_Signal+0x78>
 8000c9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c9e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000cfc <Process_Signal+0x7c>
 8000ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca6:	4a16      	ldr	r2, [pc, #88]	@ (8000d00 <Process_Signal+0x80>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < FFT_LENGTH/2; i++){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cbe:	dbe5      	blt.n	8000c8c <Process_Signal+0xc>
//	for(int i = 0; i < FFT_LENGTH/N_BLOCK; i++){
//		arm_fir_f32(&fir_filter, &input_signal[i*N_BLOCK], &filtered_signal[i*N_BLOCK], N_BLOCK);
//	}

	//Calculate the real output fft (output_fft consists of interleaved real and imaginary components)
	arm_rfft_fast_f32(&fft_handler, input_signal, output_fft, 0);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4a10      	ldr	r2, [pc, #64]	@ (8000d04 <Process_Signal+0x84>)
 8000cc4:	4910      	ldr	r1, [pc, #64]	@ (8000d08 <Process_Signal+0x88>)
 8000cc6:	4811      	ldr	r0, [pc, #68]	@ (8000d0c <Process_Signal+0x8c>)
 8000cc8:	f009 fdac 	bl	800a824 <arm_rfft_fast_f32>
	//Calculate the magnitudes of the output_fft (first 2 output_fft values are purely real for the first and last output fft values)
	arm_cmplx_mag_f32(output_fft+2, output_fft_mag+1, FFT_LENGTH/2);
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <Process_Signal+0x90>)
 8000cce:	4911      	ldr	r1, [pc, #68]	@ (8000d14 <Process_Signal+0x94>)
 8000cd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f00a f993 	bl	800b000 <arm_cmplx_mag_f32>

	//Store the first 2 purely real fft values into their respective position in the output_fft_mag array
	output_fft_mag[0] = output_fft[0];
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <Process_Signal+0x84>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <Process_Signal+0x98>)
 8000ce0:	6013      	str	r3, [r2, #0]
	output_fft_mag[FFT_LENGTH/2-1] = output_fft[1];
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <Process_Signal+0x84>)
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <Process_Signal+0x98>)
 8000ce8:	f603 73fc 	addw	r3, r3, #4092	@ 0xffc
 8000cec:	601a      	str	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	45000000 	.word	0x45000000
 8000cfc:	469c4000 	.word	0x469c4000
 8000d00:	20015358 	.word	0x20015358
 8000d04:	20012358 	.word	0x20012358
 8000d08:	20010358 	.word	0x20010358
 8000d0c:	20016458 	.word	0x20016458
 8000d10:	20012360 	.word	0x20012360
 8000d14:	2001435c 	.word	0x2001435c
 8000d18:	20014358 	.word	0x20014358

08000d1c <Get_DTMF_Code>:

//Analyzes The FFT of Audio Signal to Retrieve Already Present DTMF Code
void Get_DTMF_Code(int32_t* dtmf_code_out){
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	ed2d 8b02 	vpush	{d8}
 8000d22:	b0a8      	sub	sp, #160	@ 0xa0
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	 *
	 *
	 * */

	//DTMF Frequencies, Row frequencies stored first then Column frequencies
	int dtmf_freq[] = {697, 770, 852, 941, 1209, 1336, 1477, 1633};
 8000d28:	4bc8      	ldr	r3, [pc, #800]	@ (800104c <Get_DTMF_Code+0x330>)
 8000d2a:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000d2e:	461d      	mov	r5, r3
 8000d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//DTMF Frequency's Magnitudes Represented as Rows and Cols Array
	float dtmf_freq_mag_rows[] = {0,0,0,0}; // in order 697Hz, 770Hz, 852Hz, 941Hz respectively
 8000d3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
	float dtmf_freq_mag_cols[] = {0,0,0,0}; // in order 1209Hz, 1336Hz, 1477Hz, 1633Hz respectively
 8000d4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]

	//Stored in order 1,4,7,*,2,5,8,0,3,6,9,#,A,B,C,D respectively
	float32_t dtmf_mag[16];

	//Threshold for detecting true dtmf_code
	int32_t threshold = 100000;
 8000d58:	4bbd      	ldr	r3, [pc, #756]	@ (8001050 <Get_DTMF_Code+0x334>)
 8000d5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	//Some temp Variables
	float32_t index = 0;
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	int tmp_index = 0, max_mag_index = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	//Setup the dtmf output code to negative in-case a code wasn't found
	*dtmf_code_out = -1;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	601a      	str	r2, [r3, #0]

	//Loop over each DTMF Frequency and calculate its Corresponding FFT Magnitude
	for(int i = 0; i < 8; i++){
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000d80:	e158      	b.n	8001034 <Get_DTMF_Code+0x318>
		index = (int)(((dtmf_freq[i] * FFT_LENGTH) / SAMPLING_RATE) + 1);	//Find the index corresponding with dtmf_freq[i] (step 1.)
 8000d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	33a0      	adds	r3, #160	@ 0xa0
 8000d8a:	443b      	add	r3, r7
 8000d8c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000d90:	02db      	lsls	r3, r3, #11
 8000d92:	4ab0      	ldr	r2, [pc, #704]	@ (8001054 <Get_DTMF_Code+0x338>)
 8000d94:	fb82 1203 	smull	r1, r2, r2, r3
 8000d98:	1352      	asrs	r2, r2, #13
 8000d9a:	17db      	asrs	r3, r3, #31
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	3301      	adds	r3, #1
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da8:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c

		if(output_fft_mag[(int)index] < output_fft_mag[(int)(index+0.5)])	//Compare magnitudes between the calculated index and the nxt index value to find the peak mag for the dtmf_freq[i]
 8000dac:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8000db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000db4:	ee17 3a90 	vmov	r3, s15
 8000db8:	4aa7      	ldr	r2, [pc, #668]	@ (8001058 <Get_DTMF_Code+0x33c>)
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	ed93 8a00 	vldr	s16, [r3]
 8000dc2:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000dc6:	f7ff fbbf 	bl	8000548 <__aeabi_f2d>
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	4ba3      	ldr	r3, [pc, #652]	@ (800105c <Get_DTMF_Code+0x340>)
 8000dd0:	f7ff fa5c 	bl	800028c <__adddf3>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4610      	mov	r0, r2
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f7ff fc0c 	bl	80005f8 <__aeabi_d2iz>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a9d      	ldr	r2, [pc, #628]	@ (8001058 <Get_DTMF_Code+0x33c>)
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	edd3 7a00 	vldr	s15, [r3]
 8000dec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	d514      	bpl.n	8000e20 <Get_DTMF_Code+0x104>
			index = (int)(index+0.5);
 8000df6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000dfa:	f7ff fba5 	bl	8000548 <__aeabi_f2d>
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	4b96      	ldr	r3, [pc, #600]	@ (800105c <Get_DTMF_Code+0x340>)
 8000e04:	f7ff fa42 	bl	800028c <__adddf3>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f7ff fbf2 	bl	80005f8 <__aeabi_d2iz>
 8000e14:	ee07 0a90 	vmov	s15, r0
 8000e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e1c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c

		if(i < 4){	//Store the Row frequency Magnitudes
 8000e20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	dc11      	bgt.n	8000e4c <Get_DTMF_Code+0x130>
			dtmf_freq_mag_rows[i] = output_fft_mag[(int)index];
 8000e28:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8000e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e30:	ee17 3a90 	vmov	r3, s15
 8000e34:	4a88      	ldr	r2, [pc, #544]	@ (8001058 <Get_DTMF_Code+0x33c>)
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	33a0      	adds	r3, #160	@ 0xa0
 8000e44:	443b      	add	r3, r7
 8000e46:	3b44      	subs	r3, #68	@ 0x44
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e0ee      	b.n	800102a <Get_DTMF_Code+0x30e>
		}else{
			dtmf_freq_mag_cols[i-4] = output_fft_mag[(int)index];	//Store the Columns frequency Magnitudes
 8000e4c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8000e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e54:	ee17 2a90 	vmov	r2, s15
 8000e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e5c:	3b04      	subs	r3, #4
 8000e5e:	497e      	ldr	r1, [pc, #504]	@ (8001058 <Get_DTMF_Code+0x33c>)
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	440a      	add	r2, r1
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	33a0      	adds	r3, #160	@ 0xa0
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3b54      	subs	r3, #84	@ 0x54
 8000e6e:	601a      	str	r2, [r3, #0]

			//Calculate the DTMF MAG, 4 mag values are calculated on each run column wise.
			dtmf_mag[tmp_index]   = dtmf_freq_mag_rows[0] + dtmf_freq_mag_cols[i-4];
 8000e70:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8000e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e78:	3b04      	subs	r3, #4
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	33a0      	adds	r3, #160	@ 0xa0
 8000e7e:	443b      	add	r3, r7
 8000e80:	3b54      	subs	r3, #84	@ 0x54
 8000e82:	edd3 7a00 	vldr	s15, [r3]
 8000e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	33a0      	adds	r3, #160	@ 0xa0
 8000e92:	443b      	add	r3, r7
 8000e94:	3b94      	subs	r3, #148	@ 0x94
 8000e96:	edc3 7a00 	vstr	s15, [r3]
			dtmf_mag[tmp_index+1] = dtmf_freq_mag_rows[1] + dtmf_freq_mag_cols[i-4];
 8000e9a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8000e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	33a0      	adds	r3, #160	@ 0xa0
 8000ea8:	443b      	add	r3, r7
 8000eaa:	3b54      	subs	r3, #84	@ 0x54
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	33a0      	adds	r3, #160	@ 0xa0
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3b94      	subs	r3, #148	@ 0x94
 8000ec2:	edc3 7a00 	vstr	s15, [r3]
			dtmf_mag[tmp_index+2] = dtmf_freq_mag_rows[2] + dtmf_freq_mag_cols[i-4];
 8000ec6:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	33a0      	adds	r3, #160	@ 0xa0
 8000ed4:	443b      	add	r3, r7
 8000ed6:	3b54      	subs	r3, #84	@ 0x54
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	33a0      	adds	r3, #160	@ 0xa0
 8000eea:	443b      	add	r3, r7
 8000eec:	3b94      	subs	r3, #148	@ 0x94
 8000eee:	edc3 7a00 	vstr	s15, [r3]
			dtmf_mag[tmp_index+3] = dtmf_freq_mag_rows[3] + dtmf_freq_mag_cols[i-4];
 8000ef2:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8000ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000efa:	3b04      	subs	r3, #4
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	33a0      	adds	r3, #160	@ 0xa0
 8000f00:	443b      	add	r3, r7
 8000f02:	3b54      	subs	r3, #84	@ 0x54
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f0c:	3303      	adds	r3, #3
 8000f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	33a0      	adds	r3, #160	@ 0xa0
 8000f16:	443b      	add	r3, r7
 8000f18:	3b94      	subs	r3, #148	@ 0x94
 8000f1a:	edc3 7a00 	vstr	s15, [r3]


			//Find the Max Value out of the 4 mag values
			if(dtmf_mag[max_mag_index] < dtmf_mag[tmp_index+1])
 8000f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	33a0      	adds	r3, #160	@ 0xa0
 8000f26:	443b      	add	r3, r7
 8000f28:	3b94      	subs	r3, #148	@ 0x94
 8000f2a:	ed93 7a00 	vldr	s14, [r3]
 8000f2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f32:	3301      	adds	r3, #1
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	33a0      	adds	r3, #160	@ 0xa0
 8000f38:	443b      	add	r3, r7
 8000f3a:	3b94      	subs	r3, #148	@ 0x94
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f48:	d504      	bpl.n	8000f54 <Get_DTMF_Code+0x238>
				max_mag_index = tmp_index+1;
 8000f4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			if(dtmf_mag[max_mag_index] < dtmf_mag[tmp_index+2])
 8000f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	33a0      	adds	r3, #160	@ 0xa0
 8000f5c:	443b      	add	r3, r7
 8000f5e:	3b94      	subs	r3, #148	@ 0x94
 8000f60:	ed93 7a00 	vldr	s14, [r3]
 8000f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f68:	3302      	adds	r3, #2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	33a0      	adds	r3, #160	@ 0xa0
 8000f6e:	443b      	add	r3, r7
 8000f70:	3b94      	subs	r3, #148	@ 0x94
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	d504      	bpl.n	8000f8a <Get_DTMF_Code+0x26e>
				max_mag_index = tmp_index+2;
 8000f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f84:	3302      	adds	r3, #2
 8000f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			if(dtmf_mag[max_mag_index] < dtmf_mag[tmp_index+3])
 8000f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	33a0      	adds	r3, #160	@ 0xa0
 8000f92:	443b      	add	r3, r7
 8000f94:	3b94      	subs	r3, #148	@ 0x94
 8000f96:	ed93 7a00 	vldr	s14, [r3]
 8000f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f9e:	3303      	adds	r3, #3
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	33a0      	adds	r3, #160	@ 0xa0
 8000fa4:	443b      	add	r3, r7
 8000fa6:	3b94      	subs	r3, #148	@ 0x94
 8000fa8:	edd3 7a00 	vldr	s15, [r3]
 8000fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb4:	d504      	bpl.n	8000fc0 <Get_DTMF_Code+0x2a4>
				max_mag_index = tmp_index+3;
 8000fb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fba:	3303      	adds	r3, #3
 8000fbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			if(dtmf_mag[max_mag_index] < dtmf_mag[tmp_index])
 8000fc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	33a0      	adds	r3, #160	@ 0xa0
 8000fc8:	443b      	add	r3, r7
 8000fca:	3b94      	subs	r3, #148	@ 0x94
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	33a0      	adds	r3, #160	@ 0xa0
 8000fd8:	443b      	add	r3, r7
 8000fda:	3b94      	subs	r3, #148	@ 0x94
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	d503      	bpl.n	8000ff2 <Get_DTMF_Code+0x2d6>
				max_mag_index = tmp_index;
 8000fea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

			//Update the output dtmf code
			if(dtmf_mag[max_mag_index] > threshold)
 8000ff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	33a0      	adds	r3, #160	@ 0xa0
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3b94      	subs	r3, #148	@ 0x94
 8000ffe:	ed93 7a00 	vldr	s14, [r3]
 8001002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001016:	dd03      	ble.n	8001020 <Get_DTMF_Code+0x304>
				*dtmf_code_out = max_mag_index;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800101e:	601a      	str	r2, [r3, #0]
			tmp_index += 4;
 8001020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001024:	3304      	adds	r3, #4
 8001026:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	for(int i = 0; i < 8; i++){
 800102a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800102e:	3301      	adds	r3, #1
 8001030:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001034:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001038:	2b07      	cmp	r3, #7
 800103a:	f77f aea2 	ble.w	8000d82 <Get_DTMF_Code+0x66>
		}
	}
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	37a0      	adds	r7, #160	@ 0xa0
 8001044:	46bd      	mov	sp, r7
 8001046:	ecbd 8b02 	vpop	{d8}
 800104a:	bdb0      	pop	{r4, r5, r7, pc}
 800104c:	0800c1f8 	.word	0x0800c1f8
 8001050:	000186a0 	.word	0x000186a0
 8001054:	68db8bad 	.word	0x68db8bad
 8001058:	20014358 	.word	0x20014358
 800105c:	3fe00000 	.word	0x3fe00000

08001060 <Evaluate_Code_Sequence>:
 * Parameters;
	 * code   - Single digit input code received.
	 * length - code sequence length.
	 * mask   - mask that defines the accepted pass-key's positions. (0-15 bits used for the keys)
 * */
void Evaluate_Code_Sequence(int32_t code, int32_t* length, int32_t* mask, Code_Sequence_Mode mode){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	70fb      	strb	r3, [r7, #3]
	if(code < 0 || code > 15){
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db02      	blt.n	800107a <Evaluate_Code_Sequence+0x1a>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b0f      	cmp	r3, #15
 8001078:	dd03      	ble.n	8001082 <Evaluate_Code_Sequence+0x22>
		Led_Audio_Control(0);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f828 	bl	80010d0 <Led_Audio_Control>
		return;
 8001080:	e022      	b.n	80010c8 <Evaluate_Code_Sequence+0x68>
	}

	if(mode == ANY_KEYS){ //Accepts Any DTMF Code For a Success Condition
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d103      	bne.n	8001090 <Evaluate_Code_Sequence+0x30>
		Led_Audio_Control(1);
 8001088:	2001      	movs	r0, #1
 800108a:	f000 f821 	bl	80010d0 <Led_Audio_Control>
		return;
 800108e:	e01b      	b.n	80010c8 <Evaluate_Code_Sequence+0x68>
	}


	*mask = *mask ^ (1 << code);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	405a      	eors	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
	*length -= 1;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	1e5a      	subs	r2, r3, #1
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	601a      	str	r2, [r3, #0]

	if(*length < 1)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	dc09      	bgt.n	80010c8 <Evaluate_Code_Sequence+0x68>
		Led_Audio_Control( *mask == 0 );	//Accepts one or more Specified DTMF Code(s) For a Success Condition
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf0c      	ite	eq
 80010bc:	2301      	moveq	r3, #1
 80010be:	2300      	movne	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f804 	bl	80010d0 <Led_Audio_Control>
}
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <Led_Audio_Control>:
/* Controls the Led animation,
 * mode <= 0 Means Failure thus, repeated blinking Animation
 * mode >= 1 Means Success thus, led stays on for 2 seconds.
 * */
void Led_Audio_Control(int32_t mode){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
	if(mode <= 0){
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	dc23      	bgt.n	8001126 <Led_Audio_Control+0x56>
		for(int i = 0; i < 10; i++){
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e00a      	b.n	80010fa <Led_Audio_Control+0x2a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80010e4:	2120      	movs	r1, #32
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ea:	f003 fa9b 	bl	8004624 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	@ 0x64
 80010f0:	f000 fee2 	bl	8001eb8 <HAL_Delay>
		for(int i = 0; i < 10; i++){
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2b09      	cmp	r3, #9
 80010fe:	ddf1      	ble.n	80010e4 <Led_Audio_Control+0x14>
		}
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, DAC_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001100:	2300      	movs	r3, #0
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001108:	4a19      	ldr	r2, [pc, #100]	@ (8001170 <Led_Audio_Control+0xa0>)
 800110a:	2100      	movs	r1, #0
 800110c:	4819      	ldr	r0, [pc, #100]	@ (8001174 <Led_Audio_Control+0xa4>)
 800110e:	f002 fbc5 	bl	800389c <HAL_DAC_Start_DMA>
		init_player("booing.wav", dac_buffer, DAC_BUFFER_SIZE, &audio_file, &player_state);
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <Led_Audio_Control+0xa8>)
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4b19      	ldr	r3, [pc, #100]	@ (800117c <Led_Audio_Control+0xac>)
 8001118:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 800111c:	4914      	ldr	r1, [pc, #80]	@ (8001170 <Led_Audio_Control+0xa0>)
 800111e:	4818      	ldr	r0, [pc, #96]	@ (8001180 <Led_Audio_Control+0xb0>)
 8001120:	f7ff fc0a 	bl	8000938 <init_player>
		return;
 8001124:	e021      	b.n	800116a <Led_Audio_Control+0x9a>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	2120      	movs	r1, #32
 800112a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112e:	f003 fa61 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001132:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001136:	f000 febf 	bl	8001eb8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2120      	movs	r1, #32
 800113e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001142:	f003 fa57 	bl	80045f4 <HAL_GPIO_WritePin>

	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, DAC_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001146:	2300      	movs	r3, #0
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800114e:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <Led_Audio_Control+0xa0>)
 8001150:	2100      	movs	r1, #0
 8001152:	4808      	ldr	r0, [pc, #32]	@ (8001174 <Led_Audio_Control+0xa4>)
 8001154:	f002 fba2 	bl	800389c <HAL_DAC_Start_DMA>
	init_player("applause.wav", dac_buffer, DAC_BUFFER_SIZE, &audio_file, &player_state);
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <Led_Audio_Control+0xa8>)
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	4b07      	ldr	r3, [pc, #28]	@ (800117c <Led_Audio_Control+0xac>)
 800115e:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 8001162:	4903      	ldr	r1, [pc, #12]	@ (8001170 <Led_Audio_Control+0xa0>)
 8001164:	4807      	ldr	r0, [pc, #28]	@ (8001184 <Led_Audio_Control+0xb4>)
 8001166:	f7ff fbe7 	bl	8000938 <init_player>
}
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000358 	.word	0x20000358
 8001174:	200001c4 	.word	0x200001c4
 8001178:	20016910 	.word	0x20016910
 800117c:	2001647c 	.word	0x2001647c
 8001180:	0800c218 	.word	0x0800c218
 8001184:	0800c224 	.word	0x0800c224

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 fe17 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f85f 	bl	8001254 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f000 fa23 	bl	80015e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800119a:	f000 f9fb 	bl	8001594 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800119e:	f000 f9c9 	bl	8001534 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011a2:	f000 f8a9 	bl	80012f8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80011a6:	f000 f98f 	bl	80014c8 <MX_TIM6_Init>
  MX_DAC1_Init();
 80011aa:	f000 f91d 	bl	80013e8 <MX_DAC1_Init>
  MX_SPI2_Init();
 80011ae:	f000 f94d 	bl	800144c <MX_SPI2_Init>
  MX_FATFS_Init();
 80011b2:	f006 fabf 	bl	8007734 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80011b6:	481f      	ldr	r0, [pc, #124]	@ (8001234 <main+0xac>)
 80011b8:	f005 fb7a 	bl	80068b0 <HAL_TIM_Base_Start>
  arm_rfft_fast_init_f32(&fft_handler, FFT_LENGTH);
 80011bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c0:	481d      	ldr	r0, [pc, #116]	@ (8001238 <main+0xb0>)
 80011c2:	f009 fa4b 	bl	800a65c <arm_rfft_fast_init_f32>
  arm_fir_init_f32(&fir_filter, N_TAPS, &coeff[0], &state[0], N_BLOCK);
 80011c6:	2320      	movs	r3, #32
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <main+0xb4>)
 80011cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001240 <main+0xb8>)
 80011ce:	2120      	movs	r1, #32
 80011d0:	481c      	ldr	r0, [pc, #112]	@ (8001244 <main+0xbc>)
 80011d2:	f009 ff05 	bl	800afe0 <arm_fir_init_f32>

  int32_t pass_code_mask = 1 << 1 | 1 << 4 | 1 << 12 | 1 << 15; //= 4 2 A D
 80011d6:	f249 0312 	movw	r3, #36882	@ 0x9012
 80011da:	60fb      	str	r3, [r7, #12]
  int32_t sequence_length = 4;
 80011dc:	2304      	movs	r3, #4
 80011de:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  player_error_handler(&audio_file, &player_state);
 80011e0:	4919      	ldr	r1, [pc, #100]	@ (8001248 <main+0xc0>)
 80011e2:	481a      	ldr	r0, [pc, #104]	@ (800124c <main+0xc4>)
 80011e4:	f7ff fcfa 	bl	8000bdc <player_error_handler>
	  start_player_t16(&audio_file, &player_state);
 80011e8:	4917      	ldr	r1, [pc, #92]	@ (8001248 <main+0xc0>)
 80011ea:	4818      	ldr	r0, [pc, #96]	@ (800124c <main+0xc4>)
 80011ec:	f7ff fcb0 	bl	8000b50 <start_player_t16>

	  if(FLAG){
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <main+0xc8>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f3      	beq.n	80011e0 <main+0x58>

	  		int32_t code = -1;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	607b      	str	r3, [r7, #4]

	  		Process_Signal();
 80011fe:	f7ff fd3f 	bl	8000c80 <Process_Signal>
	  		 * 4 - 7   = 2,5,8,0 respectively
	  		 * 8 - 11  = 3,6,9,# respectively
	  		 * 12 - 15 = A,B,C,D respectively
	  		 * else = Code Not Found
	  		*/
	  		Get_DTMF_Code(&code); //7,9,c,d have problems getting detected
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fd89 	bl	8000d1c <Get_DTMF_Code>
	  		Evaluate_Code_Sequence(code, &sequence_length, &pass_code_mask, ALL_KEYS);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f107 020c 	add.w	r2, r7, #12
 8001210:	f107 0108 	add.w	r1, r7, #8
 8001214:	2300      	movs	r3, #0
 8001216:	f7ff ff23 	bl	8001060 <Evaluate_Code_Sequence>

	  		if(sequence_length <= 0){
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	dc04      	bgt.n	800122a <main+0xa2>
	  			pass_code_mask = 1 << 1 | 1 << 4 | 1 << 12 | 1 << 15;
 8001220:	f249 0312 	movw	r3, #36882	@ 0x9012
 8001224:	60fb      	str	r3, [r7, #12]
	  			sequence_length = 4;
 8001226:	2304      	movs	r3, #4
 8001228:	60bb      	str	r3, [r7, #8]
	  		}

			FLAG = 0;
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <main+0xc8>)
 800122c:	2200      	movs	r2, #0
 800122e:	801a      	strh	r2, [r3, #0]
	  player_error_handler(&audio_file, &player_state);
 8001230:	e7d6      	b.n	80011e0 <main+0x58>
 8001232:	bf00      	nop
 8001234:	20000284 	.word	0x20000284
 8001238:	20016458 	.word	0x20016458
 800123c:	20016358 	.word	0x20016358
 8001240:	20000000 	.word	0x20000000
 8001244:	20016470 	.word	0x20016470
 8001248:	20016910 	.word	0x20016910
 800124c:	2001647c 	.word	0x2001647c
 8001250:	20016454 	.word	0x20016454

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b096      	sub	sp, #88	@ 0x58
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2244      	movs	r2, #68	@ 0x44
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f00a faea 	bl	800b83c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001276:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800127a:	f003 fa13 	bl	80046a4 <HAL_PWREx_ControlVoltageScaling>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001284:	f000 fad0 	bl	8001828 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001290:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001292:	2310      	movs	r3, #16
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800129a:	2302      	movs	r3, #2
 800129c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012a2:	230a      	movs	r3, #10
 80012a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012a6:	2307      	movs	r3, #7
 80012a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fa4a 	bl	8004750 <HAL_RCC_OscConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012c2:	f000 fab1 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c6:	230f      	movs	r3, #15
 80012c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ca:	2303      	movs	r3, #3
 80012cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	2104      	movs	r1, #4
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fe12 	bl	8004f08 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ea:	f000 fa9d 	bl	8001828 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3758      	adds	r7, #88	@ 0x58
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800131a:	4b30      	ldr	r3, [pc, #192]	@ (80013dc <MX_ADC1_Init+0xe4>)
 800131c:	4a30      	ldr	r2, [pc, #192]	@ (80013e0 <MX_ADC1_Init+0xe8>)
 800131e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001320:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <MX_ADC1_Init+0xe4>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001326:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <MX_ADC1_Init+0xe4>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <MX_ADC1_Init+0xe4>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001332:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <MX_ADC1_Init+0xe4>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001338:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <MX_ADC1_Init+0xe4>)
 800133a:	2204      	movs	r2, #4
 800133c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800133e:	4b27      	ldr	r3, [pc, #156]	@ (80013dc <MX_ADC1_Init+0xe4>)
 8001340:	2200      	movs	r2, #0
 8001342:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001344:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <MX_ADC1_Init+0xe4>)
 8001346:	2200      	movs	r2, #0
 8001348:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800134a:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <MX_ADC1_Init+0xe4>)
 800134c:	2201      	movs	r2, #1
 800134e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001350:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <MX_ADC1_Init+0xe4>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001358:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <MX_ADC1_Init+0xe4>)
 800135a:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <MX_ADC1_Init+0xe4>)
 8001362:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001368:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <MX_ADC1_Init+0xe4>)
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_ADC1_Init+0xe4>)
 8001372:	2200      	movs	r2, #0
 8001374:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001376:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <MX_ADC1_Init+0xe4>)
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137e:	4817      	ldr	r0, [pc, #92]	@ (80013dc <MX_ADC1_Init+0xe4>)
 8001380:	f000 ffe2 	bl	8002348 <HAL_ADC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800138a:	f000 fa4d 	bl	8001828 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4810      	ldr	r0, [pc, #64]	@ (80013dc <MX_ADC1_Init+0xe4>)
 800139a:	f002 f89b 	bl	80034d4 <HAL_ADCEx_MultiModeConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80013a4:	f000 fa40 	bl	8001828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_ADC1_Init+0xec>)
 80013aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ac:	2306      	movs	r3, #6
 80013ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013b4:	237f      	movs	r3, #127	@ 0x7f
 80013b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013b8:	2304      	movs	r3, #4
 80013ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_ADC1_Init+0xe4>)
 80013c6:	f001 fa37 	bl	8002838 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80013d0:	f000 fa2a 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	@ 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000118 	.word	0x20000118
 80013e0:	50040000 	.word	0x50040000
 80013e4:	14f00020 	.word	0x14f00020

080013e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2224      	movs	r2, #36	@ 0x24
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00a fa21 	bl	800b83c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <MX_DAC1_Init+0x5c>)
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <MX_DAC1_Init+0x60>)
 80013fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001400:	4810      	ldr	r0, [pc, #64]	@ (8001444 <MX_DAC1_Init+0x5c>)
 8001402:	f002 fa28 	bl	8003856 <HAL_DAC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800140c:	f000 fa0c 	bl	8001828 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001414:	2304      	movs	r3, #4
 8001416:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	@ (8001444 <MX_DAC1_Init+0x5c>)
 800142c:	f002 fb51 	bl	8003ad2 <HAL_DAC_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001436:	f000 f9f7 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	@ 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001c4 	.word	0x200001c4
 8001448:	40007400 	.word	0x40007400

0800144c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_SPI2_Init+0x74>)
 8001452:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <MX_SPI2_Init+0x78>)
 8001454:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001456:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_SPI2_Init+0x74>)
 8001458:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800145c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_SPI2_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_SPI2_Init+0x74>)
 8001466:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800146a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_SPI2_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_SPI2_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_SPI2_Init+0x74>)
 800147a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800147e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_SPI2_Init+0x74>)
 8001482:	2238      	movs	r2, #56	@ 0x38
 8001484:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_SPI2_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <MX_SPI2_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <MX_SPI2_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_SPI2_Init+0x74>)
 800149a:	2207      	movs	r2, #7
 800149c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <MX_SPI2_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <MX_SPI2_Init+0x74>)
 80014a6:	2208      	movs	r2, #8
 80014a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_SPI2_Init+0x74>)
 80014ac:	f004 fc0c 	bl	8005cc8 <HAL_SPI_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f000 f9b7 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000220 	.word	0x20000220
 80014c4:	40003800 	.word	0x40003800

080014c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_TIM6_Init+0x64>)
 80014da:	4a15      	ldr	r2, [pc, #84]	@ (8001530 <MX_TIM6_Init+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80014de:	4b13      	ldr	r3, [pc, #76]	@ (800152c <MX_TIM6_Init+0x64>)
 80014e0:	224f      	movs	r2, #79	@ 0x4f
 80014e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_TIM6_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <MX_TIM6_Init+0x64>)
 80014ec:	2231      	movs	r2, #49	@ 0x31
 80014ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <MX_TIM6_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014f6:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_TIM6_Init+0x64>)
 80014f8:	f005 f982 	bl	8006800 <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001502:	f000 f991 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001506:	2320      	movs	r3, #32
 8001508:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	@ (800152c <MX_TIM6_Init+0x64>)
 8001514:	f005 fada 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800151e:	f000 f983 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000284 	.word	0x20000284
 8001530:	40001000 	.word	0x40001000

08001534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_USART2_UART_Init+0x58>)
 800153a:	4a15      	ldr	r2, [pc, #84]	@ (8001590 <MX_USART2_UART_Init+0x5c>)
 800153c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_USART2_UART_Init+0x58>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001578:	f005 fb30 	bl	8006bdc <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001582:	f000 f951 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200002d0 	.word	0x200002d0
 8001590:	40004400 	.word	0x40004400

08001594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <MX_DMA_Init+0x48>)
 800159c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159e:	4a0f      	ldr	r2, [pc, #60]	@ (80015dc <MX_DMA_Init+0x48>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80015a6:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <MX_DMA_Init+0x48>)
 80015a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	200b      	movs	r0, #11
 80015b8:	f002 f917 	bl	80037ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015bc:	200b      	movs	r0, #11
 80015be:	f002 f930 	bl	8003822 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	200d      	movs	r0, #13
 80015c8:	f002 f90f 	bl	80037ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015cc:	200d      	movs	r0, #13
 80015ce:	f002 f928 	bl	8003822 <HAL_NVIC_EnableIRQ>

}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	4b39      	ldr	r3, [pc, #228]	@ (80016dc <MX_GPIO_Init+0xfc>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a38      	ldr	r2, [pc, #224]	@ (80016dc <MX_GPIO_Init+0xfc>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b36      	ldr	r3, [pc, #216]	@ (80016dc <MX_GPIO_Init+0xfc>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160e:	4b33      	ldr	r3, [pc, #204]	@ (80016dc <MX_GPIO_Init+0xfc>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a32      	ldr	r2, [pc, #200]	@ (80016dc <MX_GPIO_Init+0xfc>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b30      	ldr	r3, [pc, #192]	@ (80016dc <MX_GPIO_Init+0xfc>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <MX_GPIO_Init+0xfc>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	4a2c      	ldr	r2, [pc, #176]	@ (80016dc <MX_GPIO_Init+0xfc>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001632:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <MX_GPIO_Init+0xfc>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <MX_GPIO_Init+0xfc>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a26      	ldr	r2, [pc, #152]	@ (80016dc <MX_GPIO_Init+0xfc>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <MX_GPIO_Init+0xfc>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2120      	movs	r1, #32
 800165a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165e:	f002 ffc9 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2180      	movs	r1, #128	@ 0x80
 8001666:	481e      	ldr	r0, [pc, #120]	@ (80016e0 <MX_GPIO_Init+0x100>)
 8001668:	f002 ffc4 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800166c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001672:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4817      	ldr	r0, [pc, #92]	@ (80016e0 <MX_GPIO_Init+0x100>)
 8001684:	f002 fe0c 	bl	80042a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001688:	2320      	movs	r3, #32
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a2:	f002 fdfd 	bl	80042a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4808      	ldr	r0, [pc, #32]	@ (80016e0 <MX_GPIO_Init+0x100>)
 80016be:	f002 fdef 	bl	80042a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2028      	movs	r0, #40	@ 0x28
 80016c8:	f002 f88f 	bl	80037ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016cc:	2028      	movs	r0, #40	@ 0x28
 80016ce:	f002 f8a8 	bl	8003822 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	@ 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000800 	.word	0x48000800

080016e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start_DMA(&hadc1, adc_buffer, BUFFER_SIZE);
 80016ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016f2:	4904      	ldr	r1, [pc, #16]	@ (8001704 <HAL_GPIO_EXTI_Callback+0x20>)
 80016f4:	4804      	ldr	r0, [pc, #16]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x24>)
 80016f6:	f000 ff77 	bl	80025e8 <HAL_ADC_Start_DMA>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000f358 	.word	0x2000f358
 8001708:	20000118 	.word	0x20000118

0800170c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_HALFSIZE; i++){
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e010      	b.n	800173c <HAL_ADC_ConvHalfCpltCallback+0x30>
		input_signal[i] = adc_buffer[i];
 800171a:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172a:	4a0b      	ldr	r2, [pc, #44]	@ (8001758 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < BUFFER_HALFSIZE; i++){
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3301      	adds	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001742:	dbea      	blt.n	800171a <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2000f358 	.word	0x2000f358
 8001758:	20010358 	.word	0x20010358

0800175c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8001764:	4811      	ldr	r0, [pc, #68]	@ (80017ac <HAL_ADC_ConvCpltCallback+0x50>)
 8001766:	f000 fffb 	bl	8002760 <HAL_ADC_Stop_DMA>
	for(int i = BUFFER_HALFSIZE; i < BUFFER_SIZE; i++){
 800176a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e010      	b.n	8001794 <HAL_ADC_ConvCpltCallback+0x38>
		input_signal[i] = adc_buffer[i];
 8001772:	4a0f      	ldr	r2, [pc, #60]	@ (80017b0 <HAL_ADC_ConvCpltCallback+0x54>)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001782:	4a0c      	ldr	r2, [pc, #48]	@ (80017b4 <HAL_ADC_ConvCpltCallback+0x58>)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = BUFFER_HALFSIZE; i < BUFFER_SIZE; i++){
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800179a:	dbea      	blt.n	8001772 <HAL_ADC_ConvCpltCallback+0x16>
	}
	FLAG = 1;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_ADC_ConvCpltCallback+0x5c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	801a      	strh	r2, [r3, #0]
//	process_signal(&adc_buffer[0], &output_fft_freq[0]);
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000118 	.word	0x20000118
 80017b0:	2000f358 	.word	0x2000f358
 80017b4:	20010358 	.word	0x20010358
 80017b8:	20016454 	.word	0x20016454

080017bc <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac){
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if((player_state & (CLOSE_FILE | PLAY_ERROR)) > 0 || player_state == 0){
 80017d8:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_DAC_ConvCpltCallbackCh1+0x4c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	dc03      	bgt.n	80017ec <HAL_DAC_ConvCpltCallbackCh1+0x1c>
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_DAC_ConvCpltCallbackCh1+0x4c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d112      	bne.n	8001812 <HAL_DAC_ConvCpltCallbackCh1+0x42>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80017ec:	2100      	movs	r1, #0
 80017ee:	480c      	ldr	r0, [pc, #48]	@ (8001820 <HAL_DAC_ConvCpltCallbackCh1+0x50>)
 80017f0:	f002 f920 	bl	8003a34 <HAL_DAC_Stop_DMA>
		for(int i = 0; i < DAC_BUFFER_SIZE; i++){ //ZERO OUT THE BUFFER FROM ANY REMAINING AUDIO
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e007      	b.n	800180a <HAL_DAC_ConvCpltCallbackCh1+0x3a>
			dac_buffer[i] = 0;
 80017fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <HAL_DAC_ConvCpltCallbackCh1+0x54>)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2100      	movs	r1, #0
 8001800:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < DAC_BUFFER_SIZE; i++){ //ZERO OUT THE BUFFER FROM ANY REMAINING AUDIO
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3301      	adds	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f5b3 4ff0 	cmp.w	r3, #30720	@ 0x7800
 8001810:	d3f3      	bcc.n	80017fa <HAL_DAC_ConvCpltCallbackCh1+0x2a>
		}
	}
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20016910 	.word	0x20016910
 8001820:	200001c4 	.word	0x200001c4
 8001824:	20000358 	.word	0x20000358

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <Error_Handler+0x8>

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <HAL_MspInit+0x44>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183e:	4a0e      	ldr	r2, [pc, #56]	@ (8001878 <HAL_MspInit+0x44>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6613      	str	r3, [r2, #96]	@ 0x60
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <HAL_MspInit+0x44>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_MspInit+0x44>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001856:	4a08      	ldr	r2, [pc, #32]	@ (8001878 <HAL_MspInit+0x44>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6593      	str	r3, [r2, #88]	@ 0x58
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_MspInit+0x44>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0ac      	sub	sp, #176	@ 0xb0
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2288      	movs	r2, #136	@ 0x88
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f009 ffcd 	bl	800b83c <memset>
  if(hadc->Instance==ADC1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a3d      	ldr	r2, [pc, #244]	@ (800199c <HAL_ADC_MspInit+0x120>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d172      	bne.n	8001992 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80018b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80018c2:	2308      	movs	r3, #8
 80018c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018c6:	2307      	movs	r3, #7
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018ce:	2302      	movs	r3, #2
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018d6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fd37 	bl	8005350 <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80018e8:	f7ff ff9e 	bl	8001828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018ec:	4b2c      	ldr	r3, [pc, #176]	@ (80019a0 <HAL_ADC_MspInit+0x124>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f0:	4a2b      	ldr	r2, [pc, #172]	@ (80019a0 <HAL_ADC_MspInit+0x124>)
 80018f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f8:	4b29      	ldr	r3, [pc, #164]	@ (80019a0 <HAL_ADC_MspInit+0x124>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <HAL_ADC_MspInit+0x124>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	4a25      	ldr	r2, [pc, #148]	@ (80019a0 <HAL_ADC_MspInit+0x124>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001910:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <HAL_ADC_MspInit+0x124>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191c:	2301      	movs	r3, #1
 800191e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001922:	230b      	movs	r3, #11
 8001924:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001938:	f002 fcb2 	bl	80042a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 800193e:	4a1a      	ldr	r2, [pc, #104]	@ (80019a8 <HAL_ADC_MspInit+0x12c>)
 8001940:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 8001956:	2280      	movs	r2, #128	@ 0x80
 8001958:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 800195c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001960:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 8001964:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001968:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 800196c:	2220      	movs	r2, #32
 800196e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 8001972:	2200      	movs	r2, #0
 8001974:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001976:	480b      	ldr	r0, [pc, #44]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 8001978:	f002 fa5c 	bl	8003e34 <HAL_DMA_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001982:	f7ff ff51 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 800198a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800198c:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <HAL_ADC_MspInit+0x128>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001992:	bf00      	nop
 8001994:	37b0      	adds	r7, #176	@ 0xb0
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	50040000 	.word	0x50040000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	2000017c 	.word	0x2000017c
 80019a8:	40020008 	.word	0x40020008

080019ac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <HAL_DAC_MspInit+0xcc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d14f      	bne.n	8001a6e <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019ce:	4b2b      	ldr	r3, [pc, #172]	@ (8001a7c <HAL_DAC_MspInit+0xd0>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a7c <HAL_DAC_MspInit+0xd0>)
 80019d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019da:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <HAL_DAC_MspInit+0xd0>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <HAL_DAC_MspInit+0xd0>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	4a24      	ldr	r2, [pc, #144]	@ (8001a7c <HAL_DAC_MspInit+0xd0>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f2:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <HAL_DAC_MspInit+0xd0>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019fe:	2310      	movs	r3, #16
 8001a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a02:	2303      	movs	r3, #3
 8001a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a14:	f002 fc44 	bl	80042a0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001a18:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001a84 <HAL_DAC_MspInit+0xd8>)
 8001a1c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a20:	2206      	movs	r2, #6
 8001a22:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a26:	2210      	movs	r2, #16
 8001a28:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a36:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a3c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a44:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a48:	2220      	movs	r2, #32
 8001a4a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001a52:	480b      	ldr	r0, [pc, #44]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a54:	f002 f9ee 	bl	8003e34 <HAL_DMA_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001a5e:	f7ff fee3 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a06      	ldr	r2, [pc, #24]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <HAL_DAC_MspInit+0xd4>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	@ 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40007400 	.word	0x40007400
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	200001d8 	.word	0x200001d8
 8001a84:	40020030 	.word	0x40020030

08001a88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a25      	ldr	r2, [pc, #148]	@ (8001b3c <HAL_SPI_MspInit+0xb4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d144      	bne.n	8001b34 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aae:	4a24      	ldr	r2, [pc, #144]	@ (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab6:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ace:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	4a18      	ldr	r2, [pc, #96]	@ (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae6:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <HAL_SPI_MspInit+0xb8>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001af2:	230c      	movs	r3, #12
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b02:	2305      	movs	r3, #5
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <HAL_SPI_MspInit+0xbc>)
 8001b0e:	f002 fbc7 	bl	80042a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b24:	2305      	movs	r3, #5
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	@ (8001b48 <HAL_SPI_MspInit+0xc0>)
 8001b30:	f002 fbb6 	bl	80042a0 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	@ 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40003800 	.word	0x40003800
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000400 	.word	0x48000400

08001b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <HAL_TIM_Base_MspInit+0x38>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10b      	bne.n	8001b76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <HAL_TIM_Base_MspInit+0x3c>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	4a09      	ldr	r2, [pc, #36]	@ (8001b88 <HAL_TIM_Base_MspInit+0x3c>)
 8001b64:	f043 0310 	orr.w	r3, r3, #16
 8001b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <HAL_TIM_Base_MspInit+0x3c>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40001000 	.word	0x40001000
 8001b88:	40021000 	.word	0x40021000

08001b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0ac      	sub	sp, #176	@ 0xb0
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2288      	movs	r2, #136	@ 0x88
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f009 fe45 	bl	800b83c <memset>
  if(huart->Instance==USART2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a21      	ldr	r2, [pc, #132]	@ (8001c3c <HAL_UART_MspInit+0xb0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d13b      	bne.n	8001c34 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 fbc1 	bl	8005350 <HAL_RCCEx_PeriphCLKConfig>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bd4:	f7ff fe28 	bl	8001828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd8:	4b19      	ldr	r3, [pc, #100]	@ (8001c40 <HAL_UART_MspInit+0xb4>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bdc:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <HAL_UART_MspInit+0xb4>)
 8001bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be4:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <HAL_UART_MspInit+0xb4>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <HAL_UART_MspInit+0xb4>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf4:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <HAL_UART_MspInit+0xb4>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfc:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <HAL_UART_MspInit+0xb4>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c08:	230c      	movs	r3, #12
 8001c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c20:	2307      	movs	r3, #7
 8001c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c30:	f002 fb36 	bl	80042a0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c34:	bf00      	nop
 8001c36:	37b0      	adds	r7, #176	@ 0xb0
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40004400 	.word	0x40004400
 8001c40:	40021000 	.word	0x40021000

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <NMI_Handler+0x4>

08001c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9a:	f000 f8ed 	bl	8001e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <DMA1_Channel1_IRQHandler+0x10>)
 8001caa:	f002 fa19 	bl	80040e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000017c 	.word	0x2000017c

08001cb8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <DMA1_Channel3_IRQHandler+0x10>)
 8001cbe:	f002 fa0f 	bl	80040e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200001d8 	.word	0x200001d8

08001ccc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cd0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cd4:	f002 fcc0 	bl	8004658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d207      	bcs.n	8001d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d0c:	f009 fd9e 	bl	800b84c <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1a:	e009      	b.n	8001d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <_sbrk+0x64>)
 8001d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20018000 	.word	0x20018000
 8001d3c:	00000400 	.word	0x00000400
 8001d40:	20016a14 	.word	0x20016a14
 8001d44:	20016bb0 	.word	0x20016bb0

08001d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <SystemInit+0x20>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d52:	4a05      	ldr	r2, [pc, #20]	@ (8001d68 <SystemInit+0x20>)
 8001d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d70:	f7ff ffea 	bl	8001d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d76:	490d      	ldr	r1, [pc, #52]	@ (8001dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d78:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <LoopForever+0xe>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001db8 <LoopForever+0x16>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f009 fd5d 	bl	800b858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d9e:	f7ff f9f3 	bl	8001188 <main>

08001da2 <LoopForever>:

LoopForever:
    b LoopForever
 8001da2:	e7fe      	b.n	8001da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001da4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001db0:	0801f36c 	.word	0x0801f36c
  ldr r2, =_sbss
 8001db4:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8001db8:	20016bac 	.word	0x20016bac

08001dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC1_2_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <HAL_Init+0x3c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <HAL_Init+0x3c>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	f001 fcfc 	bl	80037d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f000 f80f 	bl	8001e00 <HAL_InitTick>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	71fb      	strb	r3, [r7, #7]
 8001dec:	e001      	b.n	8001df2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dee:	f7ff fd21 	bl	8001834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df2:	79fb      	ldrb	r3, [r7, #7]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40022000 	.word	0x40022000

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e0c:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <HAL_InitTick+0x6c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d023      	beq.n	8001e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e14:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <HAL_InitTick+0x70>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <HAL_InitTick+0x6c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 fd07 	bl	800383e <HAL_SYSTICK_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d809      	bhi.n	8001e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f001 fcd1 	bl	80037ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e48:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <HAL_InitTick+0x74>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e007      	b.n	8001e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e004      	b.n	8001e60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	e001      	b.n	8001e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000088 	.word	0x20000088
 8001e70:	20000080 	.word	0x20000080
 8001e74:	20000084 	.word	0x20000084

08001e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000088 	.word	0x20000088
 8001e9c:	20016a18 	.word	0x20016a18

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20016a18 	.word	0x20016a18

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d005      	beq.n	8001ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <HAL_Delay+0x44>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ede:	bf00      	nop
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f7      	bhi.n	8001ee0 <HAL_Delay+0x28>
  {
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000088 	.word	0x20000088

08001f00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	609a      	str	r2, [r3, #8]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3360      	adds	r3, #96	@ 0x60
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <LL_ADC_SetOffset+0x44>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fa0:	bf00      	nop
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	03fff000 	.word	0x03fff000

08001fb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3360      	adds	r3, #96	@ 0x60
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3360      	adds	r3, #96	@ 0x60
 8001fec:	461a      	mov	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3330      	adds	r3, #48	@ 0x30
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	4413      	add	r3, r2
 8002056:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	211f      	movs	r1, #31
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0e9b      	lsrs	r3, r3, #26
 8002070:	f003 011f 	and.w	r1, r3, #31
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	431a      	orrs	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3314      	adds	r3, #20
 80020a0:	461a      	mov	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	0e5b      	lsrs	r3, r3, #25
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	4413      	add	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	0d1b      	lsrs	r3, r3, #20
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	2107      	movs	r1, #7
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	401a      	ands	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	0d1b      	lsrs	r3, r3, #20
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	431a      	orrs	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002100:	43db      	mvns	r3, r3
 8002102:	401a      	ands	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0318 	and.w	r3, r3, #24
 800210a:	4908      	ldr	r1, [pc, #32]	@ (800212c <LL_ADC_SetChannelSingleDiff+0x44>)
 800210c:	40d9      	lsrs	r1, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	400b      	ands	r3, r1
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002116:	431a      	orrs	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	0007ffff 	.word	0x0007ffff

08002130 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 031f 	and.w	r3, r3, #31
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800215c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6093      	str	r3, [r2, #8]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002184:	d101      	bne.n	800218a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021d4:	d101      	bne.n	80021da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002220:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002224:	f043 0202 	orr.w	r2, r3, #2
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <LL_ADC_IsEnabled+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_ADC_IsEnabled+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b02      	cmp	r3, #2
 8002270:	d101      	bne.n	8002276 <LL_ADC_IsDisableOngoing+0x18>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <LL_ADC_IsDisableOngoing+0x1a>
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002294:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002298:	f043 0204 	orr.w	r2, r3, #4
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d101      	bne.n	80022ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800230a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800230e:	f043 0220 	orr.w	r2, r3, #32
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b08      	cmp	r3, #8
 8002334:	d101      	bne.n	800233a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b089      	sub	sp, #36	@ 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e130      	b.n	80025c4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff fa83 	bl	800187c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fef1 	bl	8002170 <LL_ADC_IsDeepPowerDownEnabled>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fed7 	bl	800214c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff0c 	bl	80021c0 <LL_ADC_IsInternalRegulatorEnabled>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fef0 	bl	8002198 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b8:	4b84      	ldr	r3, [pc, #528]	@ (80025cc <HAL_ADC_Init+0x284>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	4a84      	ldr	r2, [pc, #528]	@ (80025d0 <HAL_ADC_Init+0x288>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff feee 	bl	80021c0 <LL_ADC_IsInternalRegulatorEnabled>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ee:	f043 0210 	orr.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	f043 0201 	orr.w	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff62 	bl	80022d4 <LL_ADC_REG_IsConversionOngoing>
 8002410:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 80c9 	bne.w	80025b2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 80c5 	bne.w	80025b2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002430:	f043 0202 	orr.w	r2, r3, #2
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fefb 	bl	8002238 <LL_ADC_IsEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d115      	bne.n	8002474 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002448:	4862      	ldr	r0, [pc, #392]	@ (80025d4 <HAL_ADC_Init+0x28c>)
 800244a:	f7ff fef5 	bl	8002238 <LL_ADC_IsEnabled>
 800244e:	4604      	mov	r4, r0
 8002450:	4861      	ldr	r0, [pc, #388]	@ (80025d8 <HAL_ADC_Init+0x290>)
 8002452:	f7ff fef1 	bl	8002238 <LL_ADC_IsEnabled>
 8002456:	4603      	mov	r3, r0
 8002458:	431c      	orrs	r4, r3
 800245a:	4860      	ldr	r0, [pc, #384]	@ (80025dc <HAL_ADC_Init+0x294>)
 800245c:	f7ff feec 	bl	8002238 <LL_ADC_IsEnabled>
 8002460:	4603      	mov	r3, r0
 8002462:	4323      	orrs	r3, r4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4619      	mov	r1, r3
 800246e:	485c      	ldr	r0, [pc, #368]	@ (80025e0 <HAL_ADC_Init+0x298>)
 8002470:	f7ff fd46 	bl	8001f00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e5b      	ldrb	r3, [r3, #25]
 8002478:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800247e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002484:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800248a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002492:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	3b01      	subs	r3, #1
 80024a8:	045b      	lsls	r3, r3, #17
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4b44      	ldr	r3, [pc, #272]	@ (80025e4 <HAL_ADC_Init+0x29c>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	430b      	orrs	r3, r1
 80024de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff1c 	bl	8002322 <LL_ADC_INJ_IsConversionOngoing>
 80024ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d13d      	bne.n	800256e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d13a      	bne.n	800256e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024fc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002504:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002514:	f023 0302 	bic.w	r3, r3, #2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	69b9      	ldr	r1, [r7, #24]
 800251e:	430b      	orrs	r3, r1
 8002520:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002528:	2b01      	cmp	r3, #1
 800252a:	d118      	bne.n	800255e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002536:	f023 0304 	bic.w	r3, r3, #4
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002548:	4311      	orrs	r1, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800254e:	430a      	orrs	r2, r1
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	611a      	str	r2, [r3, #16]
 800255c:	e007      	b.n	800256e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d10c      	bne.n	8002590 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	f023 010f 	bic.w	r1, r3, #15
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	1e5a      	subs	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	631a      	str	r2, [r3, #48]	@ 0x30
 800258e:	e007      	b.n	80025a0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 020f 	bic.w	r2, r2, #15
 800259e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a4:	f023 0303 	bic.w	r3, r3, #3
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80025b0:	e007      	b.n	80025c2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b6:	f043 0210 	orr.w	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3724      	adds	r7, #36	@ 0x24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}
 80025cc:	20000080 	.word	0x20000080
 80025d0:	053e2d63 	.word	0x053e2d63
 80025d4:	50040000 	.word	0x50040000
 80025d8:	50040100 	.word	0x50040100
 80025dc:	50040200 	.word	0x50040200
 80025e0:	50040300 	.word	0x50040300
 80025e4:	fff0c007 	.word	0xfff0c007

080025e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025f4:	4853      	ldr	r0, [pc, #332]	@ (8002744 <HAL_ADC_Start_DMA+0x15c>)
 80025f6:	f7ff fd9b 	bl	8002130 <LL_ADC_GetMultimode>
 80025fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fe67 	bl	80022d4 <LL_ADC_REG_IsConversionOngoing>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 8093 	bne.w	8002734 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_ADC_Start_DMA+0x34>
 8002618:	2302      	movs	r3, #2
 800261a:	e08e      	b.n	800273a <HAL_ADC_Start_DMA+0x152>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a47      	ldr	r2, [pc, #284]	@ (8002748 <HAL_ADC_Start_DMA+0x160>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d008      	beq.n	8002640 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b05      	cmp	r3, #5
 8002638:	d002      	beq.n	8002640 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b09      	cmp	r3, #9
 800263e:	d172      	bne.n	8002726 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fda7 	bl	8003194 <ADC_Enable>
 8002646:	4603      	mov	r3, r0
 8002648:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d165      	bne.n	800271c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a38      	ldr	r2, [pc, #224]	@ (800274c <HAL_ADC_Start_DMA+0x164>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d002      	beq.n	8002674 <HAL_ADC_Start_DMA+0x8c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e000      	b.n	8002676 <HAL_ADC_Start_DMA+0x8e>
 8002674:	4b36      	ldr	r3, [pc, #216]	@ (8002750 <HAL_ADC_Start_DMA+0x168>)
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	4293      	cmp	r3, r2
 800267c:	d002      	beq.n	8002684 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	f023 0206 	bic.w	r2, r3, #6
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b4:	4a27      	ldr	r2, [pc, #156]	@ (8002754 <HAL_ADC_Start_DMA+0x16c>)
 80026b6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026bc:	4a26      	ldr	r2, [pc, #152]	@ (8002758 <HAL_ADC_Start_DMA+0x170>)
 80026be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c4:	4a25      	ldr	r2, [pc, #148]	@ (800275c <HAL_ADC_Start_DMA+0x174>)
 80026c6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	221c      	movs	r2, #28
 80026ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0210 	orr.w	r2, r2, #16
 80026e6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3340      	adds	r3, #64	@ 0x40
 8002702:	4619      	mov	r1, r3
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f001 fc4c 	bl	8003fa4 <HAL_DMA_Start_IT>
 800270c:	4603      	mov	r3, r0
 800270e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fdb5 	bl	8002284 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800271a:	e00d      	b.n	8002738 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002724:	e008      	b.n	8002738 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002732:	e001      	b.n	8002738 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002734:	2302      	movs	r3, #2
 8002736:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002738:	7dfb      	ldrb	r3, [r7, #23]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	50040300 	.word	0x50040300
 8002748:	50040200 	.word	0x50040200
 800274c:	50040100 	.word	0x50040100
 8002750:	50040000 	.word	0x50040000
 8002754:	0800335f 	.word	0x0800335f
 8002758:	08003437 	.word	0x08003437
 800275c:	08003453 	.word	0x08003453

08002760 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_ADC_Stop_DMA+0x16>
 8002772:	2302      	movs	r3, #2
 8002774:	e051      	b.n	800281a <HAL_ADC_Stop_DMA+0xba>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800277e:	2103      	movs	r1, #3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fc4b 	bl	800301c <ADC_ConversionStop>
 8002786:	4603      	mov	r3, r0
 8002788:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d13f      	bne.n	8002810 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d10f      	bne.n	80027ce <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 fc56 	bl	8004064 <HAL_DMA_Abort>
 80027b8:	4603      	mov	r3, r0
 80027ba:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0210 	bic.w	r2, r2, #16
 80027dc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fd5b 	bl	80032a0 <ADC_Disable>
 80027ea:	4603      	mov	r3, r0
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e002      	b.n	80027f6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fd55 	bl	80032a0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002800:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0b6      	sub	sp, #216	@ 0xd8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x22>
 8002856:	2302      	movs	r3, #2
 8002858:	e3c9      	b.n	8002fee <HAL_ADC_ConfigChannel+0x7b6>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fd34 	bl	80022d4 <LL_ADC_REG_IsConversionOngoing>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 83aa 	bne.w	8002fc8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d824      	bhi.n	80028ce <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	3b02      	subs	r3, #2
 800288a:	2b03      	cmp	r3, #3
 800288c:	d81b      	bhi.n	80028c6 <HAL_ADC_ConfigChannel+0x8e>
 800288e:	a201      	add	r2, pc, #4	@ (adr r2, 8002894 <HAL_ADC_ConfigChannel+0x5c>)
 8002890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002894:	080028a5 	.word	0x080028a5
 8002898:	080028ad 	.word	0x080028ad
 800289c:	080028b5 	.word	0x080028b5
 80028a0:	080028bd 	.word	0x080028bd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80028a4:	230c      	movs	r3, #12
 80028a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028aa:	e010      	b.n	80028ce <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80028ac:	2312      	movs	r3, #18
 80028ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028b2:	e00c      	b.n	80028ce <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80028b4:	2318      	movs	r3, #24
 80028b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028ba:	e008      	b.n	80028ce <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80028bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028c4:	e003      	b.n	80028ce <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80028c6:	2306      	movs	r3, #6
 80028c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028cc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80028dc:	f7ff fbac 	bl	8002038 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fcf5 	bl	80022d4 <LL_ADC_REG_IsConversionOngoing>
 80028ea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fd15 	bl	8002322 <LL_ADC_INJ_IsConversionOngoing>
 80028f8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002900:	2b00      	cmp	r3, #0
 8002902:	f040 81a4 	bne.w	8002c4e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 819f 	bne.w	8002c4e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6819      	ldr	r1, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	461a      	mov	r2, r3
 800291e:	f7ff fbb7 	bl	8002090 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	08db      	lsrs	r3, r3, #3
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d00a      	beq.n	800295a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6919      	ldr	r1, [r3, #16]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002954:	f7ff fb08 	bl	8001f68 <LL_ADC_SetOffset>
 8002958:	e179      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fb25 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x14e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fb1a 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	e01e      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x18c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fb0f 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80029b4:	2320      	movs	r3, #32
 80029b6:	e004      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80029b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1a4>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	e018      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x1d6>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80029f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80029f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e004      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d106      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fade 	bl	8001fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fac2 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x214>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fab7 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 021f 	and.w	r2, r3, #31
 8002a4a:	e01e      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x252>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff faac 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	e004      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x26a>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0e9b      	lsrs	r3, r3, #26
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	e018      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x29c>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002aba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002abe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e004      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d106      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fa7b 	bl	8001fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2102      	movs	r1, #2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fa5f 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x2da>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2102      	movs	r1, #2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fa54 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	e01e      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x318>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2102      	movs	r1, #2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fa49 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002b40:	2320      	movs	r3, #32
 8002b42:	e004      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x330>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	e014      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x35a>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002b76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e004      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d106      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fa1c 	bl	8001fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2103      	movs	r1, #3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fa00 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x398>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff f9f5 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	f003 021f 	and.w	r2, r3, #31
 8002bce:	e017      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x3c8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f9ea 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e003      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x3e0>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	e011      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x404>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c28:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e003      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d106      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2103      	movs	r1, #3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f9c7 	bl	8001fdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff faf0 	bl	8002238 <LL_ADC_IsEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 8140 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f7ff fa3b 	bl	80020e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a8f      	ldr	r2, [pc, #572]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x67c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	f040 8131 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x46e>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	3301      	adds	r3, #1
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2b09      	cmp	r3, #9
 8002c9c:	bf94      	ite	ls
 8002c9e:	2301      	movls	r3, #1
 8002ca0:	2300      	movhi	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e019      	b.n	8002cda <HAL_ADC_ConfigChannel+0x4a2>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002cb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e003      	b.n	8002cca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002cc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2b09      	cmp	r3, #9
 8002cd2:	bf94      	ite	ls
 8002cd4:	2301      	movls	r3, #1
 8002cd6:	2300      	movhi	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d079      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x4c2>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	069b      	lsls	r3, r3, #26
 8002cf4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf8:	e015      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x4ee>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d0a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e003      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	069b      	lsls	r3, r3, #26
 8002d22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x50e>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	e017      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x53e>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d56:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e003      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	ea42 0103 	orr.w	r1, r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x564>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f003 021f 	and.w	r2, r3, #31
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	051b      	lsls	r3, r3, #20
 8002d9a:	e018      	b.n	8002dce <HAL_ADC_ConfigChannel+0x596>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f003 021f 	and.w	r2, r3, #31
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	e081      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x5b6>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0e9b      	lsrs	r3, r3, #26
 8002de4:	3301      	adds	r3, #1
 8002de6:	069b      	lsls	r3, r3, #26
 8002de8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dec:	e015      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x5e2>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002e06:	2320      	movs	r3, #32
 8002e08:	e003      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	069b      	lsls	r3, r3, #26
 8002e16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x602>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	e017      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x632>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	61bb      	str	r3, [r7, #24]
  return result;
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002e52:	2320      	movs	r3, #32
 8002e54:	e003      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x65e>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	3301      	adds	r3, #1
 8002e82:	f003 021f 	and.w	r2, r3, #31
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b1e      	subs	r3, #30
 8002e8e:	051b      	lsls	r3, r3, #20
 8002e90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e94:	e01e      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x69c>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	60fb      	str	r3, [r7, #12]
  return result;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e006      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x688>
 8002eb2:	bf00      	nop
 8002eb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b1e      	subs	r3, #30
 8002ece:	051b      	lsls	r3, r3, #20
 8002ed0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7ff f8d8 	bl	8002090 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b44      	ldr	r3, [pc, #272]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d07a      	beq.n	8002fe2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eec:	4843      	ldr	r0, [pc, #268]	@ (8002ffc <HAL_ADC_ConfigChannel+0x7c4>)
 8002eee:	f7ff f82d 	bl	8001f4c <LL_ADC_GetCommonPathInternalCh>
 8002ef2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a41      	ldr	r2, [pc, #260]	@ (8003000 <HAL_ADC_ConfigChannel+0x7c8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d12c      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d126      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a3c      	ldr	r2, [pc, #240]	@ (8003004 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_ADC_ConfigChannel+0x6e8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a3b      	ldr	r2, [pc, #236]	@ (8003008 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d15d      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4834      	ldr	r0, [pc, #208]	@ (8002ffc <HAL_ADC_ConfigChannel+0x7c4>)
 8002f2c:	f7fe fffb 	bl	8001f26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f30:	4b36      	ldr	r3, [pc, #216]	@ (800300c <HAL_ADC_ConfigChannel+0x7d4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	099b      	lsrs	r3, r3, #6
 8002f36:	4a36      	ldr	r2, [pc, #216]	@ (8003010 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f4a:	e002      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f9      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f58:	e040      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003014 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d118      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d112      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a23      	ldr	r2, [pc, #140]	@ (8003004 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_ADC_ConfigChannel+0x74c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a22      	ldr	r2, [pc, #136]	@ (8003008 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d12d      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	481b      	ldr	r0, [pc, #108]	@ (8002ffc <HAL_ADC_ConfigChannel+0x7c4>)
 8002f90:	f7fe ffc9 	bl	8001f26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f94:	e024      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003018 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d120      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11a      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a14      	ldr	r2, [pc, #80]	@ (8003004 <HAL_ADC_ConfigChannel+0x7cc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d115      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	480e      	ldr	r0, [pc, #56]	@ (8002ffc <HAL_ADC_ConfigChannel+0x7c4>)
 8002fc2:	f7fe ffb0 	bl	8001f26 <LL_ADC_SetCommonPathInternalCh>
 8002fc6:	e00c      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002fda:	e002      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fdc:	bf00      	nop
 8002fde:	e000      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fe0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	37d8      	adds	r7, #216	@ 0xd8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	80080000 	.word	0x80080000
 8002ffc:	50040300 	.word	0x50040300
 8003000:	c7520000 	.word	0xc7520000
 8003004:	50040000 	.word	0x50040000
 8003008:	50040200 	.word	0x50040200
 800300c:	20000080 	.word	0x20000080
 8003010:	053e2d63 	.word	0x053e2d63
 8003014:	cb840000 	.word	0xcb840000
 8003018:	80000001 	.word	0x80000001

0800301c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f94e 	bl	80022d4 <LL_ADC_REG_IsConversionOngoing>
 8003038:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f96f 	bl	8002322 <LL_ADC_INJ_IsConversionOngoing>
 8003044:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d103      	bne.n	8003054 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8098 	beq.w	8003184 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02a      	beq.n	80030b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7e5b      	ldrb	r3, [r3, #25]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d126      	bne.n	80030b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7e1b      	ldrb	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d122      	bne.n	80030b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003072:	2301      	movs	r3, #1
 8003074:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003076:	e014      	b.n	80030a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4a45      	ldr	r2, [pc, #276]	@ (8003190 <ADC_ConversionStop+0x174>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d90d      	bls.n	800309c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e074      	b.n	8003186 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	3301      	adds	r3, #1
 80030a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ac:	2b40      	cmp	r3, #64	@ 0x40
 80030ae:	d1e3      	bne.n	8003078 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2240      	movs	r2, #64	@ 0x40
 80030b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d014      	beq.n	80030e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f906 	bl	80022d4 <LL_ADC_REG_IsConversionOngoing>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff f8c3 	bl	800225e <LL_ADC_IsDisableOngoing>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f8e2 	bl	80022ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d014      	beq.n	8003118 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f915 	bl	8002322 <LL_ADC_INJ_IsConversionOngoing>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f8ab 	bl	800225e <LL_ADC_IsDisableOngoing>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d104      	bne.n	8003118 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff f8f1 	bl	80022fa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d005      	beq.n	800312a <ADC_ConversionStop+0x10e>
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d105      	bne.n	8003130 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003124:	230c      	movs	r3, #12
 8003126:	617b      	str	r3, [r7, #20]
        break;
 8003128:	e005      	b.n	8003136 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800312a:	2308      	movs	r3, #8
 800312c:	617b      	str	r3, [r7, #20]
        break;
 800312e:	e002      	b.n	8003136 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003130:	2304      	movs	r3, #4
 8003132:	617b      	str	r3, [r7, #20]
        break;
 8003134:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003136:	f7fe feb3 	bl	8001ea0 <HAL_GetTick>
 800313a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800313c:	e01b      	b.n	8003176 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800313e:	f7fe feaf 	bl	8001ea0 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b05      	cmp	r3, #5
 800314a:	d914      	bls.n	8003176 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315e:	f043 0210 	orr.w	r2, r3, #16
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e007      	b.n	8003186 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1dc      	bne.n	800313e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	a33fffff 	.word	0xa33fffff

08003194 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff f847 	bl	8002238 <LL_ADC_IsEnabled>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d169      	bne.n	8003284 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	4b36      	ldr	r3, [pc, #216]	@ (8003290 <ADC_Enable+0xfc>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c2:	f043 0210 	orr.w	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e055      	b.n	8003286 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff f802 	bl	80021e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031e4:	482b      	ldr	r0, [pc, #172]	@ (8003294 <ADC_Enable+0x100>)
 80031e6:	f7fe feb1 	bl	8001f4c <LL_ADC_GetCommonPathInternalCh>
 80031ea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031f4:	4b28      	ldr	r3, [pc, #160]	@ (8003298 <ADC_Enable+0x104>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	4a28      	ldr	r2, [pc, #160]	@ (800329c <ADC_Enable+0x108>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800320e:	e002      	b.n	8003216 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	3b01      	subs	r3, #1
 8003214:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f9      	bne.n	8003210 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800321c:	f7fe fe40 	bl	8001ea0 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003222:	e028      	b.n	8003276 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff f805 	bl	8002238 <LL_ADC_IsEnabled>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d104      	bne.n	800323e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe ffd5 	bl	80021e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800323e:	f7fe fe2f 	bl	8001ea0 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d914      	bls.n	8003276 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d00d      	beq.n	8003276 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325e:	f043 0210 	orr.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	f043 0201 	orr.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e007      	b.n	8003286 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d1cf      	bne.n	8003224 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	8000003f 	.word	0x8000003f
 8003294:	50040300 	.word	0x50040300
 8003298:	20000080 	.word	0x20000080
 800329c:	053e2d63 	.word	0x053e2d63

080032a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe ffd6 	bl	800225e <LL_ADC_IsDisableOngoing>
 80032b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe ffbd 	bl	8002238 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d047      	beq.n	8003354 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d144      	bne.n	8003354 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030d 	and.w	r3, r3, #13
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d10c      	bne.n	80032f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe ff97 	bl	8002210 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2203      	movs	r2, #3
 80032e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032ea:	f7fe fdd9 	bl	8001ea0 <HAL_GetTick>
 80032ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032f0:	e029      	b.n	8003346 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f043 0210 	orr.w	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003302:	f043 0201 	orr.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e023      	b.n	8003356 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800330e:	f7fe fdc7 	bl	8001ea0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d914      	bls.n	8003346 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332e:	f043 0210 	orr.w	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e007      	b.n	8003356 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1dc      	bne.n	800330e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003370:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003374:	2b00      	cmp	r3, #0
 8003376:	d14b      	bne.n	8003410 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d021      	beq.n	80033d6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe fe3b 	bl	8002012 <LL_ADC_REG_IsTriggerSourceSWStart>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d032      	beq.n	8003408 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d12b      	bne.n	8003408 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11f      	bne.n	8003408 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80033d4:	e018      	b.n	8003408 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d111      	bne.n	8003408 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7fe f9a7 	bl	800175c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800340e:	e00e      	b.n	800342e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff fa00 	bl	8002822 <HAL_ADC_ErrorCallback>
}
 8003422:	e004      	b.n	800342e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003442:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7fe f961 	bl	800170c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003464:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	f043 0204 	orr.w	r2, r3, #4
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff f9d2 	bl	8002822 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <LL_ADC_IsEnabled>:
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <LL_ADC_IsEnabled+0x18>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <LL_ADC_IsEnabled+0x1a>
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_REG_IsConversionOngoing>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d101      	bne.n	80034c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b09f      	sub	sp, #124	@ 0x7c
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e093      	b.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80034fa:	2300      	movs	r3, #0
 80034fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80034fe:	2300      	movs	r3, #0
 8003500:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a47      	ldr	r2, [pc, #284]	@ (8003624 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d102      	bne.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800350c:	4b46      	ldr	r3, [pc, #280]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	e001      	b.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e072      	b.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ffb8 	bl	80034ac <LL_ADC_REG_IsConversionOngoing>
 800353c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ffb2 	bl	80034ac <LL_ADC_REG_IsConversionOngoing>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d154      	bne.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800354e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003550:	2b00      	cmp	r3, #0
 8003552:	d151      	bne.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003554:	4b35      	ldr	r3, [pc, #212]	@ (800362c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003556:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02c      	beq.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003572:	035b      	lsls	r3, r3, #13
 8003574:	430b      	orrs	r3, r1
 8003576:	431a      	orrs	r2, r3
 8003578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800357a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800357c:	4829      	ldr	r0, [pc, #164]	@ (8003624 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800357e:	f7ff ff82 	bl	8003486 <LL_ADC_IsEnabled>
 8003582:	4604      	mov	r4, r0
 8003584:	4828      	ldr	r0, [pc, #160]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003586:	f7ff ff7e 	bl	8003486 <LL_ADC_IsEnabled>
 800358a:	4603      	mov	r3, r0
 800358c:	431c      	orrs	r4, r3
 800358e:	4828      	ldr	r0, [pc, #160]	@ (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003590:	f7ff ff79 	bl	8003486 <LL_ADC_IsEnabled>
 8003594:	4603      	mov	r3, r0
 8003596:	4323      	orrs	r3, r4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d137      	bne.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800359c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035a4:	f023 030f 	bic.w	r3, r3, #15
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	6811      	ldr	r1, [r2, #0]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	6892      	ldr	r2, [r2, #8]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	431a      	orrs	r2, r3
 80035b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035b8:	e028      	b.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035c6:	4817      	ldr	r0, [pc, #92]	@ (8003624 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035c8:	f7ff ff5d 	bl	8003486 <LL_ADC_IsEnabled>
 80035cc:	4604      	mov	r4, r0
 80035ce:	4816      	ldr	r0, [pc, #88]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035d0:	f7ff ff59 	bl	8003486 <LL_ADC_IsEnabled>
 80035d4:	4603      	mov	r3, r0
 80035d6:	431c      	orrs	r4, r3
 80035d8:	4815      	ldr	r0, [pc, #84]	@ (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035da:	f7ff ff54 	bl	8003486 <LL_ADC_IsEnabled>
 80035de:	4603      	mov	r3, r0
 80035e0:	4323      	orrs	r3, r4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d112      	bne.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035ee:	f023 030f 	bic.w	r3, r3, #15
 80035f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035f6:	e009      	b.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800360a:	e000      	b.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800360c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003616:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800361a:	4618      	mov	r0, r3
 800361c:	377c      	adds	r7, #124	@ 0x7c
 800361e:	46bd      	mov	sp, r7
 8003620:	bd90      	pop	{r4, r7, pc}
 8003622:	bf00      	nop
 8003624:	50040000 	.word	0x50040000
 8003628:	50040100 	.word	0x50040100
 800362c:	50040300 	.word	0x50040300
 8003630:	50040200 	.word	0x50040200

08003634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003650:	4013      	ands	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800365c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003666:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	60d3      	str	r3, [r2, #12]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003680:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <__NVIC_GetPriorityGrouping+0x18>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	f003 0307 	and.w	r3, r3, #7
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	db0b      	blt.n	80036c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4907      	ldr	r1, [pc, #28]	@ (80036d0 <__NVIC_EnableIRQ+0x38>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2001      	movs	r0, #1
 80036ba:	fa00 f202 	lsl.w	r2, r0, r2
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000e100 	.word	0xe000e100

080036d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db0a      	blt.n	80036fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	490c      	ldr	r1, [pc, #48]	@ (8003720 <__NVIC_SetPriority+0x4c>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	440b      	add	r3, r1
 80036f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036fc:	e00a      	b.n	8003714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4908      	ldr	r1, [pc, #32]	@ (8003724 <__NVIC_SetPriority+0x50>)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	3b04      	subs	r3, #4
 800370c:	0112      	lsls	r2, r2, #4
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	440b      	add	r3, r1
 8003712:	761a      	strb	r2, [r3, #24]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000e100 	.word	0xe000e100
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	@ 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f1c3 0307 	rsb	r3, r3, #7
 8003742:	2b04      	cmp	r3, #4
 8003744:	bf28      	it	cs
 8003746:	2304      	movcs	r3, #4
 8003748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3304      	adds	r3, #4
 800374e:	2b06      	cmp	r3, #6
 8003750:	d902      	bls.n	8003758 <NVIC_EncodePriority+0x30>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3b03      	subs	r3, #3
 8003756:	e000      	b.n	800375a <NVIC_EncodePriority+0x32>
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	f04f 32ff 	mov.w	r2, #4294967295
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	401a      	ands	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003770:	f04f 31ff 	mov.w	r1, #4294967295
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	43d9      	mvns	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	4313      	orrs	r3, r2
         );
}
 8003782:	4618      	mov	r0, r3
 8003784:	3724      	adds	r7, #36	@ 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3b01      	subs	r3, #1
 800379c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a0:	d301      	bcc.n	80037a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00f      	b.n	80037c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a6:	4a0a      	ldr	r2, [pc, #40]	@ (80037d0 <SysTick_Config+0x40>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ae:	210f      	movs	r1, #15
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295
 80037b4:	f7ff ff8e 	bl	80036d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b8:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <SysTick_Config+0x40>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037be:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <SysTick_Config+0x40>)
 80037c0:	2207      	movs	r2, #7
 80037c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	e000e010 	.word	0xe000e010

080037d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff29 	bl	8003634 <__NVIC_SetPriorityGrouping>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4603      	mov	r3, r0
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037fc:	f7ff ff3e 	bl	800367c <__NVIC_GetPriorityGrouping>
 8003800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f7ff ff8e 	bl	8003728 <NVIC_EncodePriority>
 800380c:	4602      	mov	r2, r0
 800380e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff5d 	bl	80036d4 <__NVIC_SetPriority>
}
 800381a:	bf00      	nop
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff31 	bl	8003698 <__NVIC_EnableIRQ>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ffa2 	bl	8003790 <SysTick_Config>
 800384c:	4603      	mov	r3, r0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e014      	b.n	8003892 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	791b      	ldrb	r3, [r3, #4]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fe f897 	bl	80019ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	795b      	ldrb	r3, [r3, #5]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_DAC_Start_DMA+0x1e>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e0ab      	b.n	8003a12 <HAL_DAC_Start_DMA+0x176>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2202      	movs	r2, #2
 80038c4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d12f      	bne.n	800392c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a52      	ldr	r2, [pc, #328]	@ (8003a1c <HAL_DAC_Start_DMA+0x180>)
 80038d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a51      	ldr	r2, [pc, #324]	@ (8003a20 <HAL_DAC_Start_DMA+0x184>)
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a50      	ldr	r2, [pc, #320]	@ (8003a24 <HAL_DAC_Start_DMA+0x188>)
 80038e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038f2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d013      	beq.n	8003922 <HAL_DAC_Start_DMA+0x86>
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d845      	bhi.n	800398c <HAL_DAC_Start_DMA+0xf0>
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_DAC_Start_DMA+0x72>
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d005      	beq.n	8003918 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800390c:	e03e      	b.n	800398c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3308      	adds	r3, #8
 8003914:	613b      	str	r3, [r7, #16]
        break;
 8003916:	e03c      	b.n	8003992 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	613b      	str	r3, [r7, #16]
        break;
 8003920:	e037      	b.n	8003992 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3310      	adds	r3, #16
 8003928:	613b      	str	r3, [r7, #16]
        break;
 800392a:	e032      	b.n	8003992 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a3d      	ldr	r2, [pc, #244]	@ (8003a28 <HAL_DAC_Start_DMA+0x18c>)
 8003932:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4a3c      	ldr	r2, [pc, #240]	@ (8003a2c <HAL_DAC_Start_DMA+0x190>)
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a3b      	ldr	r2, [pc, #236]	@ (8003a30 <HAL_DAC_Start_DMA+0x194>)
 8003942:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003952:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	2b08      	cmp	r3, #8
 8003958:	d013      	beq.n	8003982 <HAL_DAC_Start_DMA+0xe6>
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d817      	bhi.n	8003990 <HAL_DAC_Start_DMA+0xf4>
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_DAC_Start_DMA+0xd2>
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d005      	beq.n	8003978 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800396c:	e010      	b.n	8003990 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3314      	adds	r3, #20
 8003974:	613b      	str	r3, [r7, #16]
        break;
 8003976:	e00c      	b.n	8003992 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3318      	adds	r3, #24
 800397e:	613b      	str	r3, [r7, #16]
        break;
 8003980:	e007      	b.n	8003992 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	331c      	adds	r3, #28
 8003988:	613b      	str	r3, [r7, #16]
        break;
 800398a:	e002      	b.n	8003992 <HAL_DAC_Start_DMA+0xf6>
        break;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003990:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d111      	bne.n	80039bc <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6898      	ldr	r0, [r3, #8]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	f000 faf7 	bl	8003fa4 <HAL_DMA_Start_IT>
 80039b6:	4603      	mov	r3, r0
 80039b8:	75fb      	strb	r3, [r7, #23]
 80039ba:	e010      	b.n	80039de <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80039ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68d8      	ldr	r0, [r3, #12]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	f000 fae5 	bl	8003fa4 <HAL_DMA_Start_IT>
 80039da:	4603      	mov	r3, r0
 80039dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10c      	bne.n	8003a04 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6819      	ldr	r1, [r3, #0]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2201      	movs	r2, #1
 80039f8:	409a      	lsls	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e005      	b.n	8003a10 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f043 0204 	orr.w	r2, r3, #4
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	08003d21 	.word	0x08003d21
 8003a20:	08003d43 	.word	0x08003d43
 8003a24:	08003d5f 	.word	0x08003d5f
 8003a28:	08003dc9 	.word	0x08003dc9
 8003a2c:	08003deb 	.word	0x08003deb
 8003a30:	08003e07 	.word	0x08003e07

08003a34 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43da      	mvns	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	400a      	ands	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6819      	ldr	r1, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2201      	movs	r2, #1
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	400a      	ands	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 faee 	bl	8004064 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e00c      	b.n	8003ab4 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fae0 	bl	8004064 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003ab2:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b088      	sub	sp, #32
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	795b      	ldrb	r3, [r3, #5]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_DAC_ConfigChannel+0x1c>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e114      	b.n	8003d18 <HAL_DAC_ConfigChannel+0x246>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2202      	movs	r2, #2
 8003af8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	f040 8081 	bne.w	8003c06 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b04:	f7fe f9cc 	bl	8001ea0 <HAL_GetTick>
 8003b08:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d140      	bne.n	8003b92 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b10:	e018      	b.n	8003b44 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b12:	f7fe f9c5 	bl	8001ea0 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d911      	bls.n	8003b44 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f043 0208 	orr.w	r2, r3, #8
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e0e9      	b.n	8003d18 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1df      	bne.n	8003b12 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003b52:	2001      	movs	r0, #1
 8003b54:	f7fe f9b0 	bl	8001eb8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	6992      	ldr	r2, [r2, #24]
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b62:	e023      	b.n	8003bac <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b64:	f7fe f99c 	bl	8001ea0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d90f      	bls.n	8003b92 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	da0a      	bge.n	8003b92 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f043 0208 	orr.w	r2, r3, #8
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0c2      	b.n	8003d18 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	dbe3      	blt.n	8003b64 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f7fe f98b 	bl	8001eb8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	6992      	ldr	r2, [r2, #24]
 8003baa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	ea02 0103 	and.w	r1, r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	21ff      	movs	r1, #255	@ 0xff
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	ea02 0103 	and.w	r1, r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6a1a      	ldr	r2, [r3, #32]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d11d      	bne.n	8003c4a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	221f      	movs	r2, #31
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c50:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2207      	movs	r2, #7
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4013      	ands	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	400a      	ands	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6819      	ldr	r1, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	22c0      	movs	r2, #192	@ 0xc0
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43da      	mvns	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	400a      	ands	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f7fd fd4e 	bl	80017d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	711a      	strb	r2, [r3, #4]
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f7fd fd33 	bl	80017bc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f043 0204 	orr.w	r2, r3, #4
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff fea0 	bl	8003abe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	711a      	strb	r2, [r3, #4]
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff ffd8 	bl	8003d8c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	711a      	strb	r2, [r3, #4]
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff ffd1 	bl	8003da0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff ffc7 	bl	8003db4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	711a      	strb	r2, [r3, #4]
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e098      	b.n	8003f78 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8003f84 <HAL_DMA_Init+0x150>)
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d80f      	bhi.n	8003e72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b4b      	ldr	r3, [pc, #300]	@ (8003f88 <HAL_DMA_Init+0x154>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8003f8c <HAL_DMA_Init+0x158>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	009a      	lsls	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a48      	ldr	r2, [pc, #288]	@ (8003f90 <HAL_DMA_Init+0x15c>)
 8003e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e70:	e00e      	b.n	8003e90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	4b46      	ldr	r3, [pc, #280]	@ (8003f94 <HAL_DMA_Init+0x160>)
 8003e7a:	4413      	add	r3, r2
 8003e7c:	4a43      	ldr	r2, [pc, #268]	@ (8003f8c <HAL_DMA_Init+0x158>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	009a      	lsls	r2, r3, #2
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a42      	ldr	r2, [pc, #264]	@ (8003f98 <HAL_DMA_Init+0x164>)
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eea:	d039      	beq.n	8003f60 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	4a27      	ldr	r2, [pc, #156]	@ (8003f90 <HAL_DMA_Init+0x15c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d11a      	bne.n	8003f2c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ef6:	4b29      	ldr	r3, [pc, #164]	@ (8003f9c <HAL_DMA_Init+0x168>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	f003 031c 	and.w	r3, r3, #28
 8003f02:	210f      	movs	r1, #15
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	4924      	ldr	r1, [pc, #144]	@ (8003f9c <HAL_DMA_Init+0x168>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f10:	4b22      	ldr	r3, [pc, #136]	@ (8003f9c <HAL_DMA_Init+0x168>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1c:	f003 031c 	and.w	r3, r3, #28
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	491d      	ldr	r1, [pc, #116]	@ (8003f9c <HAL_DMA_Init+0x168>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]
 8003f2a:	e019      	b.n	8003f60 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa0 <HAL_DMA_Init+0x16c>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f34:	f003 031c 	and.w	r3, r3, #28
 8003f38:	210f      	movs	r1, #15
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	4917      	ldr	r1, [pc, #92]	@ (8003fa0 <HAL_DMA_Init+0x16c>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f46:	4b16      	ldr	r3, [pc, #88]	@ (8003fa0 <HAL_DMA_Init+0x16c>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f003 031c 	and.w	r3, r3, #28
 8003f56:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5a:	4911      	ldr	r1, [pc, #68]	@ (8003fa0 <HAL_DMA_Init+0x16c>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40020407 	.word	0x40020407
 8003f88:	bffdfff8 	.word	0xbffdfff8
 8003f8c:	cccccccd 	.word	0xcccccccd
 8003f90:	40020000 	.word	0x40020000
 8003f94:	bffdfbf8 	.word	0xbffdfbf8
 8003f98:	40020400 	.word	0x40020400
 8003f9c:	400200a8 	.word	0x400200a8
 8003fa0:	400204a8 	.word	0x400204a8

08003fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_DMA_Start_IT+0x20>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e04b      	b.n	800405c <HAL_DMA_Start_IT+0xb8>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d13a      	bne.n	800404e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f91e 	bl	800423e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 020e 	orr.w	r2, r2, #14
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e00f      	b.n	800403c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0204 	bic.w	r2, r2, #4
 800402a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 020a 	orr.w	r2, r2, #10
 800403a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e005      	b.n	800405a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800405a:	7dfb      	ldrb	r3, [r7, #23]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d008      	beq.n	800408e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2204      	movs	r2, #4
 8004080:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e022      	b.n	80040d4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 020e 	bic.w	r2, r2, #14
 800409c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	f003 021c 	and.w	r2, r3, #28
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	2101      	movs	r1, #1
 80040bc:	fa01 f202 	lsl.w	r2, r1, r2
 80040c0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fc:	f003 031c 	and.w	r3, r3, #28
 8004100:	2204      	movs	r2, #4
 8004102:	409a      	lsls	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d026      	beq.n	800415a <HAL_DMA_IRQHandler+0x7a>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d021      	beq.n	800415a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d107      	bne.n	8004134 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0204 	bic.w	r2, r2, #4
 8004132:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004138:	f003 021c 	and.w	r2, r3, #28
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	2104      	movs	r1, #4
 8004142:	fa01 f202 	lsl.w	r2, r1, r2
 8004146:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	2b00      	cmp	r3, #0
 800414e:	d071      	beq.n	8004234 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004158:	e06c      	b.n	8004234 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415e:	f003 031c 	and.w	r3, r3, #28
 8004162:	2202      	movs	r2, #2
 8004164:	409a      	lsls	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d02e      	beq.n	80041cc <HAL_DMA_IRQHandler+0xec>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d029      	beq.n	80041cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 020a 	bic.w	r2, r2, #10
 8004194:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	f003 021c 	and.w	r2, r3, #28
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	2102      	movs	r1, #2
 80041ac:	fa01 f202 	lsl.w	r2, r1, r2
 80041b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d038      	beq.n	8004234 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041ca:	e033      	b.n	8004234 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d0:	f003 031c 	and.w	r3, r3, #28
 80041d4:	2208      	movs	r2, #8
 80041d6:	409a      	lsls	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d02a      	beq.n	8004236 <HAL_DMA_IRQHandler+0x156>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d025      	beq.n	8004236 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 020e 	bic.w	r2, r2, #14
 80041f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	f003 021c 	and.w	r2, r3, #28
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	2101      	movs	r1, #1
 8004208:	fa01 f202 	lsl.w	r2, r1, r2
 800420c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004234:	bf00      	nop
 8004236:	bf00      	nop
}
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004250:	f003 021c 	and.w	r2, r3, #28
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004258:	2101      	movs	r1, #1
 800425a:	fa01 f202 	lsl.w	r2, r1, r2
 800425e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b10      	cmp	r3, #16
 800426e:	d108      	bne.n	8004282 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004280:	e007      	b.n	8004292 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	60da      	str	r2, [r3, #12]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ae:	e17f      	b.n	80045b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2101      	movs	r1, #1
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	4013      	ands	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8171 	beq.w	80045aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d005      	beq.n	80042e0 <HAL_GPIO_Init+0x40>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d130      	bne.n	8004342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004316:	2201      	movs	r2, #1
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	091b      	lsrs	r3, r3, #4
 800432c:	f003 0201 	and.w	r2, r3, #1
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b03      	cmp	r3, #3
 800434c:	d118      	bne.n	8004380 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004354:	2201      	movs	r2, #1
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	08db      	lsrs	r3, r3, #3
 800436a:	f003 0201 	and.w	r2, r3, #1
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b03      	cmp	r3, #3
 800438a:	d017      	beq.n	80043bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	2203      	movs	r2, #3
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d123      	bne.n	8004410 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	08da      	lsrs	r2, r3, #3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3208      	adds	r2, #8
 80043d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	220f      	movs	r2, #15
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	08da      	lsrs	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3208      	adds	r2, #8
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 0203 	and.w	r2, r3, #3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80ac 	beq.w	80045aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004452:	4b5f      	ldr	r3, [pc, #380]	@ (80045d0 <HAL_GPIO_Init+0x330>)
 8004454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004456:	4a5e      	ldr	r2, [pc, #376]	@ (80045d0 <HAL_GPIO_Init+0x330>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	6613      	str	r3, [r2, #96]	@ 0x60
 800445e:	4b5c      	ldr	r3, [pc, #368]	@ (80045d0 <HAL_GPIO_Init+0x330>)
 8004460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800446a:	4a5a      	ldr	r2, [pc, #360]	@ (80045d4 <HAL_GPIO_Init+0x334>)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	3302      	adds	r3, #2
 8004472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004476:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	220f      	movs	r2, #15
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004494:	d025      	beq.n	80044e2 <HAL_GPIO_Init+0x242>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a4f      	ldr	r2, [pc, #316]	@ (80045d8 <HAL_GPIO_Init+0x338>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <HAL_GPIO_Init+0x23e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4e      	ldr	r2, [pc, #312]	@ (80045dc <HAL_GPIO_Init+0x33c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d019      	beq.n	80044da <HAL_GPIO_Init+0x23a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4d      	ldr	r2, [pc, #308]	@ (80045e0 <HAL_GPIO_Init+0x340>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_GPIO_Init+0x236>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4c      	ldr	r2, [pc, #304]	@ (80045e4 <HAL_GPIO_Init+0x344>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00d      	beq.n	80044d2 <HAL_GPIO_Init+0x232>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4b      	ldr	r2, [pc, #300]	@ (80045e8 <HAL_GPIO_Init+0x348>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_GPIO_Init+0x22e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4a      	ldr	r2, [pc, #296]	@ (80045ec <HAL_GPIO_Init+0x34c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_GPIO_Init+0x22a>
 80044c6:	2306      	movs	r3, #6
 80044c8:	e00c      	b.n	80044e4 <HAL_GPIO_Init+0x244>
 80044ca:	2307      	movs	r3, #7
 80044cc:	e00a      	b.n	80044e4 <HAL_GPIO_Init+0x244>
 80044ce:	2305      	movs	r3, #5
 80044d0:	e008      	b.n	80044e4 <HAL_GPIO_Init+0x244>
 80044d2:	2304      	movs	r3, #4
 80044d4:	e006      	b.n	80044e4 <HAL_GPIO_Init+0x244>
 80044d6:	2303      	movs	r3, #3
 80044d8:	e004      	b.n	80044e4 <HAL_GPIO_Init+0x244>
 80044da:	2302      	movs	r3, #2
 80044dc:	e002      	b.n	80044e4 <HAL_GPIO_Init+0x244>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <HAL_GPIO_Init+0x244>
 80044e2:	2300      	movs	r3, #0
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	f002 0203 	and.w	r2, r2, #3
 80044ea:	0092      	lsls	r2, r2, #2
 80044ec:	4093      	lsls	r3, r2
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044f4:	4937      	ldr	r1, [pc, #220]	@ (80045d4 <HAL_GPIO_Init+0x334>)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	089b      	lsrs	r3, r3, #2
 80044fa:	3302      	adds	r3, #2
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004502:	4b3b      	ldr	r3, [pc, #236]	@ (80045f0 <HAL_GPIO_Init+0x350>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004526:	4a32      	ldr	r2, [pc, #200]	@ (80045f0 <HAL_GPIO_Init+0x350>)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800452c:	4b30      	ldr	r3, [pc, #192]	@ (80045f0 <HAL_GPIO_Init+0x350>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	43db      	mvns	r3, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004550:	4a27      	ldr	r2, [pc, #156]	@ (80045f0 <HAL_GPIO_Init+0x350>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004556:	4b26      	ldr	r3, [pc, #152]	@ (80045f0 <HAL_GPIO_Init+0x350>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	43db      	mvns	r3, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800457a:	4a1d      	ldr	r2, [pc, #116]	@ (80045f0 <HAL_GPIO_Init+0x350>)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004580:	4b1b      	ldr	r3, [pc, #108]	@ (80045f0 <HAL_GPIO_Init+0x350>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	43db      	mvns	r3, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045a4:	4a12      	ldr	r2, [pc, #72]	@ (80045f0 <HAL_GPIO_Init+0x350>)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3301      	adds	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f47f ae78 	bne.w	80042b0 <HAL_GPIO_Init+0x10>
  }
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40010000 	.word	0x40010000
 80045d8:	48000400 	.word	0x48000400
 80045dc:	48000800 	.word	0x48000800
 80045e0:	48000c00 	.word	0x48000c00
 80045e4:	48001000 	.word	0x48001000
 80045e8:	48001400 	.word	0x48001400
 80045ec:	48001800 	.word	0x48001800
 80045f0:	40010400 	.word	0x40010400

080045f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	807b      	strh	r3, [r7, #2]
 8004600:	4613      	mov	r3, r2
 8004602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004604:	787b      	ldrb	r3, [r7, #1]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004610:	e002      	b.n	8004618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004612:	887a      	ldrh	r2, [r7, #2]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4013      	ands	r3, r2
 800463c:	041a      	lsls	r2, r3, #16
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	43d9      	mvns	r1, r3
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	400b      	ands	r3, r1
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	619a      	str	r2, [r3, #24]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004662:	4b08      	ldr	r3, [pc, #32]	@ (8004684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d006      	beq.n	800467c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800466e:	4a05      	ldr	r2, [pc, #20]	@ (8004684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fd f834 	bl	80016e4 <HAL_GPIO_EXTI_Callback>
  }
}
 800467c:	bf00      	nop
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40010400 	.word	0x40010400

08004688 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800468c:	4b04      	ldr	r3, [pc, #16]	@ (80046a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40007000 	.word	0x40007000

080046a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046b2:	d130      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046b4:	4b23      	ldr	r3, [pc, #140]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c0:	d038      	beq.n	8004734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c2:	4b20      	ldr	r3, [pc, #128]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004748 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2232      	movs	r2, #50	@ 0x32
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	4a1b      	ldr	r2, [pc, #108]	@ (800474c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	0c9b      	lsrs	r3, r3, #18
 80046e4:	3301      	adds	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046e8:	e002      	b.n	80046f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046f0:	4b14      	ldr	r3, [pc, #80]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fc:	d102      	bne.n	8004704 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f2      	bne.n	80046ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004704:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004710:	d110      	bne.n	8004734 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e00f      	b.n	8004736 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004716:	4b0b      	ldr	r3, [pc, #44]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800471e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004722:	d007      	beq.n	8004734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004724:	4b07      	ldr	r3, [pc, #28]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800472c:	4a05      	ldr	r2, [pc, #20]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800472e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004732:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40007000 	.word	0x40007000
 8004748:	20000080 	.word	0x20000080
 800474c:	431bde83 	.word	0x431bde83

08004750 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e3ca      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004762:	4b97      	ldr	r3, [pc, #604]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800476c:	4b94      	ldr	r3, [pc, #592]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 80e4 	beq.w	800494c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <HAL_RCC_OscConfig+0x4a>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b0c      	cmp	r3, #12
 800478e:	f040 808b 	bne.w	80048a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b01      	cmp	r3, #1
 8004796:	f040 8087 	bne.w	80048a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800479a:	4b89      	ldr	r3, [pc, #548]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <HAL_RCC_OscConfig+0x62>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e3a2      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	4b82      	ldr	r3, [pc, #520]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <HAL_RCC_OscConfig+0x7c>
 80047c2:	4b7f      	ldr	r3, [pc, #508]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047ca:	e005      	b.n	80047d8 <HAL_RCC_OscConfig+0x88>
 80047cc:	4b7c      	ldr	r3, [pc, #496]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d8:	4293      	cmp	r3, r2
 80047da:	d223      	bcs.n	8004824 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fd55 	bl	8005290 <RCC_SetFlashLatencyFromMSIRange>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e383      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047f0:	4b73      	ldr	r3, [pc, #460]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a72      	ldr	r2, [pc, #456]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80047f6:	f043 0308 	orr.w	r3, r3, #8
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b70      	ldr	r3, [pc, #448]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	496d      	ldr	r1, [pc, #436]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800480e:	4b6c      	ldr	r3, [pc, #432]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	4968      	ldr	r1, [pc, #416]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
 8004822:	e025      	b.n	8004870 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004824:	4b66      	ldr	r3, [pc, #408]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a65      	ldr	r2, [pc, #404]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 800482a:	f043 0308 	orr.w	r3, r3, #8
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	4b63      	ldr	r3, [pc, #396]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	4960      	ldr	r1, [pc, #384]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004842:	4b5f      	ldr	r3, [pc, #380]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	495b      	ldr	r1, [pc, #364]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004852:	4313      	orrs	r3, r2
 8004854:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fd15 	bl	8005290 <RCC_SetFlashLatencyFromMSIRange>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e343      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004870:	f000 fc4a 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b52      	ldr	r3, [pc, #328]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	091b      	lsrs	r3, r3, #4
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	4950      	ldr	r1, [pc, #320]	@ (80049c4 <HAL_RCC_OscConfig+0x274>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	4a4e      	ldr	r2, [pc, #312]	@ (80049c8 <HAL_RCC_OscConfig+0x278>)
 800488e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004890:	4b4e      	ldr	r3, [pc, #312]	@ (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f7fd fab3 	bl	8001e00 <HAL_InitTick>
 800489a:	4603      	mov	r3, r0
 800489c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d052      	beq.n	800494a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	e327      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d032      	beq.n	8004916 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048b0:	4b43      	ldr	r3, [pc, #268]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a42      	ldr	r2, [pc, #264]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048bc:	f7fd faf0 	bl	8001ea0 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048c4:	f7fd faec 	bl	8001ea0 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e310      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048d6:	4b3a      	ldr	r3, [pc, #232]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048e2:	4b37      	ldr	r3, [pc, #220]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a36      	ldr	r2, [pc, #216]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80048e8:	f043 0308 	orr.w	r3, r3, #8
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b34      	ldr	r3, [pc, #208]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	4931      	ldr	r1, [pc, #196]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004900:	4b2f      	ldr	r3, [pc, #188]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	492c      	ldr	r1, [pc, #176]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
 8004914:	e01a      	b.n	800494c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004916:	4b2a      	ldr	r3, [pc, #168]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a29      	ldr	r2, [pc, #164]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004922:	f7fd fabd 	bl	8001ea0 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800492a:	f7fd fab9 	bl	8001ea0 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e2dd      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800493c:	4b20      	ldr	r3, [pc, #128]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f0      	bne.n	800492a <HAL_RCC_OscConfig+0x1da>
 8004948:	e000      	b.n	800494c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800494a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d074      	beq.n	8004a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b08      	cmp	r3, #8
 800495c:	d005      	beq.n	800496a <HAL_RCC_OscConfig+0x21a>
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b0c      	cmp	r3, #12
 8004962:	d10e      	bne.n	8004982 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d10b      	bne.n	8004982 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d064      	beq.n	8004a40 <HAL_RCC_OscConfig+0x2f0>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d160      	bne.n	8004a40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e2ba      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800498a:	d106      	bne.n	800499a <HAL_RCC_OscConfig+0x24a>
 800498c:	4b0c      	ldr	r3, [pc, #48]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0b      	ldr	r2, [pc, #44]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	e026      	b.n	80049e8 <HAL_RCC_OscConfig+0x298>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049a2:	d115      	bne.n	80049d0 <HAL_RCC_OscConfig+0x280>
 80049a4:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a05      	ldr	r2, [pc, #20]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80049aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b03      	ldr	r3, [pc, #12]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a02      	ldr	r2, [pc, #8]	@ (80049c0 <HAL_RCC_OscConfig+0x270>)
 80049b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e014      	b.n	80049e8 <HAL_RCC_OscConfig+0x298>
 80049be:	bf00      	nop
 80049c0:	40021000 	.word	0x40021000
 80049c4:	0800c278 	.word	0x0800c278
 80049c8:	20000080 	.word	0x20000080
 80049cc:	20000084 	.word	0x20000084
 80049d0:	4ba0      	ldr	r3, [pc, #640]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a9f      	ldr	r2, [pc, #636]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 80049d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b9d      	ldr	r3, [pc, #628]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a9c      	ldr	r2, [pc, #624]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 80049e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d013      	beq.n	8004a18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fd fa56 	bl	8001ea0 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fd fa52 	bl	8001ea0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	@ 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e276      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0a:	4b92      	ldr	r3, [pc, #584]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0x2a8>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fd fa42 	bl	8001ea0 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a20:	f7fd fa3e 	bl	8001ea0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b64      	cmp	r3, #100	@ 0x64
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e262      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a32:	4b88      	ldr	r3, [pc, #544]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x2d0>
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d060      	beq.n	8004b10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_OscConfig+0x310>
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d119      	bne.n	8004a8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d116      	bne.n	8004a8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a60:	4b7c      	ldr	r3, [pc, #496]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_OscConfig+0x328>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e23f      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a78:	4b76      	ldr	r3, [pc, #472]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	4973      	ldr	r1, [pc, #460]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a8c:	e040      	b.n	8004b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d023      	beq.n	8004ade <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a96:	4b6f      	ldr	r3, [pc, #444]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a6e      	ldr	r2, [pc, #440]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fd f9fd 	bl	8001ea0 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aaa:	f7fd f9f9 	bl	8001ea0 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e21d      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004abc:	4b65      	ldr	r3, [pc, #404]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac8:	4b62      	ldr	r3, [pc, #392]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	061b      	lsls	r3, r3, #24
 8004ad6:	495f      	ldr	r1, [pc, #380]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	604b      	str	r3, [r1, #4]
 8004adc:	e018      	b.n	8004b10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ade:	4b5d      	ldr	r3, [pc, #372]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a5c      	ldr	r2, [pc, #368]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7fd f9d9 	bl	8001ea0 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af2:	f7fd f9d5 	bl	8001ea0 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e1f9      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b04:	4b53      	ldr	r3, [pc, #332]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f0      	bne.n	8004af2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d03c      	beq.n	8004b96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01c      	beq.n	8004b5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b24:	4b4b      	ldr	r3, [pc, #300]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fd f9b4 	bl	8001ea0 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fd f9b0 	bl	8001ea0 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e1d4      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b4e:	4b41      	ldr	r3, [pc, #260]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0ef      	beq.n	8004b3c <HAL_RCC_OscConfig+0x3ec>
 8004b5c:	e01b      	b.n	8004b96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b64:	4a3b      	ldr	r2, [pc, #236]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fd f997 	bl	8001ea0 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b76:	f7fd f993 	bl	8001ea0 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e1b7      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b88:	4b32      	ldr	r3, [pc, #200]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1ef      	bne.n	8004b76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80a6 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10d      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb4:	4b27      	ldr	r3, [pc, #156]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb8:	4a26      	ldr	r2, [pc, #152]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bc0:	4b24      	ldr	r3, [pc, #144]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bd0:	4b21      	ldr	r3, [pc, #132]	@ (8004c58 <HAL_RCC_OscConfig+0x508>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d118      	bne.n	8004c0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8004c58 <HAL_RCC_OscConfig+0x508>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c58 <HAL_RCC_OscConfig+0x508>)
 8004be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be8:	f7fd f95a 	bl	8001ea0 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7fd f956 	bl	8001ea0 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e17a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c02:	4b15      	ldr	r3, [pc, #84]	@ (8004c58 <HAL_RCC_OscConfig+0x508>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d108      	bne.n	8004c28 <HAL_RCC_OscConfig+0x4d8>
 8004c16:	4b0f      	ldr	r3, [pc, #60]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c26:	e029      	b.n	8004c7c <HAL_RCC_OscConfig+0x52c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b05      	cmp	r3, #5
 8004c2e:	d115      	bne.n	8004c5c <HAL_RCC_OscConfig+0x50c>
 8004c30:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c36:	4a07      	ldr	r2, [pc, #28]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c40:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c46:	4a03      	ldr	r2, [pc, #12]	@ (8004c54 <HAL_RCC_OscConfig+0x504>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c50:	e014      	b.n	8004c7c <HAL_RCC_OscConfig+0x52c>
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40007000 	.word	0x40007000
 8004c5c:	4b9c      	ldr	r3, [pc, #624]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	4a9b      	ldr	r2, [pc, #620]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c6c:	4b98      	ldr	r3, [pc, #608]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c72:	4a97      	ldr	r2, [pc, #604]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004c74:	f023 0304 	bic.w	r3, r3, #4
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d016      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c84:	f7fd f90c 	bl	8001ea0 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8c:	f7fd f908 	bl	8001ea0 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e12a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca2:	4b8b      	ldr	r3, [pc, #556]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ed      	beq.n	8004c8c <HAL_RCC_OscConfig+0x53c>
 8004cb0:	e015      	b.n	8004cde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb2:	f7fd f8f5 	bl	8001ea0 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cb8:	e00a      	b.n	8004cd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cba:	f7fd f8f1 	bl	8001ea0 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e113      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd0:	4b7f      	ldr	r3, [pc, #508]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1ed      	bne.n	8004cba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cde:	7ffb      	ldrb	r3, [r7, #31]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d105      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce4:	4b7a      	ldr	r3, [pc, #488]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce8:	4a79      	ldr	r2, [pc, #484]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004cea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80fe 	beq.w	8004ef6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	f040 80d0 	bne.w	8004ea4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d04:	4b72      	ldr	r3, [pc, #456]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f003 0203 	and.w	r2, r3, #3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d130      	bne.n	8004d7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	3b01      	subs	r3, #1
 8004d24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d127      	bne.n	8004d7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d11f      	bne.n	8004d7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d44:	2a07      	cmp	r2, #7
 8004d46:	bf14      	ite	ne
 8004d48:	2201      	movne	r2, #1
 8004d4a:	2200      	moveq	r2, #0
 8004d4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d113      	bne.n	8004d7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5c:	085b      	lsrs	r3, r3, #1
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d109      	bne.n	8004d7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	085b      	lsrs	r3, r3, #1
 8004d72:	3b01      	subs	r3, #1
 8004d74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d06e      	beq.n	8004e58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d069      	beq.n	8004e54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d80:	4b53      	ldr	r3, [pc, #332]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d8c:	4b50      	ldr	r3, [pc, #320]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0ad      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d9c:	4b4c      	ldr	r3, [pc, #304]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a4b      	ldr	r2, [pc, #300]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004da8:	f7fd f87a 	bl	8001ea0 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db0:	f7fd f876 	bl	8001ea0 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e09a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc2:	4b43      	ldr	r3, [pc, #268]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dce:	4b40      	ldr	r3, [pc, #256]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	4b40      	ldr	r3, [pc, #256]	@ (8004ed4 <HAL_RCC_OscConfig+0x784>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004dde:	3a01      	subs	r2, #1
 8004de0:	0112      	lsls	r2, r2, #4
 8004de2:	4311      	orrs	r1, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004de8:	0212      	lsls	r2, r2, #8
 8004dea:	4311      	orrs	r1, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004df0:	0852      	lsrs	r2, r2, #1
 8004df2:	3a01      	subs	r2, #1
 8004df4:	0552      	lsls	r2, r2, #21
 8004df6:	4311      	orrs	r1, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004dfc:	0852      	lsrs	r2, r2, #1
 8004dfe:	3a01      	subs	r2, #1
 8004e00:	0652      	lsls	r2, r2, #25
 8004e02:	4311      	orrs	r1, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e08:	0912      	lsrs	r2, r2, #4
 8004e0a:	0452      	lsls	r2, r2, #17
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	4930      	ldr	r1, [pc, #192]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e14:	4b2e      	ldr	r3, [pc, #184]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2d      	ldr	r2, [pc, #180]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e20:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e2c:	f7fd f838 	bl	8001ea0 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fd f834 	bl	8001ea0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e058      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e46:	4b22      	ldr	r3, [pc, #136]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e52:	e050      	b.n	8004ef6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e04f      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d148      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e64:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a19      	ldr	r2, [pc, #100]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e70:	4b17      	ldr	r3, [pc, #92]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4a16      	ldr	r2, [pc, #88]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e7c:	f7fd f810 	bl	8001ea0 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fd f80c 	bl	8001ea0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e030      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e96:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0x734>
 8004ea2:	e028      	b.n	8004ef6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d023      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a08      	ldr	r2, [pc, #32]	@ (8004ed0 <HAL_RCC_OscConfig+0x780>)
 8004eb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fc fff3 	bl	8001ea0 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ebc:	e00c      	b.n	8004ed8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebe:	f7fc ffef 	bl	8001ea0 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d905      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e013      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed8:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <HAL_RCC_OscConfig+0x7b0>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ec      	bne.n	8004ebe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ee4:	4b06      	ldr	r3, [pc, #24]	@ (8004f00 <HAL_RCC_OscConfig+0x7b0>)
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	4905      	ldr	r1, [pc, #20]	@ (8004f00 <HAL_RCC_OscConfig+0x7b0>)
 8004eea:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <HAL_RCC_OscConfig+0x7b4>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	60cb      	str	r3, [r1, #12]
 8004ef0:	e001      	b.n	8004ef6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	feeefffc 	.word	0xfeeefffc

08004f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0e7      	b.n	80050ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f1c:	4b75      	ldr	r3, [pc, #468]	@ (80050f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d910      	bls.n	8004f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2a:	4b72      	ldr	r3, [pc, #456]	@ (80050f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f023 0207 	bic.w	r2, r3, #7
 8004f32:	4970      	ldr	r1, [pc, #448]	@ (80050f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3a:	4b6e      	ldr	r3, [pc, #440]	@ (80050f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0cf      	b.n	80050ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d010      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	4b66      	ldr	r3, [pc, #408]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d908      	bls.n	8004f7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f68:	4b63      	ldr	r3, [pc, #396]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4960      	ldr	r1, [pc, #384]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d04c      	beq.n	8005020 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8e:	4b5a      	ldr	r3, [pc, #360]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d121      	bne.n	8004fde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e0a6      	b.n	80050ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d107      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fa6:	4b54      	ldr	r3, [pc, #336]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d115      	bne.n	8004fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e09a      	b.n	80050ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fbe:	4b4e      	ldr	r3, [pc, #312]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e08e      	b.n	80050ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fce:	4b4a      	ldr	r3, [pc, #296]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e086      	b.n	80050ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b46      	ldr	r3, [pc, #280]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4943      	ldr	r1, [pc, #268]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff0:	f7fc ff56 	bl	8001ea0 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fc ff52 	bl	8001ea0 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e06e      	b.n	80050ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b3a      	ldr	r3, [pc, #232]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d010      	beq.n	800504e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	4b31      	ldr	r3, [pc, #196]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005038:	429a      	cmp	r2, r3
 800503a:	d208      	bcs.n	800504e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503c:	4b2e      	ldr	r3, [pc, #184]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	492b      	ldr	r1, [pc, #172]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 800504a:	4313      	orrs	r3, r2
 800504c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800504e:	4b29      	ldr	r3, [pc, #164]	@ (80050f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d210      	bcs.n	800507e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505c:	4b25      	ldr	r3, [pc, #148]	@ (80050f4 <HAL_RCC_ClockConfig+0x1ec>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f023 0207 	bic.w	r2, r3, #7
 8005064:	4923      	ldr	r1, [pc, #140]	@ (80050f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	4313      	orrs	r3, r2
 800506a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506c:	4b21      	ldr	r3, [pc, #132]	@ (80050f4 <HAL_RCC_ClockConfig+0x1ec>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d001      	beq.n	800507e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e036      	b.n	80050ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508a:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	4918      	ldr	r1, [pc, #96]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d009      	beq.n	80050bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a8:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4910      	ldr	r1, [pc, #64]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050bc:	f000 f824 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <HAL_RCC_ClockConfig+0x1f0>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	490b      	ldr	r1, [pc, #44]	@ (80050fc <HAL_RCC_ClockConfig+0x1f4>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	4a09      	ldr	r2, [pc, #36]	@ (8005100 <HAL_RCC_ClockConfig+0x1f8>)
 80050da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050dc:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <HAL_RCC_ClockConfig+0x1fc>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fc fe8d 	bl	8001e00 <HAL_InitTick>
 80050e6:	4603      	mov	r3, r0
 80050e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80050ea:	7afb      	ldrb	r3, [r7, #11]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40022000 	.word	0x40022000
 80050f8:	40021000 	.word	0x40021000
 80050fc:	0800c278 	.word	0x0800c278
 8005100:	20000080 	.word	0x20000080
 8005104:	20000084 	.word	0x20000084

08005108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005108:	b480      	push	{r7}
 800510a:	b089      	sub	sp, #36	@ 0x24
 800510c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	2300      	movs	r3, #0
 8005114:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005116:	4b3e      	ldr	r3, [pc, #248]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x108>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005120:	4b3b      	ldr	r3, [pc, #236]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x108>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x34>
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b0c      	cmp	r3, #12
 8005134:	d121      	bne.n	800517a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d11e      	bne.n	800517a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800513c:	4b34      	ldr	r3, [pc, #208]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x108>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d107      	bne.n	8005158 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005148:	4b31      	ldr	r3, [pc, #196]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x108>)
 800514a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e005      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005158:	4b2d      	ldr	r3, [pc, #180]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x108>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005164:	4a2b      	ldr	r2, [pc, #172]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10d      	bne.n	8005190 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005178:	e00a      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b04      	cmp	r3, #4
 800517e:	d102      	bne.n	8005186 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005180:	4b25      	ldr	r3, [pc, #148]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x110>)
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	e004      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d101      	bne.n	8005190 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800518c:	4b23      	ldr	r3, [pc, #140]	@ (800521c <HAL_RCC_GetSysClockFreq+0x114>)
 800518e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2b0c      	cmp	r3, #12
 8005194:	d134      	bne.n	8005200 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005196:	4b1e      	ldr	r3, [pc, #120]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x108>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d003      	beq.n	80051ae <HAL_RCC_GetSysClockFreq+0xa6>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d003      	beq.n	80051b4 <HAL_RCC_GetSysClockFreq+0xac>
 80051ac:	e005      	b.n	80051ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x110>)
 80051b0:	617b      	str	r3, [r7, #20]
      break;
 80051b2:	e005      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051b4:	4b19      	ldr	r3, [pc, #100]	@ (800521c <HAL_RCC_GetSysClockFreq+0x114>)
 80051b6:	617b      	str	r3, [r7, #20]
      break;
 80051b8:	e002      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	617b      	str	r3, [r7, #20]
      break;
 80051be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051c0:	4b13      	ldr	r3, [pc, #76]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	3301      	adds	r3, #1
 80051cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051ce:	4b10      	ldr	r3, [pc, #64]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	fb03 f202 	mul.w	r2, r3, r2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	0e5b      	lsrs	r3, r3, #25
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	3301      	adds	r3, #1
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005200:	69bb      	ldr	r3, [r7, #24]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3724      	adds	r7, #36	@ 0x24
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000
 8005214:	0800c290 	.word	0x0800c290
 8005218:	00f42400 	.word	0x00f42400
 800521c:	007a1200 	.word	0x007a1200

08005220 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005224:	4b03      	ldr	r3, [pc, #12]	@ (8005234 <HAL_RCC_GetHCLKFreq+0x14>)
 8005226:	681b      	ldr	r3, [r3, #0]
}
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000080 	.word	0x20000080

08005238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800523c:	f7ff fff0 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b06      	ldr	r3, [pc, #24]	@ (800525c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	0a1b      	lsrs	r3, r3, #8
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	4904      	ldr	r1, [pc, #16]	@ (8005260 <HAL_RCC_GetPCLK1Freq+0x28>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005258:	4618      	mov	r0, r3
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40021000 	.word	0x40021000
 8005260:	0800c288 	.word	0x0800c288

08005264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005268:	f7ff ffda 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 800526c:	4602      	mov	r2, r0
 800526e:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	0adb      	lsrs	r3, r3, #11
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	4904      	ldr	r1, [pc, #16]	@ (800528c <HAL_RCC_GetPCLK2Freq+0x28>)
 800527a:	5ccb      	ldrb	r3, [r1, r3]
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40021000 	.word	0x40021000
 800528c:	0800c288 	.word	0x0800c288

08005290 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800529c:	4b2a      	ldr	r3, [pc, #168]	@ (8005348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800529e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052a8:	f7ff f9ee 	bl	8004688 <HAL_PWREx_GetVoltageRange>
 80052ac:	6178      	str	r0, [r7, #20]
 80052ae:	e014      	b.n	80052da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052b0:	4b25      	ldr	r3, [pc, #148]	@ (8005348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b4:	4a24      	ldr	r2, [pc, #144]	@ (8005348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80052bc:	4b22      	ldr	r3, [pc, #136]	@ (8005348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052c8:	f7ff f9de 	bl	8004688 <HAL_PWREx_GetVoltageRange>
 80052cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e0:	d10b      	bne.n	80052fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b80      	cmp	r3, #128	@ 0x80
 80052e6:	d919      	bls.n	800531c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80052ec:	d902      	bls.n	80052f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052ee:	2302      	movs	r3, #2
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e013      	b.n	800531c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052f4:	2301      	movs	r3, #1
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	e010      	b.n	800531c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b80      	cmp	r3, #128	@ 0x80
 80052fe:	d902      	bls.n	8005306 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005300:	2303      	movs	r3, #3
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	e00a      	b.n	800531c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b80      	cmp	r3, #128	@ 0x80
 800530a:	d102      	bne.n	8005312 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800530c:	2302      	movs	r3, #2
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	e004      	b.n	800531c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b70      	cmp	r3, #112	@ 0x70
 8005316:	d101      	bne.n	800531c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005318:	2301      	movs	r3, #1
 800531a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800531c:	4b0b      	ldr	r3, [pc, #44]	@ (800534c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 0207 	bic.w	r2, r3, #7
 8005324:	4909      	ldr	r1, [pc, #36]	@ (800534c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800532c:	4b07      	ldr	r3, [pc, #28]	@ (800534c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	429a      	cmp	r2, r3
 8005338:	d001      	beq.n	800533e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40021000 	.word	0x40021000
 800534c:	40022000 	.word	0x40022000

08005350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005358:	2300      	movs	r3, #0
 800535a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800535c:	2300      	movs	r3, #0
 800535e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005368:	2b00      	cmp	r3, #0
 800536a:	d041      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005370:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005374:	d02a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005376:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800537a:	d824      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800537c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005380:	d008      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005382:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005386:	d81e      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800538c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005390:	d010      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005392:	e018      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005394:	4b86      	ldr	r3, [pc, #536]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a85      	ldr	r2, [pc, #532]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800539e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053a0:	e015      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3304      	adds	r3, #4
 80053a6:	2100      	movs	r1, #0
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fabb 	bl	8005924 <RCCEx_PLLSAI1_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053b2:	e00c      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3320      	adds	r3, #32
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fba6 	bl	8005b0c <RCCEx_PLLSAI2_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053c4:	e003      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	74fb      	strb	r3, [r7, #19]
      break;
 80053ca:	e000      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80053cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ce:	7cfb      	ldrb	r3, [r7, #19]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053d4:	4b76      	ldr	r3, [pc, #472]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053e2:	4973      	ldr	r1, [pc, #460]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80053ea:	e001      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d041      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005400:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005404:	d02a      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005406:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800540a:	d824      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800540c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005410:	d008      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005412:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005416:	d81e      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800541c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005420:	d010      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005422:	e018      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005424:	4b62      	ldr	r3, [pc, #392]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	4a61      	ldr	r2, [pc, #388]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800542a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800542e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005430:	e015      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fa73 	bl	8005924 <RCCEx_PLLSAI1_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005442:	e00c      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3320      	adds	r3, #32
 8005448:	2100      	movs	r1, #0
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fb5e 	bl	8005b0c <RCCEx_PLLSAI2_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005454:	e003      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	74fb      	strb	r3, [r7, #19]
      break;
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800545c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545e:	7cfb      	ldrb	r3, [r7, #19]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10b      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005464:	4b52      	ldr	r3, [pc, #328]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005472:	494f      	ldr	r1, [pc, #316]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800547a:	e001      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547c:	7cfb      	ldrb	r3, [r7, #19]
 800547e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 80a0 	beq.w	80055ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800548e:	2300      	movs	r3, #0
 8005490:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005492:	4b47      	ldr	r3, [pc, #284]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80054a2:	2300      	movs	r3, #0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00d      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a8:	4b41      	ldr	r3, [pc, #260]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ac:	4a40      	ldr	r2, [pc, #256]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054b4:	4b3e      	ldr	r3, [pc, #248]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054c0:	2301      	movs	r3, #1
 80054c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054c4:	4b3b      	ldr	r3, [pc, #236]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a3a      	ldr	r2, [pc, #232]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054d0:	f7fc fce6 	bl	8001ea0 <HAL_GetTick>
 80054d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054d6:	e009      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d8:	f7fc fce2 	bl	8001ea0 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d902      	bls.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	74fb      	strb	r3, [r7, #19]
        break;
 80054ea:	e005      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054ec:	4b31      	ldr	r3, [pc, #196]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0ef      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d15c      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054fe:	4b2c      	ldr	r3, [pc, #176]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005504:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005508:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01f      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	429a      	cmp	r2, r3
 800551a:	d019      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800551c:	4b24      	ldr	r3, [pc, #144]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005526:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005528:	4b21      	ldr	r3, [pc, #132]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552e:	4a20      	ldr	r2, [pc, #128]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005538:	4b1d      	ldr	r3, [pc, #116]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800553a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553e:	4a1c      	ldr	r2, [pc, #112]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005548:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d016      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fc fca1 	bl	8001ea0 <HAL_GetTick>
 800555e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005560:	e00b      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fc fc9d 	bl	8001ea0 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d902      	bls.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	74fb      	strb	r3, [r7, #19]
            break;
 8005578:	e006      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800557a:	4b0d      	ldr	r3, [pc, #52]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0ec      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10c      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800558e:	4b08      	ldr	r3, [pc, #32]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005594:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800559e:	4904      	ldr	r1, [pc, #16]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80055a6:	e009      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055a8:	7cfb      	ldrb	r3, [r7, #19]
 80055aa:	74bb      	strb	r3, [r7, #18]
 80055ac:	e006      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80055ae:	bf00      	nop
 80055b0:	40021000 	.word	0x40021000
 80055b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055bc:	7c7b      	ldrb	r3, [r7, #17]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d105      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c2:	4b9e      	ldr	r3, [pc, #632]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c6:	4a9d      	ldr	r2, [pc, #628]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055da:	4b98      	ldr	r3, [pc, #608]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e0:	f023 0203 	bic.w	r2, r3, #3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e8:	4994      	ldr	r1, [pc, #592]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055fc:	4b8f      	ldr	r3, [pc, #572]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005602:	f023 020c 	bic.w	r2, r3, #12
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560a:	498c      	ldr	r1, [pc, #560]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800561e:	4b87      	ldr	r3, [pc, #540]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005624:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562c:	4983      	ldr	r1, [pc, #524]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005640:	4b7e      	ldr	r3, [pc, #504]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005646:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564e:	497b      	ldr	r1, [pc, #492]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005662:	4b76      	ldr	r3, [pc, #472]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005668:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005670:	4972      	ldr	r1, [pc, #456]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005684:	4b6d      	ldr	r3, [pc, #436]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005692:	496a      	ldr	r1, [pc, #424]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056a6:	4b65      	ldr	r3, [pc, #404]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b4:	4961      	ldr	r1, [pc, #388]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056c8:	4b5c      	ldr	r3, [pc, #368]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d6:	4959      	ldr	r1, [pc, #356]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056ea:	4b54      	ldr	r3, [pc, #336]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f8:	4950      	ldr	r1, [pc, #320]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800570c:	4b4b      	ldr	r3, [pc, #300]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005712:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571a:	4948      	ldr	r1, [pc, #288]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800572e:	4b43      	ldr	r3, [pc, #268]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005734:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800573c:	493f      	ldr	r1, [pc, #252]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d028      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005750:	4b3a      	ldr	r3, [pc, #232]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800575e:	4937      	ldr	r1, [pc, #220]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800576a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800576e:	d106      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005770:	4b32      	ldr	r3, [pc, #200]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a31      	ldr	r2, [pc, #196]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800577a:	60d3      	str	r3, [r2, #12]
 800577c:	e011      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005782:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005786:	d10c      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	2101      	movs	r1, #1
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f8c8 	bl	8005924 <RCCEx_PLLSAI1_Config>
 8005794:	4603      	mov	r3, r0
 8005796:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800579e:	7cfb      	ldrb	r3, [r7, #19]
 80057a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d028      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057ae:	4b23      	ldr	r3, [pc, #140]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057bc:	491f      	ldr	r1, [pc, #124]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057cc:	d106      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ce:	4b1b      	ldr	r3, [pc, #108]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	4a1a      	ldr	r2, [pc, #104]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057d8:	60d3      	str	r3, [r2, #12]
 80057da:	e011      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057e4:	d10c      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	2101      	movs	r1, #1
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 f899 	bl	8005924 <RCCEx_PLLSAI1_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057f6:	7cfb      	ldrb	r3, [r7, #19]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d02b      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800580c:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005812:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581a:	4908      	ldr	r1, [pc, #32]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800582a:	d109      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800582c:	4b03      	ldr	r3, [pc, #12]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a02      	ldr	r2, [pc, #8]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005836:	60d3      	str	r3, [r2, #12]
 8005838:	e014      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005844:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005848:	d10c      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3304      	adds	r3, #4
 800584e:	2101      	movs	r1, #1
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f867 	bl	8005924 <RCCEx_PLLSAI1_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800585a:	7cfb      	ldrb	r3, [r7, #19]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005860:	7cfb      	ldrb	r3, [r7, #19]
 8005862:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d02f      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005870:	4b2b      	ldr	r3, [pc, #172]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005876:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800587e:	4928      	ldr	r1, [pc, #160]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800588a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800588e:	d10d      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3304      	adds	r3, #4
 8005894:	2102      	movs	r1, #2
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f844 	bl	8005924 <RCCEx_PLLSAI1_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058a0:	7cfb      	ldrb	r3, [r7, #19]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d014      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80058a6:	7cfb      	ldrb	r3, [r7, #19]
 80058a8:	74bb      	strb	r3, [r7, #18]
 80058aa:	e011      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3320      	adds	r3, #32
 80058ba:	2102      	movs	r1, #2
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 f925 	bl	8005b0c <RCCEx_PLLSAI2_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058c6:	7cfb      	ldrb	r3, [r7, #19]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058dc:	4b10      	ldr	r3, [pc, #64]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058ea:	490d      	ldr	r1, [pc, #52]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058fe:	4b08      	ldr	r3, [pc, #32]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005904:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800590e:	4904      	ldr	r1, [pc, #16]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005916:	7cbb      	ldrb	r3, [r7, #18]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40021000 	.word	0x40021000

08005924 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005932:	4b75      	ldr	r3, [pc, #468]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d018      	beq.n	8005970 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800593e:	4b72      	ldr	r3, [pc, #456]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0203 	and.w	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d10d      	bne.n	800596a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
       ||
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005956:	4b6c      	ldr	r3, [pc, #432]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
       ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d047      	beq.n	80059fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
 800596e:	e044      	b.n	80059fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b03      	cmp	r3, #3
 8005976:	d018      	beq.n	80059aa <RCCEx_PLLSAI1_Config+0x86>
 8005978:	2b03      	cmp	r3, #3
 800597a:	d825      	bhi.n	80059c8 <RCCEx_PLLSAI1_Config+0xa4>
 800597c:	2b01      	cmp	r3, #1
 800597e:	d002      	beq.n	8005986 <RCCEx_PLLSAI1_Config+0x62>
 8005980:	2b02      	cmp	r3, #2
 8005982:	d009      	beq.n	8005998 <RCCEx_PLLSAI1_Config+0x74>
 8005984:	e020      	b.n	80059c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005986:	4b60      	ldr	r3, [pc, #384]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d11d      	bne.n	80059ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005996:	e01a      	b.n	80059ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005998:	4b5b      	ldr	r3, [pc, #364]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d116      	bne.n	80059d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a8:	e013      	b.n	80059d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059aa:	4b57      	ldr	r3, [pc, #348]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059b6:	4b54      	ldr	r3, [pc, #336]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059c6:	e006      	b.n	80059d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
      break;
 80059cc:	e004      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059ce:	bf00      	nop
 80059d0:	e002      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10d      	bne.n	80059fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059de:	4b4a      	ldr	r3, [pc, #296]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6819      	ldr	r1, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	430b      	orrs	r3, r1
 80059f4:	4944      	ldr	r1, [pc, #272]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d17d      	bne.n	8005afc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a00:	4b41      	ldr	r3, [pc, #260]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a40      	ldr	r2, [pc, #256]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a0c:	f7fc fa48 	bl	8001ea0 <HAL_GetTick>
 8005a10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a12:	e009      	b.n	8005a28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a14:	f7fc fa44 	bl	8001ea0 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d902      	bls.n	8005a28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	73fb      	strb	r3, [r7, #15]
        break;
 8005a26:	e005      	b.n	8005a34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a28:	4b37      	ldr	r3, [pc, #220]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1ef      	bne.n	8005a14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d160      	bne.n	8005afc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d111      	bne.n	8005a64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a40:	4b31      	ldr	r3, [pc, #196]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6892      	ldr	r2, [r2, #8]
 8005a50:	0211      	lsls	r1, r2, #8
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68d2      	ldr	r2, [r2, #12]
 8005a56:	0912      	lsrs	r2, r2, #4
 8005a58:	0452      	lsls	r2, r2, #17
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	492a      	ldr	r1, [pc, #168]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	610b      	str	r3, [r1, #16]
 8005a62:	e027      	b.n	8005ab4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d112      	bne.n	8005a90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a6a:	4b27      	ldr	r3, [pc, #156]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005a72:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6892      	ldr	r2, [r2, #8]
 8005a7a:	0211      	lsls	r1, r2, #8
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6912      	ldr	r2, [r2, #16]
 8005a80:	0852      	lsrs	r2, r2, #1
 8005a82:	3a01      	subs	r2, #1
 8005a84:	0552      	lsls	r2, r2, #21
 8005a86:	430a      	orrs	r2, r1
 8005a88:	491f      	ldr	r1, [pc, #124]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	610b      	str	r3, [r1, #16]
 8005a8e:	e011      	b.n	8005ab4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a90:	4b1d      	ldr	r3, [pc, #116]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6892      	ldr	r2, [r2, #8]
 8005aa0:	0211      	lsls	r1, r2, #8
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6952      	ldr	r2, [r2, #20]
 8005aa6:	0852      	lsrs	r2, r2, #1
 8005aa8:	3a01      	subs	r2, #1
 8005aaa:	0652      	lsls	r2, r2, #25
 8005aac:	430a      	orrs	r2, r1
 8005aae:	4916      	ldr	r1, [pc, #88]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ab4:	4b14      	ldr	r3, [pc, #80]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a13      	ldr	r2, [pc, #76]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005abe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac0:	f7fc f9ee 	bl	8001ea0 <HAL_GetTick>
 8005ac4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ac6:	e009      	b.n	8005adc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ac8:	f7fc f9ea 	bl	8001ea0 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d902      	bls.n	8005adc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	73fb      	strb	r3, [r7, #15]
          break;
 8005ada:	e005      	b.n	8005ae8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005adc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0ef      	beq.n	8005ac8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005aee:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	4904      	ldr	r1, [pc, #16]	@ (8005b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40021000 	.word	0x40021000

08005b0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d018      	beq.n	8005b58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b26:	4b67      	ldr	r3, [pc, #412]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f003 0203 	and.w	r2, r3, #3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d10d      	bne.n	8005b52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
       ||
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b3e:	4b61      	ldr	r3, [pc, #388]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
       ||
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d047      	beq.n	8005be2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	73fb      	strb	r3, [r7, #15]
 8005b56:	e044      	b.n	8005be2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d018      	beq.n	8005b92 <RCCEx_PLLSAI2_Config+0x86>
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d825      	bhi.n	8005bb0 <RCCEx_PLLSAI2_Config+0xa4>
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d002      	beq.n	8005b6e <RCCEx_PLLSAI2_Config+0x62>
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d009      	beq.n	8005b80 <RCCEx_PLLSAI2_Config+0x74>
 8005b6c:	e020      	b.n	8005bb0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b6e:	4b55      	ldr	r3, [pc, #340]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d11d      	bne.n	8005bb6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b7e:	e01a      	b.n	8005bb6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b80:	4b50      	ldr	r3, [pc, #320]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d116      	bne.n	8005bba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b90:	e013      	b.n	8005bba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b92:	4b4c      	ldr	r3, [pc, #304]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10f      	bne.n	8005bbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b9e:	4b49      	ldr	r3, [pc, #292]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bae:	e006      	b.n	8005bbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb4:	e004      	b.n	8005bc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bb6:	bf00      	nop
 8005bb8:	e002      	b.n	8005bc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bba:	bf00      	nop
 8005bbc:	e000      	b.n	8005bc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10d      	bne.n	8005be2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6819      	ldr	r1, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	4939      	ldr	r1, [pc, #228]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d167      	bne.n	8005cb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005be8:	4b36      	ldr	r3, [pc, #216]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a35      	ldr	r2, [pc, #212]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf4:	f7fc f954 	bl	8001ea0 <HAL_GetTick>
 8005bf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bfa:	e009      	b.n	8005c10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bfc:	f7fc f950 	bl	8001ea0 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d902      	bls.n	8005c10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	73fb      	strb	r3, [r7, #15]
        break;
 8005c0e:	e005      	b.n	8005c1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c10:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1ef      	bne.n	8005bfc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d14a      	bne.n	8005cb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d111      	bne.n	8005c4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c28:	4b26      	ldr	r3, [pc, #152]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6892      	ldr	r2, [r2, #8]
 8005c38:	0211      	lsls	r1, r2, #8
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	68d2      	ldr	r2, [r2, #12]
 8005c3e:	0912      	lsrs	r2, r2, #4
 8005c40:	0452      	lsls	r2, r2, #17
 8005c42:	430a      	orrs	r2, r1
 8005c44:	491f      	ldr	r1, [pc, #124]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	614b      	str	r3, [r1, #20]
 8005c4a:	e011      	b.n	8005c70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6892      	ldr	r2, [r2, #8]
 8005c5c:	0211      	lsls	r1, r2, #8
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6912      	ldr	r2, [r2, #16]
 8005c62:	0852      	lsrs	r2, r2, #1
 8005c64:	3a01      	subs	r2, #1
 8005c66:	0652      	lsls	r2, r2, #25
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	4916      	ldr	r1, [pc, #88]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c70:	4b14      	ldr	r3, [pc, #80]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a13      	ldr	r2, [pc, #76]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7c:	f7fc f910 	bl	8001ea0 <HAL_GetTick>
 8005c80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c82:	e009      	b.n	8005c98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c84:	f7fc f90c 	bl	8001ea0 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d902      	bls.n	8005c98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	73fb      	strb	r3, [r7, #15]
          break;
 8005c96:	e005      	b.n	8005ca4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c98:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0ef      	beq.n	8005c84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005caa:	4b06      	ldr	r3, [pc, #24]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	4904      	ldr	r1, [pc, #16]	@ (8005cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40021000 	.word	0x40021000

08005cc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e095      	b.n	8005e06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d108      	bne.n	8005cf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cea:	d009      	beq.n	8005d00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	61da      	str	r2, [r3, #28]
 8005cf2:	e005      	b.n	8005d00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fb feb4 	bl	8001a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d40:	d902      	bls.n	8005d48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e002      	b.n	8005d4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d56:	d007      	beq.n	8005d68 <HAL_SPI_Init+0xa0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d60:	d002      	beq.n	8005d68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005daa:	ea42 0103 	orr.w	r1, r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	f003 0204 	and.w	r2, r3, #4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005de4:	ea42 0103 	orr.w	r1, r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b088      	sub	sp, #32
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	603b      	str	r3, [r7, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e1e:	f7fc f83f 	bl	8001ea0 <HAL_GetTick>
 8005e22:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d001      	beq.n	8005e38 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005e34:	2302      	movs	r3, #2
 8005e36:	e15c      	b.n	80060f2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_SPI_Transmit+0x36>
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e154      	b.n	80060f2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_SPI_Transmit+0x48>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e14d      	b.n	80060f2 <HAL_SPI_Transmit+0x2e4>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2203      	movs	r2, #3
 8005e62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	88fa      	ldrh	r2, [r7, #6]
 8005e76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ea8:	d10f      	bne.n	8005eca <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ec8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed4:	2b40      	cmp	r3, #64	@ 0x40
 8005ed6:	d007      	beq.n	8005ee8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ee6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ef0:	d952      	bls.n	8005f98 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_SPI_Transmit+0xf2>
 8005efa:	8b7b      	ldrh	r3, [r7, #26]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d145      	bne.n	8005f8c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f24:	e032      	b.n	8005f8c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d112      	bne.n	8005f5a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	881a      	ldrh	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f44:	1c9a      	adds	r2, r3, #2
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f58:	e018      	b.n	8005f8c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f5a:	f7fb ffa1 	bl	8001ea0 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d803      	bhi.n	8005f72 <HAL_SPI_Transmit+0x164>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d102      	bne.n	8005f78 <HAL_SPI_Transmit+0x16a>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e0b2      	b.n	80060f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1c7      	bne.n	8005f26 <HAL_SPI_Transmit+0x118>
 8005f96:	e083      	b.n	80060a0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_SPI_Transmit+0x198>
 8005fa0:	8b7b      	ldrh	r3, [r7, #26]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d177      	bne.n	8006096 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d912      	bls.n	8005fd6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb4:	881a      	ldrh	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc0:	1c9a      	adds	r2, r3, #2
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b02      	subs	r3, #2
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fd4:	e05f      	b.n	8006096 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	7812      	ldrb	r2, [r2, #0]
 8005fe2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ffc:	e04b      	b.n	8006096 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b02      	cmp	r3, #2
 800600a:	d12b      	bne.n	8006064 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b01      	cmp	r3, #1
 8006014:	d912      	bls.n	800603c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601a:	881a      	ldrh	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006026:	1c9a      	adds	r2, r3, #2
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b02      	subs	r3, #2
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800603a:	e02c      	b.n	8006096 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	7812      	ldrb	r2, [r2, #0]
 8006048:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006062:	e018      	b.n	8006096 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006064:	f7fb ff1c 	bl	8001ea0 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d803      	bhi.n	800607c <HAL_SPI_Transmit+0x26e>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d102      	bne.n	8006082 <HAL_SPI_Transmit+0x274>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e02d      	b.n	80060f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1ae      	bne.n	8005ffe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fb65 	bl	8006774 <SPI_EndRxTxTransaction>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80060f0:	2300      	movs	r3, #0
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b08a      	sub	sp, #40	@ 0x28
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006108:	2301      	movs	r3, #1
 800610a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800610c:	f7fb fec8 	bl	8001ea0 <HAL_GetTick>
 8006110:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006118:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006120:	887b      	ldrh	r3, [r7, #2]
 8006122:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006124:	887b      	ldrh	r3, [r7, #2]
 8006126:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006128:	7ffb      	ldrb	r3, [r7, #31]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d00c      	beq.n	8006148 <HAL_SPI_TransmitReceive+0x4e>
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006134:	d106      	bne.n	8006144 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <HAL_SPI_TransmitReceive+0x4a>
 800613e:	7ffb      	ldrb	r3, [r7, #31]
 8006140:	2b04      	cmp	r3, #4
 8006142:	d001      	beq.n	8006148 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006144:	2302      	movs	r3, #2
 8006146:	e1f3      	b.n	8006530 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <HAL_SPI_TransmitReceive+0x60>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_SPI_TransmitReceive+0x60>
 8006154:	887b      	ldrh	r3, [r7, #2]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e1e8      	b.n	8006530 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_SPI_TransmitReceive+0x72>
 8006168:	2302      	movs	r3, #2
 800616a:	e1e1      	b.n	8006530 <HAL_SPI_TransmitReceive+0x436>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b04      	cmp	r3, #4
 800617e:	d003      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2205      	movs	r2, #5
 8006184:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	887a      	ldrh	r2, [r7, #2]
 8006198:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	887a      	ldrh	r2, [r7, #2]
 80061a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	887a      	ldrh	r2, [r7, #2]
 80061ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	887a      	ldrh	r2, [r7, #2]
 80061b4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061ca:	d802      	bhi.n	80061d2 <HAL_SPI_TransmitReceive+0xd8>
 80061cc:	8abb      	ldrh	r3, [r7, #20]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d908      	bls.n	80061e4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061e0:	605a      	str	r2, [r3, #4]
 80061e2:	e007      	b.n	80061f4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80061f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fe:	2b40      	cmp	r3, #64	@ 0x40
 8006200:	d007      	beq.n	8006212 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006210:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800621a:	f240 8083 	bls.w	8006324 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_SPI_TransmitReceive+0x132>
 8006226:	8afb      	ldrh	r3, [r7, #22]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d16f      	bne.n	800630c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006230:	881a      	ldrh	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623c:	1c9a      	adds	r2, r3, #2
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006250:	e05c      	b.n	800630c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b02      	cmp	r3, #2
 800625e:	d11b      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x19e>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d016      	beq.n	8006298 <HAL_SPI_TransmitReceive+0x19e>
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	2b01      	cmp	r3, #1
 800626e:	d113      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	881a      	ldrh	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	1c9a      	adds	r2, r3, #2
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d11c      	bne.n	80062e0 <HAL_SPI_TransmitReceive+0x1e6>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d016      	beq.n	80062e0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062bc:	b292      	uxth	r2, r2
 80062be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c4:	1c9a      	adds	r2, r3, #2
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062dc:	2301      	movs	r3, #1
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062e0:	f7fb fdde 	bl	8001ea0 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d80d      	bhi.n	800630c <HAL_SPI_TransmitReceive+0x212>
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d009      	beq.n	800630c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e111      	b.n	8006530 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d19d      	bne.n	8006252 <HAL_SPI_TransmitReceive+0x158>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d197      	bne.n	8006252 <HAL_SPI_TransmitReceive+0x158>
 8006322:	e0e5      	b.n	80064f0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_SPI_TransmitReceive+0x23a>
 800632c:	8afb      	ldrh	r3, [r7, #22]
 800632e:	2b01      	cmp	r3, #1
 8006330:	f040 80d1 	bne.w	80064d6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b01      	cmp	r3, #1
 800633c:	d912      	bls.n	8006364 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006342:	881a      	ldrh	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634e:	1c9a      	adds	r2, r3, #2
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006358:	b29b      	uxth	r3, r3
 800635a:	3b02      	subs	r3, #2
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006362:	e0b8      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	7812      	ldrb	r2, [r2, #0]
 8006370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800638a:	e0a4      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b02      	cmp	r3, #2
 8006398:	d134      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x30a>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d02f      	beq.n	8006404 <HAL_SPI_TransmitReceive+0x30a>
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d12c      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d912      	bls.n	80063da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	881a      	ldrh	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c4:	1c9a      	adds	r2, r3, #2
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b02      	subs	r3, #2
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063d8:	e012      	b.n	8006400 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	330c      	adds	r3, #12
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b01      	cmp	r3, #1
 8006410:	d148      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x3aa>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d042      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b01      	cmp	r3, #1
 8006428:	d923      	bls.n	8006472 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006434:	b292      	uxth	r2, r2
 8006436:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643c:	1c9a      	adds	r2, r3, #2
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b02      	subs	r3, #2
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	d81f      	bhi.n	80064a0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800646e:	605a      	str	r2, [r3, #4]
 8006470:	e016      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f103 020c 	add.w	r2, r3, #12
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006494:	b29b      	uxth	r3, r3
 8006496:	3b01      	subs	r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064a0:	2301      	movs	r3, #1
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064a4:	f7fb fcfc 	bl	8001ea0 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d803      	bhi.n	80064bc <HAL_SPI_TransmitReceive+0x3c2>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ba:	d102      	bne.n	80064c2 <HAL_SPI_TransmitReceive+0x3c8>
 80064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e02c      	b.n	8006530 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f47f af55 	bne.w	800638c <HAL_SPI_TransmitReceive+0x292>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f47f af4e 	bne.w	800638c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f93d 	bl	8006774 <SPI_EndRxTxTransaction>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e00e      	b.n	8006530 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800652e:	2300      	movs	r3, #0
  }
}
 8006530:	4618      	mov	r0, r3
 8006532:	3728      	adds	r7, #40	@ 0x28
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006548:	f7fb fcaa 	bl	8001ea0 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	4413      	add	r3, r2
 8006556:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006558:	f7fb fca2 	bl	8001ea0 <HAL_GetTick>
 800655c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800655e:	4b39      	ldr	r3, [pc, #228]	@ (8006644 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	015b      	lsls	r3, r3, #5
 8006564:	0d1b      	lsrs	r3, r3, #20
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800656e:	e054      	b.n	800661a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d050      	beq.n	800661a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006578:	f7fb fc92 	bl	8001ea0 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	429a      	cmp	r2, r3
 8006586:	d902      	bls.n	800658e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d13d      	bne.n	800660a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800659c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065a6:	d111      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b0:	d004      	beq.n	80065bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ba:	d107      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d4:	d10f      	bne.n	80065f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e017      	b.n	800663a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	3b01      	subs	r3, #1
 8006618:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	429a      	cmp	r2, r3
 8006628:	bf0c      	ite	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	2300      	movne	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	429a      	cmp	r2, r3
 8006636:	d19b      	bne.n	8006570 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000080 	.word	0x20000080

08006648 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	@ 0x28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800665a:	f7fb fc21 	bl	8001ea0 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	4413      	add	r3, r2
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800666a:	f7fb fc19 	bl	8001ea0 <HAL_GetTick>
 800666e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006678:	4b3d      	ldr	r3, [pc, #244]	@ (8006770 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	00da      	lsls	r2, r3, #3
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	0d1b      	lsrs	r3, r3, #20
 8006688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006690:	e060      	b.n	8006754 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006698:	d107      	bne.n	80066aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d050      	beq.n	8006754 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066b2:	f7fb fbf5 	bl	8001ea0 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066be:	429a      	cmp	r2, r3
 80066c0:	d902      	bls.n	80066c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d13d      	bne.n	8006744 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066e0:	d111      	bne.n	8006706 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066ea:	d004      	beq.n	80066f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f4:	d107      	bne.n	8006706 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006704:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800670e:	d10f      	bne.n	8006730 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800672e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e010      	b.n	8006766 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	3b01      	subs	r3, #1
 8006752:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4013      	ands	r3, r2
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d196      	bne.n	8006692 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3728      	adds	r7, #40	@ 0x28
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000080 	.word	0x20000080

08006774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2200      	movs	r2, #0
 8006788:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7ff ff5b 	bl	8006648 <SPI_WaitFifoStateUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800679c:	f043 0220 	orr.w	r2, r3, #32
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e027      	b.n	80067f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2200      	movs	r2, #0
 80067b0:	2180      	movs	r1, #128	@ 0x80
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff fec0 	bl	8006538 <SPI_WaitFlagStateUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c2:	f043 0220 	orr.w	r2, r3, #32
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e014      	b.n	80067f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff ff34 	bl	8006648 <SPI_WaitFifoStateUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e000      	b.n	80067f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e049      	b.n	80068a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fb f990 	bl	8001b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f000 f89e 	bl	8006980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d001      	beq.n	80068c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e047      	b.n	8006958 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a23      	ldr	r2, [pc, #140]	@ (8006964 <HAL_TIM_Base_Start+0xb4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d01d      	beq.n	8006916 <HAL_TIM_Base_Start+0x66>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e2:	d018      	beq.n	8006916 <HAL_TIM_Base_Start+0x66>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006968 <HAL_TIM_Base_Start+0xb8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d013      	beq.n	8006916 <HAL_TIM_Base_Start+0x66>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1e      	ldr	r2, [pc, #120]	@ (800696c <HAL_TIM_Base_Start+0xbc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00e      	beq.n	8006916 <HAL_TIM_Base_Start+0x66>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006970 <HAL_TIM_Base_Start+0xc0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d009      	beq.n	8006916 <HAL_TIM_Base_Start+0x66>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1b      	ldr	r2, [pc, #108]	@ (8006974 <HAL_TIM_Base_Start+0xc4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d004      	beq.n	8006916 <HAL_TIM_Base_Start+0x66>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a19      	ldr	r2, [pc, #100]	@ (8006978 <HAL_TIM_Base_Start+0xc8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d115      	bne.n	8006942 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	4b17      	ldr	r3, [pc, #92]	@ (800697c <HAL_TIM_Base_Start+0xcc>)
 800691e:	4013      	ands	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b06      	cmp	r3, #6
 8006926:	d015      	beq.n	8006954 <HAL_TIM_Base_Start+0xa4>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800692e:	d011      	beq.n	8006954 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006940:	e008      	b.n	8006954 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 0201 	orr.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	e000      	b.n	8006956 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40000c00 	.word	0x40000c00
 8006974:	40013400 	.word	0x40013400
 8006978:	40014000 	.word	0x40014000
 800697c:	00010007 	.word	0x00010007

08006980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a46      	ldr	r2, [pc, #280]	@ (8006aac <TIM_Base_SetConfig+0x12c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d013      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800699e:	d00f      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a43      	ldr	r2, [pc, #268]	@ (8006ab0 <TIM_Base_SetConfig+0x130>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00b      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a42      	ldr	r2, [pc, #264]	@ (8006ab4 <TIM_Base_SetConfig+0x134>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a41      	ldr	r2, [pc, #260]	@ (8006ab8 <TIM_Base_SetConfig+0x138>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a40      	ldr	r2, [pc, #256]	@ (8006abc <TIM_Base_SetConfig+0x13c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d108      	bne.n	80069d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a35      	ldr	r2, [pc, #212]	@ (8006aac <TIM_Base_SetConfig+0x12c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d01f      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e0:	d01b      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a32      	ldr	r2, [pc, #200]	@ (8006ab0 <TIM_Base_SetConfig+0x130>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d017      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a31      	ldr	r2, [pc, #196]	@ (8006ab4 <TIM_Base_SetConfig+0x134>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a30      	ldr	r2, [pc, #192]	@ (8006ab8 <TIM_Base_SetConfig+0x138>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00f      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2f      	ldr	r2, [pc, #188]	@ (8006abc <TIM_Base_SetConfig+0x13c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2e      	ldr	r2, [pc, #184]	@ (8006ac0 <TIM_Base_SetConfig+0x140>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ac4 <TIM_Base_SetConfig+0x144>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a2c      	ldr	r2, [pc, #176]	@ (8006ac8 <TIM_Base_SetConfig+0x148>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d108      	bne.n	8006a2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a16      	ldr	r2, [pc, #88]	@ (8006aac <TIM_Base_SetConfig+0x12c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00f      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a18      	ldr	r2, [pc, #96]	@ (8006abc <TIM_Base_SetConfig+0x13c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a17      	ldr	r2, [pc, #92]	@ (8006ac0 <TIM_Base_SetConfig+0x140>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a16      	ldr	r2, [pc, #88]	@ (8006ac4 <TIM_Base_SetConfig+0x144>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a15      	ldr	r2, [pc, #84]	@ (8006ac8 <TIM_Base_SetConfig+0x148>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d103      	bne.n	8006a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d105      	bne.n	8006a9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f023 0201 	bic.w	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	611a      	str	r2, [r3, #16]
  }
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40013400 	.word	0x40013400
 8006ac0:	40014000 	.word	0x40014000
 8006ac4:	40014400 	.word	0x40014400
 8006ac8:	40014800 	.word	0x40014800

08006acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e068      	b.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a2e      	ldr	r2, [pc, #184]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d004      	beq.n	8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a2d      	ldr	r2, [pc, #180]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d108      	bne.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a1e      	ldr	r2, [pc, #120]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d01d      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b56:	d018      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d013      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00e      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a18      	ldr	r2, [pc, #96]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d009      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a13      	ldr	r2, [pc, #76]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d004      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a14      	ldr	r2, [pc, #80]	@ (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d10c      	bne.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40012c00 	.word	0x40012c00
 8006bc8:	40013400 	.word	0x40013400
 8006bcc:	40000400 	.word	0x40000400
 8006bd0:	40000800 	.word	0x40000800
 8006bd4:	40000c00 	.word	0x40000c00
 8006bd8:	40014000 	.word	0x40014000

08006bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e040      	b.n	8006c70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fa ffc4 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2224      	movs	r2, #36	@ 0x24
 8006c08:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0201 	bic.w	r2, r2, #1
 8006c18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fb6a 	bl	80072fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f8af 	bl	8006d8c <UART_SetConfig>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e01b      	b.n	8006c70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fbe9 	bl	8007440 <UART_CheckIdleState>
 8006c6e:	4603      	mov	r3, r0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08a      	sub	sp, #40	@ 0x28
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	4613      	mov	r3, r2
 8006c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d177      	bne.n	8006d80 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_UART_Transmit+0x24>
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e070      	b.n	8006d82 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2221      	movs	r2, #33	@ 0x21
 8006cac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cae:	f7fb f8f7 	bl	8001ea0 <HAL_GetTick>
 8006cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	88fa      	ldrh	r2, [r7, #6]
 8006cc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ccc:	d108      	bne.n	8006ce0 <HAL_UART_Transmit+0x68>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	e003      	b.n	8006ce8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ce8:	e02f      	b.n	8006d4a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2180      	movs	r1, #128	@ 0x80
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 fc4b 	bl	8007590 <UART_WaitOnFlagUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e03b      	b.n	8006d82 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10b      	bne.n	8006d28 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	881a      	ldrh	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d1c:	b292      	uxth	r2, r2
 8006d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	3302      	adds	r3, #2
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	e007      	b.n	8006d38 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	3301      	adds	r3, #1
 8006d36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1c9      	bne.n	8006cea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2140      	movs	r1, #64	@ 0x40
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fc15 	bl	8007590 <UART_WaitOnFlagUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e005      	b.n	8006d82 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e000      	b.n	8006d82 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006d80:	2302      	movs	r3, #2
  }
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d90:	b08a      	sub	sp, #40	@ 0x28
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	431a      	orrs	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	431a      	orrs	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	4ba4      	ldr	r3, [pc, #656]	@ (800704c <UART_SetConfig+0x2c0>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a99      	ldr	r2, [pc, #612]	@ (8007050 <UART_SetConfig+0x2c4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d004      	beq.n	8006df8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df4:	4313      	orrs	r3, r2
 8006df6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a90      	ldr	r2, [pc, #576]	@ (8007054 <UART_SetConfig+0x2c8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d126      	bne.n	8006e64 <UART_SetConfig+0xd8>
 8006e16:	4b90      	ldr	r3, [pc, #576]	@ (8007058 <UART_SetConfig+0x2cc>)
 8006e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d81b      	bhi.n	8006e5c <UART_SetConfig+0xd0>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <UART_SetConfig+0xa0>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e42:	e116      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006e44:	2302      	movs	r3, #2
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4a:	e112      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e52:	e10e      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006e54:	2308      	movs	r3, #8
 8006e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e5a:	e10a      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e62:	e106      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a7c      	ldr	r2, [pc, #496]	@ (800705c <UART_SetConfig+0x2d0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d138      	bne.n	8006ee0 <UART_SetConfig+0x154>
 8006e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8007058 <UART_SetConfig+0x2cc>)
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b0c      	cmp	r3, #12
 8006e7a:	d82d      	bhi.n	8006ed8 <UART_SetConfig+0x14c>
 8006e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <UART_SetConfig+0xf8>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006eb9 	.word	0x08006eb9
 8006e88:	08006ed9 	.word	0x08006ed9
 8006e8c:	08006ed9 	.word	0x08006ed9
 8006e90:	08006ed9 	.word	0x08006ed9
 8006e94:	08006ec9 	.word	0x08006ec9
 8006e98:	08006ed9 	.word	0x08006ed9
 8006e9c:	08006ed9 	.word	0x08006ed9
 8006ea0:	08006ed9 	.word	0x08006ed9
 8006ea4:	08006ec1 	.word	0x08006ec1
 8006ea8:	08006ed9 	.word	0x08006ed9
 8006eac:	08006ed9 	.word	0x08006ed9
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ebe:	e0d8      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ec6:	e0d4      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ece:	e0d0      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ed6:	e0cc      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ede:	e0c8      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a5e      	ldr	r2, [pc, #376]	@ (8007060 <UART_SetConfig+0x2d4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d125      	bne.n	8006f36 <UART_SetConfig+0x1aa>
 8006eea:	4b5b      	ldr	r3, [pc, #364]	@ (8007058 <UART_SetConfig+0x2cc>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ef4:	2b30      	cmp	r3, #48	@ 0x30
 8006ef6:	d016      	beq.n	8006f26 <UART_SetConfig+0x19a>
 8006ef8:	2b30      	cmp	r3, #48	@ 0x30
 8006efa:	d818      	bhi.n	8006f2e <UART_SetConfig+0x1a2>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d00a      	beq.n	8006f16 <UART_SetConfig+0x18a>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d814      	bhi.n	8006f2e <UART_SetConfig+0x1a2>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <UART_SetConfig+0x182>
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d008      	beq.n	8006f1e <UART_SetConfig+0x192>
 8006f0c:	e00f      	b.n	8006f2e <UART_SetConfig+0x1a2>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f14:	e0ad      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006f16:	2302      	movs	r3, #2
 8006f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f1c:	e0a9      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006f1e:	2304      	movs	r3, #4
 8006f20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f24:	e0a5      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006f26:	2308      	movs	r3, #8
 8006f28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f2c:	e0a1      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006f2e:	2310      	movs	r3, #16
 8006f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f34:	e09d      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8007064 <UART_SetConfig+0x2d8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d125      	bne.n	8006f8c <UART_SetConfig+0x200>
 8006f40:	4b45      	ldr	r3, [pc, #276]	@ (8007058 <UART_SetConfig+0x2cc>)
 8006f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f4c:	d016      	beq.n	8006f7c <UART_SetConfig+0x1f0>
 8006f4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f50:	d818      	bhi.n	8006f84 <UART_SetConfig+0x1f8>
 8006f52:	2b80      	cmp	r3, #128	@ 0x80
 8006f54:	d00a      	beq.n	8006f6c <UART_SetConfig+0x1e0>
 8006f56:	2b80      	cmp	r3, #128	@ 0x80
 8006f58:	d814      	bhi.n	8006f84 <UART_SetConfig+0x1f8>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <UART_SetConfig+0x1d8>
 8006f5e:	2b40      	cmp	r3, #64	@ 0x40
 8006f60:	d008      	beq.n	8006f74 <UART_SetConfig+0x1e8>
 8006f62:	e00f      	b.n	8006f84 <UART_SetConfig+0x1f8>
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f6a:	e082      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f72:	e07e      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006f74:	2304      	movs	r3, #4
 8006f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f7a:	e07a      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f82:	e076      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006f84:	2310      	movs	r3, #16
 8006f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f8a:	e072      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a35      	ldr	r2, [pc, #212]	@ (8007068 <UART_SetConfig+0x2dc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d12a      	bne.n	8006fec <UART_SetConfig+0x260>
 8006f96:	4b30      	ldr	r3, [pc, #192]	@ (8007058 <UART_SetConfig+0x2cc>)
 8006f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fa4:	d01a      	beq.n	8006fdc <UART_SetConfig+0x250>
 8006fa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006faa:	d81b      	bhi.n	8006fe4 <UART_SetConfig+0x258>
 8006fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fb0:	d00c      	beq.n	8006fcc <UART_SetConfig+0x240>
 8006fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fb6:	d815      	bhi.n	8006fe4 <UART_SetConfig+0x258>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <UART_SetConfig+0x238>
 8006fbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fc0:	d008      	beq.n	8006fd4 <UART_SetConfig+0x248>
 8006fc2:	e00f      	b.n	8006fe4 <UART_SetConfig+0x258>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fca:	e052      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fd2:	e04e      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fda:	e04a      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fe2:	e046      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fea:	e042      	b.n	8007072 <UART_SetConfig+0x2e6>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a17      	ldr	r2, [pc, #92]	@ (8007050 <UART_SetConfig+0x2c4>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d13a      	bne.n	800706c <UART_SetConfig+0x2e0>
 8006ff6:	4b18      	ldr	r3, [pc, #96]	@ (8007058 <UART_SetConfig+0x2cc>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007000:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007004:	d01a      	beq.n	800703c <UART_SetConfig+0x2b0>
 8007006:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800700a:	d81b      	bhi.n	8007044 <UART_SetConfig+0x2b8>
 800700c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007010:	d00c      	beq.n	800702c <UART_SetConfig+0x2a0>
 8007012:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007016:	d815      	bhi.n	8007044 <UART_SetConfig+0x2b8>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <UART_SetConfig+0x298>
 800701c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007020:	d008      	beq.n	8007034 <UART_SetConfig+0x2a8>
 8007022:	e00f      	b.n	8007044 <UART_SetConfig+0x2b8>
 8007024:	2300      	movs	r3, #0
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800702a:	e022      	b.n	8007072 <UART_SetConfig+0x2e6>
 800702c:	2302      	movs	r3, #2
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007032:	e01e      	b.n	8007072 <UART_SetConfig+0x2e6>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800703a:	e01a      	b.n	8007072 <UART_SetConfig+0x2e6>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007042:	e016      	b.n	8007072 <UART_SetConfig+0x2e6>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800704a:	e012      	b.n	8007072 <UART_SetConfig+0x2e6>
 800704c:	efff69f3 	.word	0xefff69f3
 8007050:	40008000 	.word	0x40008000
 8007054:	40013800 	.word	0x40013800
 8007058:	40021000 	.word	0x40021000
 800705c:	40004400 	.word	0x40004400
 8007060:	40004800 	.word	0x40004800
 8007064:	40004c00 	.word	0x40004c00
 8007068:	40005000 	.word	0x40005000
 800706c:	2310      	movs	r3, #16
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a9f      	ldr	r2, [pc, #636]	@ (80072f4 <UART_SetConfig+0x568>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d17a      	bne.n	8007172 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800707c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007080:	2b08      	cmp	r3, #8
 8007082:	d824      	bhi.n	80070ce <UART_SetConfig+0x342>
 8007084:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <UART_SetConfig+0x300>)
 8007086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708a:	bf00      	nop
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070cf 	.word	0x080070cf
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070cf 	.word	0x080070cf
 800709c:	080070bf 	.word	0x080070bf
 80070a0:	080070cf 	.word	0x080070cf
 80070a4:	080070cf 	.word	0x080070cf
 80070a8:	080070cf 	.word	0x080070cf
 80070ac:	080070c7 	.word	0x080070c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b0:	f7fe f8c2 	bl	8005238 <HAL_RCC_GetPCLK1Freq>
 80070b4:	61f8      	str	r0, [r7, #28]
        break;
 80070b6:	e010      	b.n	80070da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b8:	4b8f      	ldr	r3, [pc, #572]	@ (80072f8 <UART_SetConfig+0x56c>)
 80070ba:	61fb      	str	r3, [r7, #28]
        break;
 80070bc:	e00d      	b.n	80070da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070be:	f7fe f823 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 80070c2:	61f8      	str	r0, [r7, #28]
        break;
 80070c4:	e009      	b.n	80070da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ca:	61fb      	str	r3, [r7, #28]
        break;
 80070cc:	e005      	b.n	80070da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 80fb 	beq.w	80072d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	4413      	add	r3, r2
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d305      	bcc.n	80070fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d903      	bls.n	8007106 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007104:	e0e8      	b.n	80072d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	2200      	movs	r2, #0
 800710a:	461c      	mov	r4, r3
 800710c:	4615      	mov	r5, r2
 800710e:	f04f 0200 	mov.w	r2, #0
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	022b      	lsls	r3, r5, #8
 8007118:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800711c:	0222      	lsls	r2, r4, #8
 800711e:	68f9      	ldr	r1, [r7, #12]
 8007120:	6849      	ldr	r1, [r1, #4]
 8007122:	0849      	lsrs	r1, r1, #1
 8007124:	2000      	movs	r0, #0
 8007126:	4688      	mov	r8, r1
 8007128:	4681      	mov	r9, r0
 800712a:	eb12 0a08 	adds.w	sl, r2, r8
 800712e:	eb43 0b09 	adc.w	fp, r3, r9
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	603b      	str	r3, [r7, #0]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007140:	4650      	mov	r0, sl
 8007142:	4659      	mov	r1, fp
 8007144:	f7f9 fa80 	bl	8000648 <__aeabi_uldivmod>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4613      	mov	r3, r2
 800714e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007156:	d308      	bcc.n	800716a <UART_SetConfig+0x3de>
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800715e:	d204      	bcs.n	800716a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	60da      	str	r2, [r3, #12]
 8007168:	e0b6      	b.n	80072d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007170:	e0b2      	b.n	80072d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800717a:	d15e      	bne.n	800723a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800717c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007180:	2b08      	cmp	r3, #8
 8007182:	d828      	bhi.n	80071d6 <UART_SetConfig+0x44a>
 8007184:	a201      	add	r2, pc, #4	@ (adr r2, 800718c <UART_SetConfig+0x400>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	080071b1 	.word	0x080071b1
 8007190:	080071b9 	.word	0x080071b9
 8007194:	080071c1 	.word	0x080071c1
 8007198:	080071d7 	.word	0x080071d7
 800719c:	080071c7 	.word	0x080071c7
 80071a0:	080071d7 	.word	0x080071d7
 80071a4:	080071d7 	.word	0x080071d7
 80071a8:	080071d7 	.word	0x080071d7
 80071ac:	080071cf 	.word	0x080071cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b0:	f7fe f842 	bl	8005238 <HAL_RCC_GetPCLK1Freq>
 80071b4:	61f8      	str	r0, [r7, #28]
        break;
 80071b6:	e014      	b.n	80071e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071b8:	f7fe f854 	bl	8005264 <HAL_RCC_GetPCLK2Freq>
 80071bc:	61f8      	str	r0, [r7, #28]
        break;
 80071be:	e010      	b.n	80071e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c0:	4b4d      	ldr	r3, [pc, #308]	@ (80072f8 <UART_SetConfig+0x56c>)
 80071c2:	61fb      	str	r3, [r7, #28]
        break;
 80071c4:	e00d      	b.n	80071e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c6:	f7fd ff9f 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 80071ca:	61f8      	str	r0, [r7, #28]
        break;
 80071cc:	e009      	b.n	80071e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071d2:	61fb      	str	r3, [r7, #28]
        break;
 80071d4:	e005      	b.n	80071e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d077      	beq.n	80072d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	005a      	lsls	r2, r3, #1
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	441a      	add	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b0f      	cmp	r3, #15
 8007202:	d916      	bls.n	8007232 <UART_SetConfig+0x4a6>
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800720a:	d212      	bcs.n	8007232 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f023 030f 	bic.w	r3, r3, #15
 8007214:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	085b      	lsrs	r3, r3, #1
 800721a:	b29b      	uxth	r3, r3
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	b29a      	uxth	r2, r3
 8007222:	8afb      	ldrh	r3, [r7, #22]
 8007224:	4313      	orrs	r3, r2
 8007226:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	8afa      	ldrh	r2, [r7, #22]
 800722e:	60da      	str	r2, [r3, #12]
 8007230:	e052      	b.n	80072d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007238:	e04e      	b.n	80072d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800723a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800723e:	2b08      	cmp	r3, #8
 8007240:	d827      	bhi.n	8007292 <UART_SetConfig+0x506>
 8007242:	a201      	add	r2, pc, #4	@ (adr r2, 8007248 <UART_SetConfig+0x4bc>)
 8007244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007248:	0800726d 	.word	0x0800726d
 800724c:	08007275 	.word	0x08007275
 8007250:	0800727d 	.word	0x0800727d
 8007254:	08007293 	.word	0x08007293
 8007258:	08007283 	.word	0x08007283
 800725c:	08007293 	.word	0x08007293
 8007260:	08007293 	.word	0x08007293
 8007264:	08007293 	.word	0x08007293
 8007268:	0800728b 	.word	0x0800728b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800726c:	f7fd ffe4 	bl	8005238 <HAL_RCC_GetPCLK1Freq>
 8007270:	61f8      	str	r0, [r7, #28]
        break;
 8007272:	e014      	b.n	800729e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007274:	f7fd fff6 	bl	8005264 <HAL_RCC_GetPCLK2Freq>
 8007278:	61f8      	str	r0, [r7, #28]
        break;
 800727a:	e010      	b.n	800729e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800727c:	4b1e      	ldr	r3, [pc, #120]	@ (80072f8 <UART_SetConfig+0x56c>)
 800727e:	61fb      	str	r3, [r7, #28]
        break;
 8007280:	e00d      	b.n	800729e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007282:	f7fd ff41 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 8007286:	61f8      	str	r0, [r7, #28]
        break;
 8007288:	e009      	b.n	800729e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800728a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800728e:	61fb      	str	r3, [r7, #28]
        break;
 8007290:	e005      	b.n	800729e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800729c:	bf00      	nop
    }

    if (pclk != 0U)
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d019      	beq.n	80072d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	085a      	lsrs	r2, r3, #1
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	441a      	add	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b0f      	cmp	r3, #15
 80072bc:	d909      	bls.n	80072d2 <UART_SetConfig+0x546>
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072c4:	d205      	bcs.n	80072d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60da      	str	r2, [r3, #12]
 80072d0:	e002      	b.n	80072d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80072e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3728      	adds	r7, #40	@ 0x28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072f2:	bf00      	nop
 80072f4:	40008000 	.word	0x40008000
 80072f8:	00f42400 	.word	0x00f42400

080072fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736e:	f003 0304 	and.w	r3, r3, #4
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00a      	beq.n	80073ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01a      	beq.n	8007412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073fa:	d10a      	bne.n	8007412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	605a      	str	r2, [r3, #4]
  }
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b098      	sub	sp, #96	@ 0x60
 8007444:	af02      	add	r7, sp, #8
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007450:	f7fa fd26 	bl	8001ea0 <HAL_GetTick>
 8007454:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0308 	and.w	r3, r3, #8
 8007460:	2b08      	cmp	r3, #8
 8007462:	d12e      	bne.n	80074c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007464:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800746c:	2200      	movs	r2, #0
 800746e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f88c 	bl	8007590 <UART_WaitOnFlagUntilTimeout>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d021      	beq.n	80074c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007486:	e853 3f00 	ldrex	r3, [r3]
 800748a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800748c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800748e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007492:	653b      	str	r3, [r7, #80]	@ 0x50
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800749c:	647b      	str	r3, [r7, #68]	@ 0x44
 800749e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074a4:	e841 2300 	strex	r3, r2, [r1]
 80074a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e6      	bne.n	800747e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e062      	b.n	8007588 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d149      	bne.n	8007564 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074d8:	2200      	movs	r2, #0
 80074da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f856 	bl	8007590 <UART_WaitOnFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d03c      	beq.n	8007564 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	623b      	str	r3, [r7, #32]
   return(result);
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	461a      	mov	r2, r3
 8007506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007508:	633b      	str	r3, [r7, #48]	@ 0x30
 800750a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800750e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e6      	bne.n	80074ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3308      	adds	r3, #8
 8007522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	60fb      	str	r3, [r7, #12]
   return(result);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800753c:	61fa      	str	r2, [r7, #28]
 800753e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	69b9      	ldr	r1, [r7, #24]
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	617b      	str	r3, [r7, #20]
   return(result);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e5      	bne.n	800751c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e011      	b.n	8007588 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2220      	movs	r2, #32
 8007568:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2220      	movs	r2, #32
 800756e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3758      	adds	r7, #88	@ 0x58
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	4613      	mov	r3, r2
 800759e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a0:	e04f      	b.n	8007642 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d04b      	beq.n	8007642 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075aa:	f7fa fc79 	bl	8001ea0 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d302      	bcc.n	80075c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e04e      	b.n	8007662 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d037      	beq.n	8007642 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b80      	cmp	r3, #128	@ 0x80
 80075d6:	d034      	beq.n	8007642 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2b40      	cmp	r3, #64	@ 0x40
 80075dc:	d031      	beq.n	8007642 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d110      	bne.n	800760e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2208      	movs	r2, #8
 80075f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 f838 	bl	800766a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2208      	movs	r2, #8
 80075fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e029      	b.n	8007662 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800761c:	d111      	bne.n	8007642 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f81e 	bl	800766a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2220      	movs	r2, #32
 8007632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e00f      	b.n	8007662 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69da      	ldr	r2, [r3, #28]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4013      	ands	r3, r2
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	429a      	cmp	r2, r3
 8007650:	bf0c      	ite	eq
 8007652:	2301      	moveq	r3, #1
 8007654:	2300      	movne	r3, #0
 8007656:	b2db      	uxtb	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	429a      	cmp	r2, r3
 800765e:	d0a0      	beq.n	80075a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800766a:	b480      	push	{r7}
 800766c:	b095      	sub	sp, #84	@ 0x54
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007690:	643b      	str	r3, [r7, #64]	@ 0x40
 8007692:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007696:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e6      	bne.n	8007672 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f023 0301 	bic.w	r3, r3, #1
 80076ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e5      	bne.n	80076a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d118      	bne.n	8007712 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f023 0310 	bic.w	r3, r3, #16
 80076f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076fe:	61bb      	str	r3, [r7, #24]
 8007700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6979      	ldr	r1, [r7, #20]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	613b      	str	r3, [r7, #16]
   return(result);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e6      	bne.n	80076e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2220      	movs	r2, #32
 8007716:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007726:	bf00      	nop
 8007728:	3754      	adds	r7, #84	@ 0x54
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007738:	4904      	ldr	r1, [pc, #16]	@ (800774c <MX_FATFS_Init+0x18>)
 800773a:	4805      	ldr	r0, [pc, #20]	@ (8007750 <MX_FATFS_Init+0x1c>)
 800773c:	f002 feb6 	bl	800a4ac <FATFS_LinkDriver>
 8007740:	4603      	mov	r3, r0
 8007742:	461a      	mov	r2, r3
 8007744:	4b03      	ldr	r3, [pc, #12]	@ (8007754 <MX_FATFS_Init+0x20>)
 8007746:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007748:	bf00      	nop
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20016a20 	.word	0x20016a20
 8007750:	2000008c 	.word	0x2000008c
 8007754:	20016a1c 	.word	0x20016a1c

08007758 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800775c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800775e:	4618      	mov	r0, r3
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f9d7 	bl	8007b28 <USER_SPI_initialize>
 800777a:	4603      	mov	r3, r0
 800777c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	4603      	mov	r3, r0
 800778e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8007790:	79fb      	ldrb	r3, [r7, #7]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fab4 	bl	8007d00 <USER_SPI_status>
 8007798:	4603      	mov	r3, r0
 800779a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80077b4:	7bf8      	ldrb	r0, [r7, #15]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	f000 fab6 	bl	8007d2c <USER_SPI_read>
 80077c0:	4603      	mov	r3, r0
 80077c2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80077dc:	7bf8      	ldrb	r0, [r7, #15]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	68b9      	ldr	r1, [r7, #8]
 80077e4:	f000 fb08 	bl	8007df8 <USER_SPI_write>
 80077e8:	4603      	mov	r3, r0
 80077ea:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	603a      	str	r2, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
 8007800:	460b      	mov	r3, r1
 8007802:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	79b9      	ldrb	r1, [r7, #6]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fb70 	bl	8007ef0 <USER_SPI_ioctl>
 8007810:	4603      	mov	r3, r0
 8007812:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007824:	f7fa fb3c 	bl	8001ea0 <HAL_GetTick>
 8007828:	4603      	mov	r3, r0
 800782a:	4a04      	ldr	r2, [pc, #16]	@ (800783c <SPI_Timer_On+0x20>)
 800782c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800782e:	4a04      	ldr	r2, [pc, #16]	@ (8007840 <SPI_Timer_On+0x24>)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6013      	str	r3, [r2, #0]
}
 8007834:	bf00      	nop
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20016a28 	.word	0x20016a28
 8007840:	20016a2c 	.word	0x20016a2c

08007844 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007848:	f7fa fb2a 	bl	8001ea0 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	4b06      	ldr	r3, [pc, #24]	@ (8007868 <SPI_Timer_Status+0x24>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	1ad2      	subs	r2, r2, r3
 8007854:	4b05      	ldr	r3, [pc, #20]	@ (800786c <SPI_Timer_Status+0x28>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	bf34      	ite	cc
 800785c:	2301      	movcc	r3, #1
 800785e:	2300      	movcs	r3, #0
 8007860:	b2db      	uxtb	r3, r3
}
 8007862:	4618      	mov	r0, r3
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20016a28 	.word	0x20016a28
 800786c:	20016a2c 	.word	0x20016a2c

08007870 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af02      	add	r7, sp, #8
 8007876:	4603      	mov	r3, r0
 8007878:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800787a:	f107 020f 	add.w	r2, r7, #15
 800787e:	1df9      	adds	r1, r7, #7
 8007880:	2332      	movs	r3, #50	@ 0x32
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	2301      	movs	r3, #1
 8007886:	4804      	ldr	r0, [pc, #16]	@ (8007898 <xchg_spi+0x28>)
 8007888:	f7fe fc37 	bl	80060fa <HAL_SPI_TransmitReceive>
    return rxDat;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000220 	.word	0x20000220

0800789c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800789c:	b590      	push	{r4, r7, lr}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80078a6:	2300      	movs	r3, #0
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	e00a      	b.n	80078c2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	18d4      	adds	r4, r2, r3
 80078b2:	20ff      	movs	r0, #255	@ 0xff
 80078b4:	f7ff ffdc 	bl	8007870 <xchg_spi>
 80078b8:	4603      	mov	r3, r0
 80078ba:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3301      	adds	r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d3f0      	bcc.n	80078ac <rcvr_spi_multi+0x10>
	}
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd90      	pop	{r4, r7, pc}

080078d4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f04f 33ff 	mov.w	r3, #4294967295
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	4803      	ldr	r0, [pc, #12]	@ (80078f8 <xmit_spi_multi+0x24>)
 80078ea:	f7fe fa90 	bl	8005e0e <HAL_SPI_Transmit>
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000220 	.word	0x20000220

080078fc <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007904:	f7fa facc 	bl	8001ea0 <HAL_GetTick>
 8007908:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800790e:	20ff      	movs	r0, #255	@ 0xff
 8007910:	f7ff ffae 	bl	8007870 <xchg_spi>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2bff      	cmp	r3, #255	@ 0xff
 800791c:	d007      	beq.n	800792e <wait_ready+0x32>
 800791e:	f7fa fabf 	bl	8001ea0 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	429a      	cmp	r2, r3
 800792c:	d8ef      	bhi.n	800790e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	2bff      	cmp	r3, #255	@ 0xff
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007948:	2201      	movs	r2, #1
 800794a:	2180      	movs	r1, #128	@ 0x80
 800794c:	4803      	ldr	r0, [pc, #12]	@ (800795c <despiselect+0x18>)
 800794e:	f7fc fe51 	bl	80045f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007952:	20ff      	movs	r0, #255	@ 0xff
 8007954:	f7ff ff8c 	bl	8007870 <xchg_spi>

}
 8007958:	bf00      	nop
 800795a:	bd80      	pop	{r7, pc}
 800795c:	48000800 	.word	0x48000800

08007960 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007964:	2200      	movs	r2, #0
 8007966:	2180      	movs	r1, #128	@ 0x80
 8007968:	4809      	ldr	r0, [pc, #36]	@ (8007990 <spiselect+0x30>)
 800796a:	f7fc fe43 	bl	80045f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800796e:	20ff      	movs	r0, #255	@ 0xff
 8007970:	f7ff ff7e 	bl	8007870 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007974:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007978:	f7ff ffc0 	bl	80078fc <wait_ready>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <spiselect+0x26>
 8007982:	2301      	movs	r3, #1
 8007984:	e002      	b.n	800798c <spiselect+0x2c>

	despiselect();
 8007986:	f7ff ffdd 	bl	8007944 <despiselect>
	return 0;	/* Timeout */
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	bd80      	pop	{r7, pc}
 8007990:	48000800 	.word	0x48000800

08007994 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800799e:	20c8      	movs	r0, #200	@ 0xc8
 80079a0:	f7ff ff3c 	bl	800781c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80079a4:	20ff      	movs	r0, #255	@ 0xff
 80079a6:	f7ff ff63 	bl	8007870 <xchg_spi>
 80079aa:	4603      	mov	r3, r0
 80079ac:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	2bff      	cmp	r3, #255	@ 0xff
 80079b2:	d104      	bne.n	80079be <rcvr_datablock+0x2a>
 80079b4:	f7ff ff46 	bl	8007844 <SPI_Timer_Status>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1f2      	bne.n	80079a4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	2bfe      	cmp	r3, #254	@ 0xfe
 80079c2:	d001      	beq.n	80079c8 <rcvr_datablock+0x34>
 80079c4:	2300      	movs	r3, #0
 80079c6:	e00a      	b.n	80079de <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff ff66 	bl	800789c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80079d0:	20ff      	movs	r0, #255	@ 0xff
 80079d2:	f7ff ff4d 	bl	8007870 <xchg_spi>
 80079d6:	20ff      	movs	r0, #255	@ 0xff
 80079d8:	f7ff ff4a 	bl	8007870 <xchg_spi>

	return 1;						/* Function succeeded */
 80079dc:	2301      	movs	r3, #1
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80079f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80079f6:	f7ff ff81 	bl	80078fc <wait_ready>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <xmit_datablock+0x1e>
 8007a00:	2300      	movs	r3, #0
 8007a02:	e01e      	b.n	8007a42 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007a04:	78fb      	ldrb	r3, [r7, #3]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff ff32 	bl	8007870 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	2bfd      	cmp	r3, #253	@ 0xfd
 8007a10:	d016      	beq.n	8007a40 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007a12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff ff5c 	bl	80078d4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007a1c:	20ff      	movs	r0, #255	@ 0xff
 8007a1e:	f7ff ff27 	bl	8007870 <xchg_spi>
 8007a22:	20ff      	movs	r0, #255	@ 0xff
 8007a24:	f7ff ff24 	bl	8007870 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007a28:	20ff      	movs	r0, #255	@ 0xff
 8007a2a:	f7ff ff21 	bl	8007870 <xchg_spi>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
 8007a34:	f003 031f 	and.w	r3, r3, #31
 8007a38:	2b05      	cmp	r3, #5
 8007a3a:	d001      	beq.n	8007a40 <xmit_datablock+0x5a>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e000      	b.n	8007a42 <xmit_datablock+0x5c>
	}
	return 1;
 8007a40:	2301      	movs	r3, #1
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	4603      	mov	r3, r0
 8007a52:	6039      	str	r1, [r7, #0]
 8007a54:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	da0e      	bge.n	8007a7c <send_cmd+0x32>
		cmd &= 0x7F;
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a64:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007a66:	2100      	movs	r1, #0
 8007a68:	2037      	movs	r0, #55	@ 0x37
 8007a6a:	f7ff ffee 	bl	8007a4a <send_cmd>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d901      	bls.n	8007a7c <send_cmd+0x32>
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	e051      	b.n	8007b20 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	2b0c      	cmp	r3, #12
 8007a80:	d008      	beq.n	8007a94 <send_cmd+0x4a>
		despiselect();
 8007a82:	f7ff ff5f 	bl	8007944 <despiselect>
		if (!spiselect()) return 0xFF;
 8007a86:	f7ff ff6b 	bl	8007960 <spiselect>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <send_cmd+0x4a>
 8007a90:	23ff      	movs	r3, #255	@ 0xff
 8007a92:	e045      	b.n	8007b20 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff fee7 	bl	8007870 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	0e1b      	lsrs	r3, r3, #24
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fee1 	bl	8007870 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	0c1b      	lsrs	r3, r3, #16
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff fedb 	bl	8007870 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	0a1b      	lsrs	r3, r3, #8
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff fed5 	bl	8007870 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff fed0 	bl	8007870 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <send_cmd+0x94>
 8007ada:	2395      	movs	r3, #149	@ 0x95
 8007adc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d101      	bne.n	8007ae8 <send_cmd+0x9e>
 8007ae4:	2387      	movs	r3, #135	@ 0x87
 8007ae6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fec0 	bl	8007870 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	2b0c      	cmp	r3, #12
 8007af4:	d102      	bne.n	8007afc <send_cmd+0xb2>
 8007af6:	20ff      	movs	r0, #255	@ 0xff
 8007af8:	f7ff feba 	bl	8007870 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007afc:	230a      	movs	r3, #10
 8007afe:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007b00:	20ff      	movs	r0, #255	@ 0xff
 8007b02:	f7ff feb5 	bl	8007870 <xchg_spi>
 8007b06:	4603      	mov	r3, r0
 8007b08:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007b0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	da05      	bge.n	8007b1e <send_cmd+0xd4>
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007b28:	b590      	push	{r4, r7, lr}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <USER_SPI_initialize+0x14>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0d6      	b.n	8007cea <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007b3c:	4b6d      	ldr	r3, [pc, #436]	@ (8007cf4 <USER_SPI_initialize+0x1cc>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <USER_SPI_initialize+0x2a>
 8007b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8007cf4 <USER_SPI_initialize+0x1cc>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	e0cb      	b.n	8007cea <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007b52:	4b69      	ldr	r3, [pc, #420]	@ (8007cf8 <USER_SPI_initialize+0x1d0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007b5c:	4b66      	ldr	r3, [pc, #408]	@ (8007cf8 <USER_SPI_initialize+0x1d0>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007b64:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007b66:	230a      	movs	r3, #10
 8007b68:	73fb      	strb	r3, [r7, #15]
 8007b6a:	e005      	b.n	8007b78 <USER_SPI_initialize+0x50>
 8007b6c:	20ff      	movs	r0, #255	@ 0xff
 8007b6e:	f7ff fe7f 	bl	8007870 <xchg_spi>
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	73fb      	strb	r3, [r7, #15]
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1f6      	bne.n	8007b6c <USER_SPI_initialize+0x44>

	ty = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007b82:	2100      	movs	r1, #0
 8007b84:	2000      	movs	r0, #0
 8007b86:	f7ff ff60 	bl	8007a4a <send_cmd>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	f040 808b 	bne.w	8007ca8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007b92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007b96:	f7ff fe41 	bl	800781c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007b9a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007b9e:	2008      	movs	r0, #8
 8007ba0:	f7ff ff53 	bl	8007a4a <send_cmd>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d151      	bne.n	8007c4e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
 8007bae:	e00d      	b.n	8007bcc <USER_SPI_initialize+0xa4>
 8007bb0:	7bfc      	ldrb	r4, [r7, #15]
 8007bb2:	20ff      	movs	r0, #255	@ 0xff
 8007bb4:	f7ff fe5c 	bl	8007870 <xchg_spi>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f104 0310 	add.w	r3, r4, #16
 8007bc0:	443b      	add	r3, r7
 8007bc2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	73fb      	strb	r3, [r7, #15]
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d9ee      	bls.n	8007bb0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007bd2:	7abb      	ldrb	r3, [r7, #10]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d167      	bne.n	8007ca8 <USER_SPI_initialize+0x180>
 8007bd8:	7afb      	ldrb	r3, [r7, #11]
 8007bda:	2baa      	cmp	r3, #170	@ 0xaa
 8007bdc:	d164      	bne.n	8007ca8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007bde:	bf00      	nop
 8007be0:	f7ff fe30 	bl	8007844 <SPI_Timer_Status>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d007      	beq.n	8007bfa <USER_SPI_initialize+0xd2>
 8007bea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007bee:	20a9      	movs	r0, #169	@ 0xa9
 8007bf0:	f7ff ff2b 	bl	8007a4a <send_cmd>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1f2      	bne.n	8007be0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007bfa:	f7ff fe23 	bl	8007844 <SPI_Timer_Status>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d051      	beq.n	8007ca8 <USER_SPI_initialize+0x180>
 8007c04:	2100      	movs	r1, #0
 8007c06:	203a      	movs	r0, #58	@ 0x3a
 8007c08:	f7ff ff1f 	bl	8007a4a <send_cmd>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d14a      	bne.n	8007ca8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
 8007c16:	e00d      	b.n	8007c34 <USER_SPI_initialize+0x10c>
 8007c18:	7bfc      	ldrb	r4, [r7, #15]
 8007c1a:	20ff      	movs	r0, #255	@ 0xff
 8007c1c:	f7ff fe28 	bl	8007870 <xchg_spi>
 8007c20:	4603      	mov	r3, r0
 8007c22:	461a      	mov	r2, r3
 8007c24:	f104 0310 	add.w	r3, r4, #16
 8007c28:	443b      	add	r3, r7
 8007c2a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	3301      	adds	r3, #1
 8007c32:	73fb      	strb	r3, [r7, #15]
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d9ee      	bls.n	8007c18 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007c3a:	7a3b      	ldrb	r3, [r7, #8]
 8007c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <USER_SPI_initialize+0x120>
 8007c44:	230c      	movs	r3, #12
 8007c46:	e000      	b.n	8007c4a <USER_SPI_initialize+0x122>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	737b      	strb	r3, [r7, #13]
 8007c4c:	e02c      	b.n	8007ca8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007c4e:	2100      	movs	r1, #0
 8007c50:	20a9      	movs	r0, #169	@ 0xa9
 8007c52:	f7ff fefa 	bl	8007a4a <send_cmd>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d804      	bhi.n	8007c66 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	737b      	strb	r3, [r7, #13]
 8007c60:	23a9      	movs	r3, #169	@ 0xa9
 8007c62:	73bb      	strb	r3, [r7, #14]
 8007c64:	e003      	b.n	8007c6e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007c66:	2301      	movs	r3, #1
 8007c68:	737b      	strb	r3, [r7, #13]
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007c6e:	bf00      	nop
 8007c70:	f7ff fde8 	bl	8007844 <SPI_Timer_Status>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d007      	beq.n	8007c8a <USER_SPI_initialize+0x162>
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fee3 	bl	8007a4a <send_cmd>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f2      	bne.n	8007c70 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007c8a:	f7ff fddb 	bl	8007844 <SPI_Timer_Status>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d007      	beq.n	8007ca4 <USER_SPI_initialize+0x17c>
 8007c94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007c98:	2010      	movs	r0, #16
 8007c9a:	f7ff fed6 	bl	8007a4a <send_cmd>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <USER_SPI_initialize+0x180>
				ty = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007ca8:	4a14      	ldr	r2, [pc, #80]	@ (8007cfc <USER_SPI_initialize+0x1d4>)
 8007caa:	7b7b      	ldrb	r3, [r7, #13]
 8007cac:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007cae:	f7ff fe49 	bl	8007944 <despiselect>

	if (ty) {			/* OK */
 8007cb2:	7b7b      	ldrb	r3, [r7, #13]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d012      	beq.n	8007cde <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf8 <USER_SPI_initialize+0x1d0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <USER_SPI_initialize+0x1d0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0210 	orr.w	r2, r2, #16
 8007cca:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007ccc:	4b09      	ldr	r3, [pc, #36]	@ (8007cf4 <USER_SPI_initialize+0x1cc>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	f023 0301 	bic.w	r3, r3, #1
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <USER_SPI_initialize+0x1cc>)
 8007cda:	701a      	strb	r2, [r3, #0]
 8007cdc:	e002      	b.n	8007ce4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007cde:	4b05      	ldr	r3, [pc, #20]	@ (8007cf4 <USER_SPI_initialize+0x1cc>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007ce4:	4b03      	ldr	r3, [pc, #12]	@ (8007cf4 <USER_SPI_initialize+0x1cc>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	b2db      	uxtb	r3, r3
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd90      	pop	{r4, r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	200000a0 	.word	0x200000a0
 8007cf8:	20000220 	.word	0x20000220
 8007cfc:	20016a24 	.word	0x20016a24

08007d00 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <USER_SPI_status+0x14>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e002      	b.n	8007d1a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007d14:	4b04      	ldr	r3, [pc, #16]	@ (8007d28 <USER_SPI_status+0x28>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	b2db      	uxtb	r3, r3
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	200000a0 	.word	0x200000a0

08007d2c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <USER_SPI_read+0x1c>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <USER_SPI_read+0x20>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	e04d      	b.n	8007de8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007d4c:	4b28      	ldr	r3, [pc, #160]	@ (8007df0 <USER_SPI_read+0xc4>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <USER_SPI_read+0x32>
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e044      	b.n	8007de8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007d5e:	4b25      	ldr	r3, [pc, #148]	@ (8007df4 <USER_SPI_read+0xc8>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d102      	bne.n	8007d70 <USER_SPI_read+0x44>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	025b      	lsls	r3, r3, #9
 8007d6e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d111      	bne.n	8007d9a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	2011      	movs	r0, #17
 8007d7a:	f7ff fe66 	bl	8007a4a <send_cmd>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d129      	bne.n	8007dd8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007d84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d88:	68b8      	ldr	r0, [r7, #8]
 8007d8a:	f7ff fe03 	bl	8007994 <rcvr_datablock>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d021      	beq.n	8007dd8 <USER_SPI_read+0xac>
			count = 0;
 8007d94:	2300      	movs	r3, #0
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	e01e      	b.n	8007dd8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	2012      	movs	r0, #18
 8007d9e:	f7ff fe54 	bl	8007a4a <send_cmd>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d117      	bne.n	8007dd8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007da8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007dac:	68b8      	ldr	r0, [r7, #8]
 8007dae:	f7ff fdf1 	bl	8007994 <rcvr_datablock>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00a      	beq.n	8007dce <USER_SPI_read+0xa2>
				buff += 512;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007dbe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1ed      	bne.n	8007da8 <USER_SPI_read+0x7c>
 8007dcc:	e000      	b.n	8007dd0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007dce:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	200c      	movs	r0, #12
 8007dd4:	f7ff fe39 	bl	8007a4a <send_cmd>
		}
	}
	despiselect();
 8007dd8:	f7ff fdb4 	bl	8007944 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	bf14      	ite	ne
 8007de2:	2301      	movne	r3, #1
 8007de4:	2300      	moveq	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	200000a0 	.word	0x200000a0
 8007df4:	20016a24 	.word	0x20016a24

08007df8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
 8007e02:	603b      	str	r3, [r7, #0]
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <USER_SPI_write+0x1c>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <USER_SPI_write+0x20>
 8007e14:	2304      	movs	r3, #4
 8007e16:	e063      	b.n	8007ee0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007e18:	4b33      	ldr	r3, [pc, #204]	@ (8007ee8 <USER_SPI_write+0xf0>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <USER_SPI_write+0x32>
 8007e26:	2303      	movs	r3, #3
 8007e28:	e05a      	b.n	8007ee0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ee8 <USER_SPI_write+0xf0>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <USER_SPI_write+0x44>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e051      	b.n	8007ee0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007eec <USER_SPI_write+0xf4>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d102      	bne.n	8007e4e <USER_SPI_write+0x56>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	025b      	lsls	r3, r3, #9
 8007e4c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d110      	bne.n	8007e76 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	2018      	movs	r0, #24
 8007e58:	f7ff fdf7 	bl	8007a4a <send_cmd>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d136      	bne.n	8007ed0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007e62:	21fe      	movs	r1, #254	@ 0xfe
 8007e64:	68b8      	ldr	r0, [r7, #8]
 8007e66:	f7ff fdbe 	bl	80079e6 <xmit_datablock>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d02f      	beq.n	8007ed0 <USER_SPI_write+0xd8>
			count = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	e02c      	b.n	8007ed0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007e76:	4b1d      	ldr	r3, [pc, #116]	@ (8007eec <USER_SPI_write+0xf4>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	f003 0306 	and.w	r3, r3, #6
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <USER_SPI_write+0x92>
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	2097      	movs	r0, #151	@ 0x97
 8007e86:	f7ff fde0 	bl	8007a4a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	2019      	movs	r0, #25
 8007e8e:	f7ff fddc 	bl	8007a4a <send_cmd>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d11b      	bne.n	8007ed0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007e98:	21fc      	movs	r1, #252	@ 0xfc
 8007e9a:	68b8      	ldr	r0, [r7, #8]
 8007e9c:	f7ff fda3 	bl	80079e6 <xmit_datablock>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <USER_SPI_write+0xc4>
				buff += 512;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007eac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1ee      	bne.n	8007e98 <USER_SPI_write+0xa0>
 8007eba:	e000      	b.n	8007ebe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007ebc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007ebe:	21fd      	movs	r1, #253	@ 0xfd
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	f7ff fd90 	bl	80079e6 <xmit_datablock>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <USER_SPI_write+0xd8>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007ed0:	f7ff fd38 	bl	8007944 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bf14      	ite	ne
 8007eda:	2301      	movne	r3, #1
 8007edc:	2300      	moveq	r3, #0
 8007ede:	b2db      	uxtb	r3, r3
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	200000a0 	.word	0x200000a0
 8007eec:	20016a24 	.word	0x20016a24

08007ef0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08c      	sub	sp, #48	@ 0x30
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	603a      	str	r2, [r7, #0]
 8007efa:	71fb      	strb	r3, [r7, #7]
 8007efc:	460b      	mov	r3, r1
 8007efe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <USER_SPI_ioctl+0x1a>
 8007f06:	2304      	movs	r3, #4
 8007f08:	e15a      	b.n	80081c0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007f0a:	4baf      	ldr	r3, [pc, #700]	@ (80081c8 <USER_SPI_ioctl+0x2d8>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <USER_SPI_ioctl+0x2c>
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e151      	b.n	80081c0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8007f22:	79bb      	ldrb	r3, [r7, #6]
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	f200 8136 	bhi.w	8008196 <USER_SPI_ioctl+0x2a6>
 8007f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f30 <USER_SPI_ioctl+0x40>)
 8007f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f30:	08007f45 	.word	0x08007f45
 8007f34:	08007f59 	.word	0x08007f59
 8007f38:	08008197 	.word	0x08008197
 8007f3c:	08008005 	.word	0x08008005
 8007f40:	080080fb 	.word	0x080080fb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007f44:	f7ff fd0c 	bl	8007960 <spiselect>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 8127 	beq.w	800819e <USER_SPI_ioctl+0x2ae>
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007f56:	e122      	b.n	800819e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007f58:	2100      	movs	r1, #0
 8007f5a:	2009      	movs	r0, #9
 8007f5c:	f7ff fd75 	bl	8007a4a <send_cmd>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f040 811d 	bne.w	80081a2 <USER_SPI_ioctl+0x2b2>
 8007f68:	f107 030c 	add.w	r3, r7, #12
 8007f6c:	2110      	movs	r1, #16
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff fd10 	bl	8007994 <rcvr_datablock>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 8113 	beq.w	80081a2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007f7c:	7b3b      	ldrb	r3, [r7, #12]
 8007f7e:	099b      	lsrs	r3, r3, #6
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d111      	bne.n	8007faa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007f86:	7d7b      	ldrb	r3, [r7, #21]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	7d3b      	ldrb	r3, [r7, #20]
 8007f8c:	021b      	lsls	r3, r3, #8
 8007f8e:	4413      	add	r3, r2
 8007f90:	461a      	mov	r2, r3
 8007f92:	7cfb      	ldrb	r3, [r7, #19]
 8007f94:	041b      	lsls	r3, r3, #16
 8007f96:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007f9a:	4413      	add	r3, r2
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	029a      	lsls	r2, r3, #10
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e028      	b.n	8007ffc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007faa:	7c7b      	ldrb	r3, [r7, #17]
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	7dbb      	ldrb	r3, [r7, #22]
 8007fb4:	09db      	lsrs	r3, r3, #7
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	4413      	add	r3, r2
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	7d7b      	ldrb	r3, [r7, #21]
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	f003 0306 	and.w	r3, r3, #6
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	4413      	add	r3, r2
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	3302      	adds	r3, #2
 8007fce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007fd2:	7d3b      	ldrb	r3, [r7, #20]
 8007fd4:	099b      	lsrs	r3, r3, #6
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	7cfb      	ldrb	r3, [r7, #19]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	441a      	add	r2, r3
 8007fe0:	7cbb      	ldrb	r3, [r7, #18]
 8007fe2:	029b      	lsls	r3, r3, #10
 8007fe4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007fe8:	4413      	add	r3, r2
 8007fea:	3301      	adds	r3, #1
 8007fec:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007fee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ff2:	3b09      	subs	r3, #9
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	409a      	lsls	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8008002:	e0ce      	b.n	80081a2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008004:	4b71      	ldr	r3, [pc, #452]	@ (80081cc <USER_SPI_ioctl+0x2dc>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d031      	beq.n	8008074 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008010:	2100      	movs	r1, #0
 8008012:	208d      	movs	r0, #141	@ 0x8d
 8008014:	f7ff fd19 	bl	8007a4a <send_cmd>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	f040 80c3 	bne.w	80081a6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008020:	20ff      	movs	r0, #255	@ 0xff
 8008022:	f7ff fc25 	bl	8007870 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008026:	f107 030c 	add.w	r3, r7, #12
 800802a:	2110      	movs	r1, #16
 800802c:	4618      	mov	r0, r3
 800802e:	f7ff fcb1 	bl	8007994 <rcvr_datablock>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80b6 	beq.w	80081a6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800803a:	2330      	movs	r3, #48	@ 0x30
 800803c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008040:	e007      	b.n	8008052 <USER_SPI_ioctl+0x162>
 8008042:	20ff      	movs	r0, #255	@ 0xff
 8008044:	f7ff fc14 	bl	8007870 <xchg_spi>
 8008048:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800804c:	3b01      	subs	r3, #1
 800804e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008052:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1f3      	bne.n	8008042 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800805a:	7dbb      	ldrb	r3, [r7, #22]
 800805c:	091b      	lsrs	r3, r3, #4
 800805e:	b2db      	uxtb	r3, r3
 8008060:	461a      	mov	r2, r3
 8008062:	2310      	movs	r3, #16
 8008064:	fa03 f202 	lsl.w	r2, r3, r2
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008072:	e098      	b.n	80081a6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008074:	2100      	movs	r1, #0
 8008076:	2009      	movs	r0, #9
 8008078:	f7ff fce7 	bl	8007a4a <send_cmd>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	f040 8091 	bne.w	80081a6 <USER_SPI_ioctl+0x2b6>
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	2110      	movs	r1, #16
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff fc82 	bl	8007994 <rcvr_datablock>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 8087 	beq.w	80081a6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008098:	4b4c      	ldr	r3, [pc, #304]	@ (80081cc <USER_SPI_ioctl+0x2dc>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d012      	beq.n	80080ca <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80080a4:	7dbb      	ldrb	r3, [r7, #22]
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80080ac:	7dfa      	ldrb	r2, [r7, #23]
 80080ae:	09d2      	lsrs	r2, r2, #7
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	4413      	add	r3, r2
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	7e7b      	ldrb	r3, [r7, #25]
 80080b8:	099b      	lsrs	r3, r3, #6
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	3b01      	subs	r3, #1
 80080be:	fa02 f303 	lsl.w	r3, r2, r3
 80080c2:	461a      	mov	r2, r3
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	e013      	b.n	80080f2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80080ca:	7dbb      	ldrb	r3, [r7, #22]
 80080cc:	109b      	asrs	r3, r3, #2
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f003 031f 	and.w	r3, r3, #31
 80080d4:	3301      	adds	r3, #1
 80080d6:	7dfa      	ldrb	r2, [r7, #23]
 80080d8:	00d2      	lsls	r2, r2, #3
 80080da:	f002 0218 	and.w	r2, r2, #24
 80080de:	7df9      	ldrb	r1, [r7, #23]
 80080e0:	0949      	lsrs	r1, r1, #5
 80080e2:	b2c9      	uxtb	r1, r1
 80080e4:	440a      	add	r2, r1
 80080e6:	3201      	adds	r2, #1
 80080e8:	fb02 f303 	mul.w	r3, r2, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80080f8:	e055      	b.n	80081a6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80080fa:	4b34      	ldr	r3, [pc, #208]	@ (80081cc <USER_SPI_ioctl+0x2dc>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	f003 0306 	and.w	r3, r3, #6
 8008102:	2b00      	cmp	r3, #0
 8008104:	d051      	beq.n	80081aa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008106:	f107 020c 	add.w	r2, r7, #12
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	210b      	movs	r1, #11
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff feee 	bl	8007ef0 <USER_SPI_ioctl>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d149      	bne.n	80081ae <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800811a:	7b3b      	ldrb	r3, [r7, #12]
 800811c:	099b      	lsrs	r3, r3, #6
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d104      	bne.n	800812e <USER_SPI_ioctl+0x23e>
 8008124:	7dbb      	ldrb	r3, [r7, #22]
 8008126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812a:	2b00      	cmp	r3, #0
 800812c:	d041      	beq.n	80081b2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	623b      	str	r3, [r7, #32]
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800813e:	4b23      	ldr	r3, [pc, #140]	@ (80081cc <USER_SPI_ioctl+0x2dc>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d105      	bne.n	8008156 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800814a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814c:	025b      	lsls	r3, r3, #9
 800814e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008152:	025b      	lsls	r3, r3, #9
 8008154:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008156:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008158:	2020      	movs	r0, #32
 800815a:	f7ff fc76 	bl	8007a4a <send_cmd>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d128      	bne.n	80081b6 <USER_SPI_ioctl+0x2c6>
 8008164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008166:	2021      	movs	r0, #33	@ 0x21
 8008168:	f7ff fc6f 	bl	8007a4a <send_cmd>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d121      	bne.n	80081b6 <USER_SPI_ioctl+0x2c6>
 8008172:	2100      	movs	r1, #0
 8008174:	2026      	movs	r0, #38	@ 0x26
 8008176:	f7ff fc68 	bl	8007a4a <send_cmd>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d11a      	bne.n	80081b6 <USER_SPI_ioctl+0x2c6>
 8008180:	f247 5030 	movw	r0, #30000	@ 0x7530
 8008184:	f7ff fbba 	bl	80078fc <wait_ready>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d013      	beq.n	80081b6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800818e:	2300      	movs	r3, #0
 8008190:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8008194:	e00f      	b.n	80081b6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8008196:	2304      	movs	r3, #4
 8008198:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800819c:	e00c      	b.n	80081b8 <USER_SPI_ioctl+0x2c8>
		break;
 800819e:	bf00      	nop
 80081a0:	e00a      	b.n	80081b8 <USER_SPI_ioctl+0x2c8>
		break;
 80081a2:	bf00      	nop
 80081a4:	e008      	b.n	80081b8 <USER_SPI_ioctl+0x2c8>
		break;
 80081a6:	bf00      	nop
 80081a8:	e006      	b.n	80081b8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80081aa:	bf00      	nop
 80081ac:	e004      	b.n	80081b8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80081ae:	bf00      	nop
 80081b0:	e002      	b.n	80081b8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80081b2:	bf00      	nop
 80081b4:	e000      	b.n	80081b8 <USER_SPI_ioctl+0x2c8>
		break;
 80081b6:	bf00      	nop
	}

	despiselect();
 80081b8:	f7ff fbc4 	bl	8007944 <despiselect>

	return res;
 80081bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3730      	adds	r7, #48	@ 0x30
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	200000a0 	.word	0x200000a0
 80081cc:	20016a24 	.word	0x20016a24

080081d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	4a08      	ldr	r2, [pc, #32]	@ (8008200 <disk_status+0x30>)
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	79fa      	ldrb	r2, [r7, #7]
 80081e8:	4905      	ldr	r1, [pc, #20]	@ (8008200 <disk_status+0x30>)
 80081ea:	440a      	add	r2, r1
 80081ec:	7a12      	ldrb	r2, [r2, #8]
 80081ee:	4610      	mov	r0, r2
 80081f0:	4798      	blx	r3
 80081f2:	4603      	mov	r3, r0
 80081f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20016a58 	.word	0x20016a58

08008204 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008212:	79fb      	ldrb	r3, [r7, #7]
 8008214:	4a0d      	ldr	r2, [pc, #52]	@ (800824c <disk_initialize+0x48>)
 8008216:	5cd3      	ldrb	r3, [r2, r3]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d111      	bne.n	8008240 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	4a0b      	ldr	r2, [pc, #44]	@ (800824c <disk_initialize+0x48>)
 8008220:	2101      	movs	r1, #1
 8008222:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	4a09      	ldr	r2, [pc, #36]	@ (800824c <disk_initialize+0x48>)
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	79fa      	ldrb	r2, [r7, #7]
 8008232:	4906      	ldr	r1, [pc, #24]	@ (800824c <disk_initialize+0x48>)
 8008234:	440a      	add	r2, r1
 8008236:	7a12      	ldrb	r2, [r2, #8]
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
 800823c:	4603      	mov	r3, r0
 800823e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20016a58 	.word	0x20016a58

08008250 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008250:	b590      	push	{r4, r7, lr}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	607a      	str	r2, [r7, #4]
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	4a0a      	ldr	r2, [pc, #40]	@ (800828c <disk_read+0x3c>)
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	689c      	ldr	r4, [r3, #8]
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	4a07      	ldr	r2, [pc, #28]	@ (800828c <disk_read+0x3c>)
 8008270:	4413      	add	r3, r2
 8008272:	7a18      	ldrb	r0, [r3, #8]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	47a0      	blx	r4
 800827c:	4603      	mov	r3, r0
 800827e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008280:	7dfb      	ldrb	r3, [r7, #23]
}
 8008282:	4618      	mov	r0, r3
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	bd90      	pop	{r4, r7, pc}
 800828a:	bf00      	nop
 800828c:	20016a58 	.word	0x20016a58

08008290 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008290:	b590      	push	{r4, r7, lr}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	607a      	str	r2, [r7, #4]
 800829a:	603b      	str	r3, [r7, #0]
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	4a0a      	ldr	r2, [pc, #40]	@ (80082cc <disk_write+0x3c>)
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	68dc      	ldr	r4, [r3, #12]
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	4a07      	ldr	r2, [pc, #28]	@ (80082cc <disk_write+0x3c>)
 80082b0:	4413      	add	r3, r2
 80082b2:	7a18      	ldrb	r0, [r3, #8]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	68b9      	ldr	r1, [r7, #8]
 80082ba:	47a0      	blx	r4
 80082bc:	4603      	mov	r3, r0
 80082be:	75fb      	strb	r3, [r7, #23]
  return res;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd90      	pop	{r4, r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20016a58 	.word	0x20016a58

080082d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	603a      	str	r2, [r7, #0]
 80082da:	71fb      	strb	r3, [r7, #7]
 80082dc:	460b      	mov	r3, r1
 80082de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	4a09      	ldr	r2, [pc, #36]	@ (8008308 <disk_ioctl+0x38>)
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	79fa      	ldrb	r2, [r7, #7]
 80082ee:	4906      	ldr	r1, [pc, #24]	@ (8008308 <disk_ioctl+0x38>)
 80082f0:	440a      	add	r2, r1
 80082f2:	7a10      	ldrb	r0, [r2, #8]
 80082f4:	79b9      	ldrb	r1, [r7, #6]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	4798      	blx	r3
 80082fa:	4603      	mov	r3, r0
 80082fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20016a58 	.word	0x20016a58

0800830c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3301      	adds	r3, #1
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800831c:	89fb      	ldrh	r3, [r7, #14]
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	b21a      	sxth	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	b21b      	sxth	r3, r3
 8008328:	4313      	orrs	r3, r2
 800832a:	b21b      	sxth	r3, r3
 800832c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800832e:	89fb      	ldrh	r3, [r7, #14]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3303      	adds	r3, #3
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	3202      	adds	r2, #2
 8008354:	7812      	ldrb	r2, [r2, #0]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	021b      	lsls	r3, r3, #8
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	3201      	adds	r2, #1
 8008362:	7812      	ldrb	r2, [r2, #0]
 8008364:	4313      	orrs	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	021b      	lsls	r3, r3, #8
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	7812      	ldrb	r2, [r2, #0]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
	return rv;
 8008374:	68fb      	ldr	r3, [r7, #12]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	887a      	ldrh	r2, [r7, #2]
 8008396:	b2d2      	uxtb	r2, r2
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	887b      	ldrh	r3, [r7, #2]
 800839c:	0a1b      	lsrs	r3, r3, #8
 800839e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	607a      	str	r2, [r7, #4]
 80083a6:	887a      	ldrh	r2, [r7, #2]
 80083a8:	b2d2      	uxtb	r2, r2
 80083aa:	701a      	strb	r2, [r3, #0]
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	0a1b      	lsrs	r3, r3, #8
 80083d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	607a      	str	r2, [r7, #4]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	b2d2      	uxtb	r2, r2
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	0a1b      	lsrs	r3, r3, #8
 80083e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	b2d2      	uxtb	r2, r2
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	0a1b      	lsrs	r3, r3, #8
 80083f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	701a      	strb	r2, [r3, #0]
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00d      	beq.n	8008446 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	1c53      	adds	r3, r2, #1
 800842e:	613b      	str	r3, [r7, #16]
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	1c59      	adds	r1, r3, #1
 8008434:	6179      	str	r1, [r7, #20]
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3b01      	subs	r3, #1
 800843e:	607b      	str	r3, [r7, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1f1      	bne.n	800842a <mem_cpy+0x1a>
	}
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008452:	b480      	push	{r7}
 8008454:	b087      	sub	sp, #28
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	617a      	str	r2, [r7, #20]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3b01      	subs	r3, #1
 8008472:	607b      	str	r3, [r7, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1f3      	bne.n	8008462 <mem_set+0x10>
}
 800847a:	bf00      	nop
 800847c:	bf00      	nop
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008488:	b480      	push	{r7}
 800848a:	b089      	sub	sp, #36	@ 0x24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	61fb      	str	r3, [r7, #28]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	61fa      	str	r2, [r7, #28]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	4619      	mov	r1, r3
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	61ba      	str	r2, [r7, #24]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	1acb      	subs	r3, r1, r3
 80084b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	607b      	str	r3, [r7, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <mem_cmp+0x40>
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0eb      	beq.n	80084a0 <mem_cmp+0x18>

	return r;
 80084c8:	697b      	ldr	r3, [r7, #20]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3724      	adds	r7, #36	@ 0x24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80084e0:	e002      	b.n	80084e8 <chk_chr+0x12>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3301      	adds	r3, #1
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <chk_chr+0x26>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d1f2      	bne.n	80084e2 <chk_chr+0xc>
	return *str;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	781b      	ldrb	r3, [r3, #0]
}
 8008500:	4618      	mov	r0, r3
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008516:	2300      	movs	r3, #0
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e029      	b.n	8008574 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008520:	4a27      	ldr	r2, [pc, #156]	@ (80085c0 <chk_lock+0xb4>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	4413      	add	r3, r2
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d01d      	beq.n	800856a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800852e:	4a24      	ldr	r2, [pc, #144]	@ (80085c0 <chk_lock+0xb4>)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	4413      	add	r3, r2
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d116      	bne.n	800856e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008540:	4a1f      	ldr	r2, [pc, #124]	@ (80085c0 <chk_lock+0xb4>)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	4413      	add	r3, r2
 8008548:	3304      	adds	r3, #4
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008550:	429a      	cmp	r2, r3
 8008552:	d10c      	bne.n	800856e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008554:	4a1a      	ldr	r2, [pc, #104]	@ (80085c0 <chk_lock+0xb4>)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	4413      	add	r3, r2
 800855c:	3308      	adds	r3, #8
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008564:	429a      	cmp	r2, r3
 8008566:	d102      	bne.n	800856e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008568:	e007      	b.n	800857a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800856a:	2301      	movs	r3, #1
 800856c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d9d2      	bls.n	8008520 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d109      	bne.n	8008594 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d102      	bne.n	800858c <chk_lock+0x80>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b02      	cmp	r3, #2
 800858a:	d101      	bne.n	8008590 <chk_lock+0x84>
 800858c:	2300      	movs	r3, #0
 800858e:	e010      	b.n	80085b2 <chk_lock+0xa6>
 8008590:	2312      	movs	r3, #18
 8008592:	e00e      	b.n	80085b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d108      	bne.n	80085ac <chk_lock+0xa0>
 800859a:	4a09      	ldr	r2, [pc, #36]	@ (80085c0 <chk_lock+0xb4>)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	4413      	add	r3, r2
 80085a2:	330c      	adds	r3, #12
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085aa:	d101      	bne.n	80085b0 <chk_lock+0xa4>
 80085ac:	2310      	movs	r3, #16
 80085ae:	e000      	b.n	80085b2 <chk_lock+0xa6>
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	20016a38 	.word	0x20016a38

080085c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80085ca:	2300      	movs	r3, #0
 80085cc:	607b      	str	r3, [r7, #4]
 80085ce:	e002      	b.n	80085d6 <enq_lock+0x12>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3301      	adds	r3, #1
 80085d4:	607b      	str	r3, [r7, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d806      	bhi.n	80085ea <enq_lock+0x26>
 80085dc:	4a09      	ldr	r2, [pc, #36]	@ (8008604 <enq_lock+0x40>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	011b      	lsls	r3, r3, #4
 80085e2:	4413      	add	r3, r2
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f2      	bne.n	80085d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	bf14      	ite	ne
 80085f0:	2301      	movne	r3, #1
 80085f2:	2300      	moveq	r3, #0
 80085f4:	b2db      	uxtb	r3, r3
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	20016a38 	.word	0x20016a38

08008608 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	e01f      	b.n	8008658 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008618:	4a41      	ldr	r2, [pc, #260]	@ (8008720 <inc_lock+0x118>)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	011b      	lsls	r3, r3, #4
 800861e:	4413      	add	r3, r2
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d113      	bne.n	8008652 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800862a:	4a3d      	ldr	r2, [pc, #244]	@ (8008720 <inc_lock+0x118>)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	4413      	add	r3, r2
 8008632:	3304      	adds	r3, #4
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800863a:	429a      	cmp	r2, r3
 800863c:	d109      	bne.n	8008652 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800863e:	4a38      	ldr	r2, [pc, #224]	@ (8008720 <inc_lock+0x118>)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	4413      	add	r3, r2
 8008646:	3308      	adds	r3, #8
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800864e:	429a      	cmp	r2, r3
 8008650:	d006      	beq.n	8008660 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3301      	adds	r3, #1
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d9dc      	bls.n	8008618 <inc_lock+0x10>
 800865e:	e000      	b.n	8008662 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008660:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b02      	cmp	r3, #2
 8008666:	d132      	bne.n	80086ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	e002      	b.n	8008674 <inc_lock+0x6c>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3301      	adds	r3, #1
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d806      	bhi.n	8008688 <inc_lock+0x80>
 800867a:	4a29      	ldr	r2, [pc, #164]	@ (8008720 <inc_lock+0x118>)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	4413      	add	r3, r2
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f2      	bne.n	800866e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d101      	bne.n	8008692 <inc_lock+0x8a>
 800868e:	2300      	movs	r3, #0
 8008690:	e040      	b.n	8008714 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	4922      	ldr	r1, [pc, #136]	@ (8008720 <inc_lock+0x118>)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	011b      	lsls	r3, r3, #4
 800869c:	440b      	add	r3, r1
 800869e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	491e      	ldr	r1, [pc, #120]	@ (8008720 <inc_lock+0x118>)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	440b      	add	r3, r1
 80086ac:	3304      	adds	r3, #4
 80086ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	695a      	ldr	r2, [r3, #20]
 80086b4:	491a      	ldr	r1, [pc, #104]	@ (8008720 <inc_lock+0x118>)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	011b      	lsls	r3, r3, #4
 80086ba:	440b      	add	r3, r1
 80086bc:	3308      	adds	r3, #8
 80086be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80086c0:	4a17      	ldr	r2, [pc, #92]	@ (8008720 <inc_lock+0x118>)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	4413      	add	r3, r2
 80086c8:	330c      	adds	r3, #12
 80086ca:	2200      	movs	r2, #0
 80086cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d009      	beq.n	80086e8 <inc_lock+0xe0>
 80086d4:	4a12      	ldr	r2, [pc, #72]	@ (8008720 <inc_lock+0x118>)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	4413      	add	r3, r2
 80086dc:	330c      	adds	r3, #12
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <inc_lock+0xe0>
 80086e4:	2300      	movs	r3, #0
 80086e6:	e015      	b.n	8008714 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d108      	bne.n	8008700 <inc_lock+0xf8>
 80086ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008720 <inc_lock+0x118>)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	4413      	add	r3, r2
 80086f6:	330c      	adds	r3, #12
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	e001      	b.n	8008704 <inc_lock+0xfc>
 8008700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008704:	4906      	ldr	r1, [pc, #24]	@ (8008720 <inc_lock+0x118>)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	440b      	add	r3, r1
 800870c:	330c      	adds	r3, #12
 800870e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3301      	adds	r3, #1
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	20016a38 	.word	0x20016a38

08008724 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3b01      	subs	r3, #1
 8008730:	607b      	str	r3, [r7, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d825      	bhi.n	8008784 <dec_lock+0x60>
		n = Files[i].ctr;
 8008738:	4a17      	ldr	r2, [pc, #92]	@ (8008798 <dec_lock+0x74>)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	4413      	add	r3, r2
 8008740:	330c      	adds	r3, #12
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008746:	89fb      	ldrh	r3, [r7, #14]
 8008748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800874c:	d101      	bne.n	8008752 <dec_lock+0x2e>
 800874e:	2300      	movs	r3, #0
 8008750:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008752:	89fb      	ldrh	r3, [r7, #14]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <dec_lock+0x3a>
 8008758:	89fb      	ldrh	r3, [r7, #14]
 800875a:	3b01      	subs	r3, #1
 800875c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800875e:	4a0e      	ldr	r2, [pc, #56]	@ (8008798 <dec_lock+0x74>)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	011b      	lsls	r3, r3, #4
 8008764:	4413      	add	r3, r2
 8008766:	330c      	adds	r3, #12
 8008768:	89fa      	ldrh	r2, [r7, #14]
 800876a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800876c:	89fb      	ldrh	r3, [r7, #14]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d105      	bne.n	800877e <dec_lock+0x5a>
 8008772:	4a09      	ldr	r2, [pc, #36]	@ (8008798 <dec_lock+0x74>)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	4413      	add	r3, r2
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	737b      	strb	r3, [r7, #13]
 8008782:	e001      	b.n	8008788 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008784:	2302      	movs	r3, #2
 8008786:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008788:	7b7b      	ldrb	r3, [r7, #13]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	20016a38 	.word	0x20016a38

0800879c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	e010      	b.n	80087cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80087aa:	4a0d      	ldr	r2, [pc, #52]	@ (80087e0 <clear_lock+0x44>)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	4413      	add	r3, r2
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d105      	bne.n	80087c6 <clear_lock+0x2a>
 80087ba:	4a09      	ldr	r2, [pc, #36]	@ (80087e0 <clear_lock+0x44>)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	4413      	add	r3, r2
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3301      	adds	r3, #1
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d9eb      	bls.n	80087aa <clear_lock+0xe>
	}
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	20016a38 	.word	0x20016a38

080087e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	78db      	ldrb	r3, [r3, #3]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d034      	beq.n	8008862 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	7858      	ldrb	r0, [r3, #1]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008808:	2301      	movs	r3, #1
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	f7ff fd40 	bl	8008290 <disk_write>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008816:	2301      	movs	r3, #1
 8008818:	73fb      	strb	r3, [r7, #15]
 800881a:	e022      	b.n	8008862 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	1ad2      	subs	r2, r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	429a      	cmp	r2, r3
 8008830:	d217      	bcs.n	8008862 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	789b      	ldrb	r3, [r3, #2]
 8008836:	613b      	str	r3, [r7, #16]
 8008838:	e010      	b.n	800885c <sync_window+0x78>
					wsect += fs->fsize;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	4413      	add	r3, r2
 8008842:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7858      	ldrb	r0, [r3, #1]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800884e:	2301      	movs	r3, #1
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	f7ff fd1d 	bl	8008290 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	3b01      	subs	r3, #1
 800885a:	613b      	str	r3, [r7, #16]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d8eb      	bhi.n	800883a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	429a      	cmp	r2, r3
 8008882:	d01b      	beq.n	80088bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff ffad 	bl	80087e4 <sync_window>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d113      	bne.n	80088bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	7858      	ldrb	r0, [r3, #1]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800889e:	2301      	movs	r3, #1
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	f7ff fcd5 	bl	8008250 <disk_read>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d004      	beq.n	80088b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80088ac:	f04f 33ff 	mov.w	r3, #4294967295
 80088b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7ff ff87 	bl	80087e4 <sync_window>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d158      	bne.n	8008992 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d148      	bne.n	800897a <sync_fs+0xb2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	791b      	ldrb	r3, [r3, #4]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d144      	bne.n	800897a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3330      	adds	r3, #48	@ 0x30
 80088f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088f8:	2100      	movs	r1, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7ff fda9 	bl	8008452 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3330      	adds	r3, #48	@ 0x30
 8008904:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008908:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff fd38 	bl	8008382 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3330      	adds	r3, #48	@ 0x30
 8008916:	4921      	ldr	r1, [pc, #132]	@ (800899c <sync_fs+0xd4>)
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff fd4d 	bl	80083b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3330      	adds	r3, #48	@ 0x30
 8008922:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008926:	491e      	ldr	r1, [pc, #120]	@ (80089a0 <sync_fs+0xd8>)
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff fd45 	bl	80083b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3330      	adds	r3, #48	@ 0x30
 8008932:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	4619      	mov	r1, r3
 800893c:	4610      	mov	r0, r2
 800893e:	f7ff fd3b 	bl	80083b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3330      	adds	r3, #48	@ 0x30
 8008946:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f7ff fd31 	bl	80083b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	7858      	ldrb	r0, [r3, #1]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800896e:	2301      	movs	r3, #1
 8008970:	f7ff fc8e 	bl	8008290 <disk_write>
			fs->fsi_flag = 0;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	785b      	ldrb	r3, [r3, #1]
 800897e:	2200      	movs	r2, #0
 8008980:	2100      	movs	r1, #0
 8008982:	4618      	mov	r0, r3
 8008984:	f7ff fca4 	bl	80082d0 <disk_ioctl>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <sync_fs+0xca>
 800898e:	2301      	movs	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	41615252 	.word	0x41615252
 80089a0:	61417272 	.word	0x61417272

080089a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	3b02      	subs	r3, #2
 80089b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	3b02      	subs	r3, #2
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d301      	bcc.n	80089c4 <clust2sect+0x20>
 80089c0:	2300      	movs	r3, #0
 80089c2:	e008      	b.n	80089d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	895b      	ldrh	r3, [r3, #10]
 80089c8:	461a      	mov	r2, r3
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	fb03 f202 	mul.w	r2, r3, r2
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d4:	4413      	add	r3, r2
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b086      	sub	sp, #24
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d904      	bls.n	8008a02 <get_fat+0x20>
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d302      	bcc.n	8008a08 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008a02:	2301      	movs	r3, #1
 8008a04:	617b      	str	r3, [r7, #20]
 8008a06:	e08e      	b.n	8008b26 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008a08:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d061      	beq.n	8008ada <get_fat+0xf8>
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	dc7b      	bgt.n	8008b12 <get_fat+0x130>
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d002      	beq.n	8008a24 <get_fat+0x42>
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d041      	beq.n	8008aa6 <get_fat+0xc4>
 8008a22:	e076      	b.n	8008b12 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	085b      	lsrs	r3, r3, #1
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4413      	add	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6a1a      	ldr	r2, [r3, #32]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	0a5b      	lsrs	r3, r3, #9
 8008a3a:	4413      	add	r3, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6938      	ldr	r0, [r7, #16]
 8008a40:	f7ff ff14 	bl	800886c <move_window>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d166      	bne.n	8008b18 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	60fa      	str	r2, [r7, #12]
 8008a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	4413      	add	r3, r2
 8008a58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a5c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	6a1a      	ldr	r2, [r3, #32]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	0a5b      	lsrs	r3, r3, #9
 8008a66:	4413      	add	r3, r2
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6938      	ldr	r0, [r7, #16]
 8008a6c:	f7ff fefe 	bl	800886c <move_window>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d152      	bne.n	8008b1c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a84:	021b      	lsls	r3, r3, #8
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <get_fat+0xba>
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	091b      	lsrs	r3, r3, #4
 8008a9a:	e002      	b.n	8008aa2 <get_fat+0xc0>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aa2:	617b      	str	r3, [r7, #20]
			break;
 8008aa4:	e03f      	b.n	8008b26 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	6a1a      	ldr	r2, [r3, #32]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	0a1b      	lsrs	r3, r3, #8
 8008aae:	4413      	add	r3, r2
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6938      	ldr	r0, [r7, #16]
 8008ab4:	f7ff feda 	bl	800886c <move_window>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d130      	bne.n	8008b20 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	005b      	lsls	r3, r3, #1
 8008ac8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008acc:	4413      	add	r3, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff fc1c 	bl	800830c <ld_word>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	617b      	str	r3, [r7, #20]
			break;
 8008ad8:	e025      	b.n	8008b26 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	6a1a      	ldr	r2, [r3, #32]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	09db      	lsrs	r3, r3, #7
 8008ae2:	4413      	add	r3, r2
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6938      	ldr	r0, [r7, #16]
 8008ae8:	f7ff fec0 	bl	800886c <move_window>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d118      	bne.n	8008b24 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008b00:	4413      	add	r3, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff fc1a 	bl	800833c <ld_dword>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008b0e:	617b      	str	r3, [r7, #20]
			break;
 8008b10:	e009      	b.n	8008b26 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008b12:	2301      	movs	r3, #1
 8008b14:	617b      	str	r3, [r7, #20]
 8008b16:	e006      	b.n	8008b26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b18:	bf00      	nop
 8008b1a:	e004      	b.n	8008b26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b1c:	bf00      	nop
 8008b1e:	e002      	b.n	8008b26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008b20:	bf00      	nop
 8008b22:	e000      	b.n	8008b26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008b24:	bf00      	nop
		}
	}

	return val;
 8008b26:	697b      	ldr	r3, [r7, #20]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b089      	sub	sp, #36	@ 0x24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	f240 80d9 	bls.w	8008cfa <put_fat+0x1ca>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	f080 80d3 	bcs.w	8008cfa <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	f000 8096 	beq.w	8008c8a <put_fat+0x15a>
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	f300 80cb 	bgt.w	8008cfa <put_fat+0x1ca>
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d002      	beq.n	8008b6e <put_fat+0x3e>
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d06e      	beq.n	8008c4a <put_fat+0x11a>
 8008b6c:	e0c5      	b.n	8008cfa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	4413      	add	r3, r2
 8008b7a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a1a      	ldr	r2, [r3, #32]
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	0a5b      	lsrs	r3, r3, #9
 8008b84:	4413      	add	r3, r2
 8008b86:	4619      	mov	r1, r3
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f7ff fe6f 	bl	800886c <move_window>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b92:	7ffb      	ldrb	r3, [r7, #31]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f040 80a9 	bne.w	8008cec <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	1c59      	adds	r1, r3, #1
 8008ba4:	61b9      	str	r1, [r7, #24]
 8008ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008baa:	4413      	add	r3, r2
 8008bac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00d      	beq.n	8008bd4 <put_fat+0xa4>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	b25b      	sxtb	r3, r3
 8008bbe:	f003 030f 	and.w	r3, r3, #15
 8008bc2:	b25a      	sxtb	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	011b      	lsls	r3, r3, #4
 8008bca:	b25b      	sxtb	r3, r3
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	b25b      	sxtb	r3, r3
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	e001      	b.n	8008bd8 <put_fat+0xa8>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a1a      	ldr	r2, [r3, #32]
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	0a5b      	lsrs	r3, r3, #9
 8008bea:	4413      	add	r3, r2
 8008bec:	4619      	mov	r1, r3
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f7ff fe3c 	bl	800886c <move_window>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bf8:	7ffb      	ldrb	r3, [r7, #31]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d178      	bne.n	8008cf0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0a:	4413      	add	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <put_fat+0xf0>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	091b      	lsrs	r3, r3, #4
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	e00e      	b.n	8008c3e <put_fat+0x10e>
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	b25b      	sxtb	r3, r3
 8008c26:	f023 030f 	bic.w	r3, r3, #15
 8008c2a:	b25a      	sxtb	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	0a1b      	lsrs	r3, r3, #8
 8008c30:	b25b      	sxtb	r3, r3
 8008c32:	f003 030f 	and.w	r3, r3, #15
 8008c36:	b25b      	sxtb	r3, r3
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	b25b      	sxtb	r3, r3
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2201      	movs	r2, #1
 8008c46:	70da      	strb	r2, [r3, #3]
			break;
 8008c48:	e057      	b.n	8008cfa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a1a      	ldr	r2, [r3, #32]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	0a1b      	lsrs	r3, r3, #8
 8008c52:	4413      	add	r3, r2
 8008c54:	4619      	mov	r1, r3
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7ff fe08 	bl	800886c <move_window>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c60:	7ffb      	ldrb	r3, [r7, #31]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d146      	bne.n	8008cf4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008c74:	4413      	add	r3, r2
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	b292      	uxth	r2, r2
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff fb80 	bl	8008382 <st_word>
			fs->wflag = 1;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	70da      	strb	r2, [r3, #3]
			break;
 8008c88:	e037      	b.n	8008cfa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a1a      	ldr	r2, [r3, #32]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	09db      	lsrs	r3, r3, #7
 8008c92:	4413      	add	r3, r2
 8008c94:	4619      	mov	r1, r3
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff fde8 	bl	800886c <move_window>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ca0:	7ffb      	ldrb	r3, [r7, #31]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d128      	bne.n	8008cf8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008cba:	4413      	add	r3, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff fb3d 	bl	800833c <ld_dword>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008cc8:	4323      	orrs	r3, r4
 8008cca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008cda:	4413      	add	r3, r2
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff fb6a 	bl	80083b8 <st_dword>
			fs->wflag = 1;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	70da      	strb	r2, [r3, #3]
			break;
 8008cea:	e006      	b.n	8008cfa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008cec:	bf00      	nop
 8008cee:	e004      	b.n	8008cfa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008cf0:	bf00      	nop
 8008cf2:	e002      	b.n	8008cfa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008cf4:	bf00      	nop
 8008cf6:	e000      	b.n	8008cfa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008cf8:	bf00      	nop
		}
	}
	return res;
 8008cfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3724      	adds	r7, #36	@ 0x24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd90      	pop	{r4, r7, pc}

08008d04 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d904      	bls.n	8008d2a <remove_chain+0x26>
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d301      	bcc.n	8008d2e <remove_chain+0x2a>
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	e04b      	b.n	8008dc6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00c      	beq.n	8008d4e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008d34:	f04f 32ff 	mov.w	r2, #4294967295
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	69b8      	ldr	r0, [r7, #24]
 8008d3c:	f7ff fef8 	bl	8008b30 <put_fat>
 8008d40:	4603      	mov	r3, r0
 8008d42:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008d44:	7ffb      	ldrb	r3, [r7, #31]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <remove_chain+0x4a>
 8008d4a:	7ffb      	ldrb	r3, [r7, #31]
 8008d4c:	e03b      	b.n	8008dc6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008d4e:	68b9      	ldr	r1, [r7, #8]
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff fe46 	bl	80089e2 <get_fat>
 8008d56:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d031      	beq.n	8008dc2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d101      	bne.n	8008d68 <remove_chain+0x64>
 8008d64:	2302      	movs	r3, #2
 8008d66:	e02e      	b.n	8008dc6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d101      	bne.n	8008d74 <remove_chain+0x70>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e028      	b.n	8008dc6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008d74:	2200      	movs	r2, #0
 8008d76:	68b9      	ldr	r1, [r7, #8]
 8008d78:	69b8      	ldr	r0, [r7, #24]
 8008d7a:	f7ff fed9 	bl	8008b30 <put_fat>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008d82:	7ffb      	ldrb	r3, [r7, #31]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <remove_chain+0x88>
 8008d88:	7ffb      	ldrb	r3, [r7, #31]
 8008d8a:	e01c      	b.n	8008dc6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	691a      	ldr	r2, [r3, #16]
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	3b02      	subs	r3, #2
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d20b      	bcs.n	8008db2 <remove_chain+0xae>
			fs->free_clst++;
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	791b      	ldrb	r3, [r3, #4]
 8008da8:	f043 0301 	orr.w	r3, r3, #1
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d3c6      	bcc.n	8008d4e <remove_chain+0x4a>
 8008dc0:	e000      	b.n	8008dc4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008dc2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3720      	adds	r7, #32
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b088      	sub	sp, #32
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10d      	bne.n	8008e00 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <create_chain+0x2c>
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d31b      	bcc.n	8008e32 <create_chain+0x64>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	61bb      	str	r3, [r7, #24]
 8008dfe:	e018      	b.n	8008e32 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff fded 	bl	80089e2 <get_fat>
 8008e08:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d801      	bhi.n	8008e14 <create_chain+0x46>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e070      	b.n	8008ef6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d101      	bne.n	8008e20 <create_chain+0x52>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	e06a      	b.n	8008ef6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d201      	bcs.n	8008e2e <create_chain+0x60>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	e063      	b.n	8008ef6 <create_chain+0x128>
		scl = clst;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	69fa      	ldr	r2, [r7, #28]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d307      	bcc.n	8008e56 <create_chain+0x88>
				ncl = 2;
 8008e46:	2302      	movs	r3, #2
 8008e48:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008e4a:	69fa      	ldr	r2, [r7, #28]
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d901      	bls.n	8008e56 <create_chain+0x88>
 8008e52:	2300      	movs	r3, #0
 8008e54:	e04f      	b.n	8008ef6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008e56:	69f9      	ldr	r1, [r7, #28]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff fdc2 	bl	80089e2 <get_fat>
 8008e5e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00e      	beq.n	8008e84 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d003      	beq.n	8008e74 <create_chain+0xa6>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e72:	d101      	bne.n	8008e78 <create_chain+0xaa>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	e03e      	b.n	8008ef6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d1da      	bne.n	8008e36 <create_chain+0x68>
 8008e80:	2300      	movs	r3, #0
 8008e82:	e038      	b.n	8008ef6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008e84:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008e86:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8a:	69f9      	ldr	r1, [r7, #28]
 8008e8c:	6938      	ldr	r0, [r7, #16]
 8008e8e:	f7ff fe4f 	bl	8008b30 <put_fat>
 8008e92:	4603      	mov	r3, r0
 8008e94:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d109      	bne.n	8008eb0 <create_chain+0xe2>
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d006      	beq.n	8008eb0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6938      	ldr	r0, [r7, #16]
 8008ea8:	f7ff fe42 	bl	8008b30 <put_fat>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d116      	bne.n	8008ee4 <create_chain+0x116>
		fs->last_clst = ncl;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	69fa      	ldr	r2, [r7, #28]
 8008eba:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	691a      	ldr	r2, [r3, #16]
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	3b02      	subs	r3, #2
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d804      	bhi.n	8008ed4 <create_chain+0x106>
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	1e5a      	subs	r2, r3, #1
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	791b      	ldrb	r3, [r3, #4]
 8008ed8:	f043 0301 	orr.w	r3, r3, #1
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	711a      	strb	r2, [r3, #4]
 8008ee2:	e007      	b.n	8008ef4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d102      	bne.n	8008ef0 <create_chain+0x122>
 8008eea:	f04f 33ff 	mov.w	r3, #4294967295
 8008eee:	e000      	b.n	8008ef2 <create_chain+0x124>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008ef4:	69fb      	ldr	r3, [r7, #28]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b087      	sub	sp, #28
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f12:	3304      	adds	r3, #4
 8008f14:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	0a5b      	lsrs	r3, r3, #9
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	8952      	ldrh	r2, [r2, #10]
 8008f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f22:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	1d1a      	adds	r2, r3, #4
 8008f28:	613a      	str	r2, [r7, #16]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <clmt_clust+0x3a>
 8008f34:	2300      	movs	r3, #0
 8008f36:	e010      	b.n	8008f5a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d307      	bcc.n	8008f50 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008f4e:	e7e9      	b.n	8008f24 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008f50:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	4413      	add	r3, r2
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b086      	sub	sp, #24
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f7c:	d204      	bcs.n	8008f88 <dir_sdi+0x22>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	f003 031f 	and.w	r3, r3, #31
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <dir_sdi+0x26>
		return FR_INT_ERR;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e063      	b.n	8009054 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <dir_sdi+0x46>
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d902      	bls.n	8008fac <dir_sdi+0x46>
		clst = fs->dirbase;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008faa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10c      	bne.n	8008fcc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	095b      	lsrs	r3, r3, #5
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	8912      	ldrh	r2, [r2, #8]
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d301      	bcc.n	8008fc2 <dir_sdi+0x5c>
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	e048      	b.n	8009054 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	61da      	str	r2, [r3, #28]
 8008fca:	e029      	b.n	8009020 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	895b      	ldrh	r3, [r3, #10]
 8008fd0:	025b      	lsls	r3, r3, #9
 8008fd2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008fd4:	e019      	b.n	800900a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6979      	ldr	r1, [r7, #20]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff fd01 	bl	80089e2 <get_fat>
 8008fe0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe8:	d101      	bne.n	8008fee <dir_sdi+0x88>
 8008fea:	2301      	movs	r3, #1
 8008fec:	e032      	b.n	8009054 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d904      	bls.n	8008ffe <dir_sdi+0x98>
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d301      	bcc.n	8009002 <dir_sdi+0x9c>
 8008ffe:	2302      	movs	r3, #2
 8009000:	e028      	b.n	8009054 <dir_sdi+0xee>
			ofs -= csz;
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	429a      	cmp	r2, r3
 8009010:	d2e1      	bcs.n	8008fd6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009012:	6979      	ldr	r1, [r7, #20]
 8009014:	6938      	ldr	r0, [r7, #16]
 8009016:	f7ff fcc5 	bl	80089a4 <clust2sect>
 800901a:	4602      	mov	r2, r0
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <dir_sdi+0xcc>
 800902e:	2302      	movs	r3, #2
 8009030:	e010      	b.n	8009054 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69da      	ldr	r2, [r3, #28]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	0a5b      	lsrs	r3, r3, #9
 800903a:	441a      	add	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904c:	441a      	add	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3718      	adds	r7, #24
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	3320      	adds	r3, #32
 8009072:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <dir_next+0x28>
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009082:	d301      	bcc.n	8009088 <dir_next+0x2c>
 8009084:	2304      	movs	r3, #4
 8009086:	e0aa      	b.n	80091de <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908e:	2b00      	cmp	r3, #0
 8009090:	f040 8098 	bne.w	80091c4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10b      	bne.n	80090be <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	095b      	lsrs	r3, r3, #5
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	8912      	ldrh	r2, [r2, #8]
 80090ae:	4293      	cmp	r3, r2
 80090b0:	f0c0 8088 	bcc.w	80091c4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	61da      	str	r2, [r3, #28]
 80090ba:	2304      	movs	r3, #4
 80090bc:	e08f      	b.n	80091de <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	0a5b      	lsrs	r3, r3, #9
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	8952      	ldrh	r2, [r2, #10]
 80090c6:	3a01      	subs	r2, #1
 80090c8:	4013      	ands	r3, r2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d17a      	bne.n	80091c4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	4619      	mov	r1, r3
 80090d6:	4610      	mov	r0, r2
 80090d8:	f7ff fc83 	bl	80089e2 <get_fat>
 80090dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d801      	bhi.n	80090e8 <dir_next+0x8c>
 80090e4:	2302      	movs	r3, #2
 80090e6:	e07a      	b.n	80091de <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ee:	d101      	bne.n	80090f4 <dir_next+0x98>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e074      	b.n	80091de <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d358      	bcc.n	80091b0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	61da      	str	r2, [r3, #28]
 800910a:	2304      	movs	r3, #4
 800910c:	e067      	b.n	80091de <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7ff fe59 	bl	8008dce <create_chain>
 800911c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <dir_next+0xcc>
 8009124:	2307      	movs	r3, #7
 8009126:	e05a      	b.n	80091de <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <dir_next+0xd6>
 800912e:	2302      	movs	r3, #2
 8009130:	e055      	b.n	80091de <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009138:	d101      	bne.n	800913e <dir_next+0xe2>
 800913a:	2301      	movs	r3, #1
 800913c:	e04f      	b.n	80091de <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff fb50 	bl	80087e4 <sync_window>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <dir_next+0xf2>
 800914a:	2301      	movs	r3, #1
 800914c:	e047      	b.n	80091de <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3330      	adds	r3, #48	@ 0x30
 8009152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009156:	2100      	movs	r1, #0
 8009158:	4618      	mov	r0, r3
 800915a:	f7ff f97a 	bl	8008452 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800915e:	2300      	movs	r3, #0
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	6979      	ldr	r1, [r7, #20]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7ff fc1d 	bl	80089a4 <clust2sect>
 800916a:	4602      	mov	r2, r0
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009170:	e012      	b.n	8009198 <dir_next+0x13c>
						fs->wflag = 1;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2201      	movs	r2, #1
 8009176:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7ff fb33 	bl	80087e4 <sync_window>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <dir_next+0x12c>
 8009184:	2301      	movs	r3, #1
 8009186:	e02a      	b.n	80091de <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	3301      	adds	r3, #1
 800918c:	613b      	str	r3, [r7, #16]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	895b      	ldrh	r3, [r3, #10]
 800919c:	461a      	mov	r2, r3
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d3e6      	bcc.n	8009172 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	1ad2      	subs	r2, r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80091b6:	6979      	ldr	r1, [r7, #20]
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f7ff fbf3 	bl	80089a4 <clust2sect>
 80091be:	4602      	mov	r2, r0
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d6:	441a      	add	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b086      	sub	sp, #24
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80091f6:	2100      	movs	r1, #0
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff feb4 	bl	8008f66 <dir_sdi>
 80091fe:	4603      	mov	r3, r0
 8009200:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d12b      	bne.n	8009260 <dir_alloc+0x7a>
		n = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	4619      	mov	r1, r3
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7ff fb2a 	bl	800886c <move_window>
 8009218:	4603      	mov	r3, r0
 800921a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d11d      	bne.n	800925e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2be5      	cmp	r3, #229	@ 0xe5
 800922a:	d004      	beq.n	8009236 <dir_alloc+0x50>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d107      	bne.n	8009246 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	3301      	adds	r3, #1
 800923a:	613b      	str	r3, [r7, #16]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d102      	bne.n	800924a <dir_alloc+0x64>
 8009244:	e00c      	b.n	8009260 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009246:	2300      	movs	r3, #0
 8009248:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800924a:	2101      	movs	r1, #1
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff ff05 	bl	800905c <dir_next>
 8009252:	4603      	mov	r3, r0
 8009254:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0d7      	beq.n	800920c <dir_alloc+0x26>
 800925c:	e000      	b.n	8009260 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800925e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009260:	7dfb      	ldrb	r3, [r7, #23]
 8009262:	2b04      	cmp	r3, #4
 8009264:	d101      	bne.n	800926a <dir_alloc+0x84>
 8009266:	2307      	movs	r3, #7
 8009268:	75fb      	strb	r3, [r7, #23]
	return res;
 800926a:	7dfb      	ldrb	r3, [r7, #23]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	331a      	adds	r3, #26
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff f842 	bl	800830c <ld_word>
 8009288:	4603      	mov	r3, r0
 800928a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b03      	cmp	r3, #3
 8009292:	d109      	bne.n	80092a8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	3314      	adds	r3, #20
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff f837 	bl	800830c <ld_word>
 800929e:	4603      	mov	r3, r0
 80092a0:	041b      	lsls	r3, r3, #16
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80092a8:	68fb      	ldr	r3, [r7, #12]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	331a      	adds	r3, #26
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	b292      	uxth	r2, r2
 80092c6:	4611      	mov	r1, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7ff f85a 	bl	8008382 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d109      	bne.n	80092ea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f103 0214 	add.w	r2, r3, #20
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	0c1b      	lsrs	r3, r3, #16
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7ff f84c 	bl	8008382 <st_word>
	}
}
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b086      	sub	sp, #24
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009300:	2100      	movs	r1, #0
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff fe2f 	bl	8008f66 <dir_sdi>
 8009308:	4603      	mov	r3, r0
 800930a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <dir_find+0x24>
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	e03e      	b.n	8009394 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	4619      	mov	r1, r3
 800931c:	6938      	ldr	r0, [r7, #16]
 800931e:	f7ff faa5 	bl	800886c <move_window>
 8009322:	4603      	mov	r3, r0
 8009324:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009326:	7dfb      	ldrb	r3, [r7, #23]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d12f      	bne.n	800938c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009334:	7bfb      	ldrb	r3, [r7, #15]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d102      	bne.n	8009340 <dir_find+0x4e>
 800933a:	2304      	movs	r3, #4
 800933c:	75fb      	strb	r3, [r7, #23]
 800933e:	e028      	b.n	8009392 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	330b      	adds	r3, #11
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800934c:	b2da      	uxtb	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	330b      	adds	r3, #11
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	f003 0308 	and.w	r3, r3, #8
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10a      	bne.n	8009378 <dir_find+0x86>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a18      	ldr	r0, [r3, #32]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3324      	adds	r3, #36	@ 0x24
 800936a:	220b      	movs	r2, #11
 800936c:	4619      	mov	r1, r3
 800936e:	f7ff f88b 	bl	8008488 <mem_cmp>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009378:	2100      	movs	r1, #0
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff fe6e 	bl	800905c <dir_next>
 8009380:	4603      	mov	r3, r0
 8009382:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d0c5      	beq.n	8009316 <dir_find+0x24>
 800938a:	e002      	b.n	8009392 <dir_find+0xa0>
		if (res != FR_OK) break;
 800938c:	bf00      	nop
 800938e:	e000      	b.n	8009392 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009390:	bf00      	nop

	return res;
 8009392:	7dfb      	ldrb	r3, [r7, #23]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80093aa:	2101      	movs	r1, #1
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff ff1a 	bl	80091e6 <dir_alloc>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d11c      	bne.n	80093f6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	4619      	mov	r1, r3
 80093c2:	68b8      	ldr	r0, [r7, #8]
 80093c4:	f7ff fa52 	bl	800886c <move_window>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d111      	bne.n	80093f6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	2220      	movs	r2, #32
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff f839 	bl	8008452 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a18      	ldr	r0, [r3, #32]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3324      	adds	r3, #36	@ 0x24
 80093e8:	220b      	movs	r2, #11
 80093ea:	4619      	mov	r1, r3
 80093ec:	f7ff f810 	bl	8008410 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	2201      	movs	r2, #1
 80093f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60fb      	str	r3, [r7, #12]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3324      	adds	r3, #36	@ 0x24
 8009414:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009416:	220b      	movs	r2, #11
 8009418:	2120      	movs	r1, #32
 800941a:	68b8      	ldr	r0, [r7, #8]
 800941c:	f7ff f819 	bl	8008452 <mem_set>
	si = i = 0; ni = 8;
 8009420:	2300      	movs	r3, #0
 8009422:	613b      	str	r3, [r7, #16]
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	61fb      	str	r3, [r7, #28]
 8009428:	2308      	movs	r3, #8
 800942a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	61fa      	str	r2, [r7, #28]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	4413      	add	r3, r2
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800943a:	7efb      	ldrb	r3, [r7, #27]
 800943c:	2b20      	cmp	r3, #32
 800943e:	d94e      	bls.n	80094de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009440:	7efb      	ldrb	r3, [r7, #27]
 8009442:	2b2f      	cmp	r3, #47	@ 0x2f
 8009444:	d006      	beq.n	8009454 <create_name+0x54>
 8009446:	7efb      	ldrb	r3, [r7, #27]
 8009448:	2b5c      	cmp	r3, #92	@ 0x5c
 800944a:	d110      	bne.n	800946e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800944c:	e002      	b.n	8009454 <create_name+0x54>
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	3301      	adds	r3, #1
 8009452:	61fb      	str	r3, [r7, #28]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	4413      	add	r3, r2
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b2f      	cmp	r3, #47	@ 0x2f
 800945e:	d0f6      	beq.n	800944e <create_name+0x4e>
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b5c      	cmp	r3, #92	@ 0x5c
 800946a:	d0f0      	beq.n	800944e <create_name+0x4e>
			break;
 800946c:	e038      	b.n	80094e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800946e:	7efb      	ldrb	r3, [r7, #27]
 8009470:	2b2e      	cmp	r3, #46	@ 0x2e
 8009472:	d003      	beq.n	800947c <create_name+0x7c>
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	429a      	cmp	r2, r3
 800947a:	d30c      	bcc.n	8009496 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2b0b      	cmp	r3, #11
 8009480:	d002      	beq.n	8009488 <create_name+0x88>
 8009482:	7efb      	ldrb	r3, [r7, #27]
 8009484:	2b2e      	cmp	r3, #46	@ 0x2e
 8009486:	d001      	beq.n	800948c <create_name+0x8c>
 8009488:	2306      	movs	r3, #6
 800948a:	e044      	b.n	8009516 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800948c:	2308      	movs	r3, #8
 800948e:	613b      	str	r3, [r7, #16]
 8009490:	230b      	movs	r3, #11
 8009492:	617b      	str	r3, [r7, #20]
			continue;
 8009494:	e022      	b.n	80094dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009496:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800949a:	2b00      	cmp	r3, #0
 800949c:	da04      	bge.n	80094a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800949e:	7efb      	ldrb	r3, [r7, #27]
 80094a0:	3b80      	subs	r3, #128	@ 0x80
 80094a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009520 <create_name+0x120>)
 80094a4:	5cd3      	ldrb	r3, [r2, r3]
 80094a6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80094a8:	7efb      	ldrb	r3, [r7, #27]
 80094aa:	4619      	mov	r1, r3
 80094ac:	481d      	ldr	r0, [pc, #116]	@ (8009524 <create_name+0x124>)
 80094ae:	f7ff f812 	bl	80084d6 <chk_chr>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <create_name+0xbc>
 80094b8:	2306      	movs	r3, #6
 80094ba:	e02c      	b.n	8009516 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80094bc:	7efb      	ldrb	r3, [r7, #27]
 80094be:	2b60      	cmp	r3, #96	@ 0x60
 80094c0:	d905      	bls.n	80094ce <create_name+0xce>
 80094c2:	7efb      	ldrb	r3, [r7, #27]
 80094c4:	2b7a      	cmp	r3, #122	@ 0x7a
 80094c6:	d802      	bhi.n	80094ce <create_name+0xce>
 80094c8:	7efb      	ldrb	r3, [r7, #27]
 80094ca:	3b20      	subs	r3, #32
 80094cc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	613a      	str	r2, [r7, #16]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	4413      	add	r3, r2
 80094d8:	7efa      	ldrb	r2, [r7, #27]
 80094da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80094dc:	e7a6      	b.n	800942c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80094de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	441a      	add	r2, r3
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <create_name+0xf4>
 80094f0:	2306      	movs	r3, #6
 80094f2:	e010      	b.n	8009516 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2be5      	cmp	r3, #229	@ 0xe5
 80094fa:	d102      	bne.n	8009502 <create_name+0x102>
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2205      	movs	r2, #5
 8009500:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009502:	7efb      	ldrb	r3, [r7, #27]
 8009504:	2b20      	cmp	r3, #32
 8009506:	d801      	bhi.n	800950c <create_name+0x10c>
 8009508:	2204      	movs	r2, #4
 800950a:	e000      	b.n	800950e <create_name+0x10e>
 800950c:	2200      	movs	r2, #0
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	330b      	adds	r3, #11
 8009512:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009514:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009516:	4618      	mov	r0, r3
 8009518:	3720      	adds	r7, #32
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	0800c2c0 	.word	0x0800c2c0
 8009524:	0800c234 	.word	0x0800c234

08009528 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800953c:	e002      	b.n	8009544 <follow_path+0x1c>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	3301      	adds	r3, #1
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2b2f      	cmp	r3, #47	@ 0x2f
 800954a:	d0f8      	beq.n	800953e <follow_path+0x16>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b5c      	cmp	r3, #92	@ 0x5c
 8009552:	d0f4      	beq.n	800953e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	2200      	movs	r2, #0
 8009558:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b1f      	cmp	r3, #31
 8009560:	d80a      	bhi.n	8009578 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2280      	movs	r2, #128	@ 0x80
 8009566:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800956a:	2100      	movs	r1, #0
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7ff fcfa 	bl	8008f66 <dir_sdi>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]
 8009576:	e043      	b.n	8009600 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009578:	463b      	mov	r3, r7
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7ff ff3f 	bl	8009400 <create_name>
 8009582:	4603      	mov	r3, r0
 8009584:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009586:	7dfb      	ldrb	r3, [r7, #23]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d134      	bne.n	80095f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7ff feb0 	bl	80092f2 <dir_find>
 8009592:	4603      	mov	r3, r0
 8009594:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800959c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00a      	beq.n	80095ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d127      	bne.n	80095fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80095aa:	7afb      	ldrb	r3, [r7, #11]
 80095ac:	f003 0304 	and.w	r3, r3, #4
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d122      	bne.n	80095fa <follow_path+0xd2>
 80095b4:	2305      	movs	r3, #5
 80095b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80095b8:	e01f      	b.n	80095fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80095ba:	7afb      	ldrb	r3, [r7, #11]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d11c      	bne.n	80095fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	799b      	ldrb	r3, [r3, #6]
 80095c8:	f003 0310 	and.w	r3, r3, #16
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80095d0:	2305      	movs	r3, #5
 80095d2:	75fb      	strb	r3, [r7, #23]
 80095d4:	e014      	b.n	8009600 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e4:	4413      	add	r3, r2
 80095e6:	4619      	mov	r1, r3
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f7ff fe43 	bl	8009274 <ld_clust>
 80095ee:	4602      	mov	r2, r0
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80095f4:	e7c0      	b.n	8009578 <follow_path+0x50>
			if (res != FR_OK) break;
 80095f6:	bf00      	nop
 80095f8:	e002      	b.n	8009600 <follow_path+0xd8>
				break;
 80095fa:	bf00      	nop
 80095fc:	e000      	b.n	8009600 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80095fe:	bf00      	nop
			}
		}
	}

	return res;
 8009600:	7dfb      	ldrb	r3, [r7, #23]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3718      	adds	r7, #24
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800960a:	b480      	push	{r7}
 800960c:	b087      	sub	sp, #28
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009612:	f04f 33ff 	mov.w	r3, #4294967295
 8009616:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d031      	beq.n	8009684 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	617b      	str	r3, [r7, #20]
 8009626:	e002      	b.n	800962e <get_ldnumber+0x24>
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	3301      	adds	r3, #1
 800962c:	617b      	str	r3, [r7, #20]
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	2b20      	cmp	r3, #32
 8009634:	d903      	bls.n	800963e <get_ldnumber+0x34>
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	2b3a      	cmp	r3, #58	@ 0x3a
 800963c:	d1f4      	bne.n	8009628 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b3a      	cmp	r3, #58	@ 0x3a
 8009644:	d11c      	bne.n	8009680 <get_ldnumber+0x76>
			tp = *path;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	60fa      	str	r2, [r7, #12]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	3b30      	subs	r3, #48	@ 0x30
 8009656:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2b09      	cmp	r3, #9
 800965c:	d80e      	bhi.n	800967c <get_ldnumber+0x72>
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	429a      	cmp	r2, r3
 8009664:	d10a      	bne.n	800967c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d107      	bne.n	800967c <get_ldnumber+0x72>
					vol = (int)i;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	3301      	adds	r3, #1
 8009674:	617b      	str	r3, [r7, #20]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	e002      	b.n	8009686 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009680:	2300      	movs	r3, #0
 8009682:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009684:	693b      	ldr	r3, [r7, #16]
}
 8009686:	4618      	mov	r0, r3
 8009688:	371c      	adds	r7, #28
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
	...

08009694 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	70da      	strb	r2, [r3, #3]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f04f 32ff 	mov.w	r2, #4294967295
 80096aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff f8dc 	bl	800886c <move_window>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <check_fs+0x2a>
 80096ba:	2304      	movs	r3, #4
 80096bc:	e038      	b.n	8009730 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3330      	adds	r3, #48	@ 0x30
 80096c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe fe20 	bl	800830c <ld_word>
 80096cc:	4603      	mov	r3, r0
 80096ce:	461a      	mov	r2, r3
 80096d0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d001      	beq.n	80096dc <check_fs+0x48>
 80096d8:	2303      	movs	r3, #3
 80096da:	e029      	b.n	8009730 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096e2:	2be9      	cmp	r3, #233	@ 0xe9
 80096e4:	d009      	beq.n	80096fa <check_fs+0x66>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096ec:	2beb      	cmp	r3, #235	@ 0xeb
 80096ee:	d11e      	bne.n	800972e <check_fs+0x9a>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80096f6:	2b90      	cmp	r3, #144	@ 0x90
 80096f8:	d119      	bne.n	800972e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3330      	adds	r3, #48	@ 0x30
 80096fe:	3336      	adds	r3, #54	@ 0x36
 8009700:	4618      	mov	r0, r3
 8009702:	f7fe fe1b 	bl	800833c <ld_dword>
 8009706:	4603      	mov	r3, r0
 8009708:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800970c:	4a0a      	ldr	r2, [pc, #40]	@ (8009738 <check_fs+0xa4>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d101      	bne.n	8009716 <check_fs+0x82>
 8009712:	2300      	movs	r3, #0
 8009714:	e00c      	b.n	8009730 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3330      	adds	r3, #48	@ 0x30
 800971a:	3352      	adds	r3, #82	@ 0x52
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fe0d 	bl	800833c <ld_dword>
 8009722:	4603      	mov	r3, r0
 8009724:	4a05      	ldr	r2, [pc, #20]	@ (800973c <check_fs+0xa8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d101      	bne.n	800972e <check_fs+0x9a>
 800972a:	2300      	movs	r3, #0
 800972c:	e000      	b.n	8009730 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800972e:	2302      	movs	r3, #2
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	00544146 	.word	0x00544146
 800973c:	33544146 	.word	0x33544146

08009740 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b096      	sub	sp, #88	@ 0x58
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2200      	movs	r2, #0
 8009752:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f7ff ff58 	bl	800960a <get_ldnumber>
 800975a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800975c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800975e:	2b00      	cmp	r3, #0
 8009760:	da01      	bge.n	8009766 <find_volume+0x26>
 8009762:	230b      	movs	r3, #11
 8009764:	e22d      	b.n	8009bc2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009766:	4aa1      	ldr	r2, [pc, #644]	@ (80099ec <find_volume+0x2ac>)
 8009768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800976a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800976e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <find_volume+0x3a>
 8009776:	230c      	movs	r3, #12
 8009778:	e223      	b.n	8009bc2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800977e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009780:	79fb      	ldrb	r3, [r7, #7]
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01a      	beq.n	80097c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	4618      	mov	r0, r3
 8009796:	f7fe fd1b 	bl	80081d0 <disk_status>
 800979a:	4603      	mov	r3, r0
 800979c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80097a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10c      	bne.n	80097c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80097ac:	79fb      	ldrb	r3, [r7, #7]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d007      	beq.n	80097c2 <find_volume+0x82>
 80097b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80097be:	230a      	movs	r3, #10
 80097c0:	e1ff      	b.n	8009bc2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80097c2:	2300      	movs	r3, #0
 80097c4:	e1fd      	b.n	8009bc2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80097c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c8:	2200      	movs	r2, #0
 80097ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80097cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80097d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fe fd13 	bl	8008204 <disk_initialize>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80097e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80097f0:	2303      	movs	r3, #3
 80097f2:	e1e6      	b.n	8009bc2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d007      	beq.n	800980a <find_volume+0xca>
 80097fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80097fe:	f003 0304 	and.w	r3, r3, #4
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009806:	230a      	movs	r3, #10
 8009808:	e1db      	b.n	8009bc2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800980e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009810:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009812:	f7ff ff3f 	bl	8009694 <check_fs>
 8009816:	4603      	mov	r3, r0
 8009818:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800981c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009820:	2b02      	cmp	r3, #2
 8009822:	d149      	bne.n	80098b8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009824:	2300      	movs	r3, #0
 8009826:	643b      	str	r3, [r7, #64]	@ 0x40
 8009828:	e01e      	b.n	8009868 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009832:	011b      	lsls	r3, r3, #4
 8009834:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009838:	4413      	add	r3, r2
 800983a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800983c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983e:	3304      	adds	r3, #4
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d006      	beq.n	8009854 <find_volume+0x114>
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	3308      	adds	r3, #8
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe fd76 	bl	800833c <ld_dword>
 8009850:	4602      	mov	r2, r0
 8009852:	e000      	b.n	8009856 <find_volume+0x116>
 8009854:	2200      	movs	r2, #0
 8009856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	3358      	adds	r3, #88	@ 0x58
 800985c:	443b      	add	r3, r7
 800985e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009864:	3301      	adds	r3, #1
 8009866:	643b      	str	r3, [r7, #64]	@ 0x40
 8009868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800986a:	2b03      	cmp	r3, #3
 800986c:	d9dd      	bls.n	800982a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800986e:	2300      	movs	r3, #0
 8009870:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <find_volume+0x13e>
 8009878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800987a:	3b01      	subs	r3, #1
 800987c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800987e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	3358      	adds	r3, #88	@ 0x58
 8009884:	443b      	add	r3, r7
 8009886:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800988a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800988c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <find_volume+0x15e>
 8009892:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009894:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009896:	f7ff fefd 	bl	8009694 <check_fs>
 800989a:	4603      	mov	r3, r0
 800989c:	e000      	b.n	80098a0 <find_volume+0x160>
 800989e:	2303      	movs	r3, #3
 80098a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80098a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d905      	bls.n	80098b8 <find_volume+0x178>
 80098ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098ae:	3301      	adds	r3, #1
 80098b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80098b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d9e2      	bls.n	800987e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80098b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80098bc:	2b04      	cmp	r3, #4
 80098be:	d101      	bne.n	80098c4 <find_volume+0x184>
 80098c0:	2301      	movs	r3, #1
 80098c2:	e17e      	b.n	8009bc2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80098c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d901      	bls.n	80098d0 <find_volume+0x190>
 80098cc:	230d      	movs	r3, #13
 80098ce:	e178      	b.n	8009bc2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80098d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d2:	3330      	adds	r3, #48	@ 0x30
 80098d4:	330b      	adds	r3, #11
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe fd18 	bl	800830c <ld_word>
 80098dc:	4603      	mov	r3, r0
 80098de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098e2:	d001      	beq.n	80098e8 <find_volume+0x1a8>
 80098e4:	230d      	movs	r3, #13
 80098e6:	e16c      	b.n	8009bc2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80098e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ea:	3330      	adds	r3, #48	@ 0x30
 80098ec:	3316      	adds	r3, #22
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fd0c 	bl	800830c <ld_word>
 80098f4:	4603      	mov	r3, r0
 80098f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80098f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d106      	bne.n	800990c <find_volume+0x1cc>
 80098fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009900:	3330      	adds	r3, #48	@ 0x30
 8009902:	3324      	adds	r3, #36	@ 0x24
 8009904:	4618      	mov	r0, r3
 8009906:	f7fe fd19 	bl	800833c <ld_dword>
 800990a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009910:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009914:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800991c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991e:	789b      	ldrb	r3, [r3, #2]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d005      	beq.n	8009930 <find_volume+0x1f0>
 8009924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009926:	789b      	ldrb	r3, [r3, #2]
 8009928:	2b02      	cmp	r3, #2
 800992a:	d001      	beq.n	8009930 <find_volume+0x1f0>
 800992c:	230d      	movs	r3, #13
 800992e:	e148      	b.n	8009bc2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009932:	789b      	ldrb	r3, [r3, #2]
 8009934:	461a      	mov	r2, r3
 8009936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009938:	fb02 f303 	mul.w	r3, r2, r3
 800993c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009944:	461a      	mov	r2, r3
 8009946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009948:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800994a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994c:	895b      	ldrh	r3, [r3, #10]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d008      	beq.n	8009964 <find_volume+0x224>
 8009952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009954:	895b      	ldrh	r3, [r3, #10]
 8009956:	461a      	mov	r2, r3
 8009958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995a:	895b      	ldrh	r3, [r3, #10]
 800995c:	3b01      	subs	r3, #1
 800995e:	4013      	ands	r3, r2
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <find_volume+0x228>
 8009964:	230d      	movs	r3, #13
 8009966:	e12c      	b.n	8009bc2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996a:	3330      	adds	r3, #48	@ 0x30
 800996c:	3311      	adds	r3, #17
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe fccc 	bl	800830c <ld_word>
 8009974:	4603      	mov	r3, r0
 8009976:	461a      	mov	r2, r3
 8009978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800997c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997e:	891b      	ldrh	r3, [r3, #8]
 8009980:	f003 030f 	and.w	r3, r3, #15
 8009984:	b29b      	uxth	r3, r3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <find_volume+0x24e>
 800998a:	230d      	movs	r3, #13
 800998c:	e119      	b.n	8009bc2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800998e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009990:	3330      	adds	r3, #48	@ 0x30
 8009992:	3313      	adds	r3, #19
 8009994:	4618      	mov	r0, r3
 8009996:	f7fe fcb9 	bl	800830c <ld_word>
 800999a:	4603      	mov	r3, r0
 800999c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800999e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d106      	bne.n	80099b2 <find_volume+0x272>
 80099a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a6:	3330      	adds	r3, #48	@ 0x30
 80099a8:	3320      	adds	r3, #32
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fcc6 	bl	800833c <ld_dword>
 80099b0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80099b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b4:	3330      	adds	r3, #48	@ 0x30
 80099b6:	330e      	adds	r3, #14
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe fca7 	bl	800830c <ld_word>
 80099be:	4603      	mov	r3, r0
 80099c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80099c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <find_volume+0x28c>
 80099c8:	230d      	movs	r3, #13
 80099ca:	e0fa      	b.n	8009bc2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80099cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80099ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099d0:	4413      	add	r3, r2
 80099d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099d4:	8912      	ldrh	r2, [r2, #8]
 80099d6:	0912      	lsrs	r2, r2, #4
 80099d8:	b292      	uxth	r2, r2
 80099da:	4413      	add	r3, r2
 80099dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80099de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d204      	bcs.n	80099f0 <find_volume+0x2b0>
 80099e6:	230d      	movs	r3, #13
 80099e8:	e0eb      	b.n	8009bc2 <find_volume+0x482>
 80099ea:	bf00      	nop
 80099ec:	20016a30 	.word	0x20016a30
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80099f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099f8:	8952      	ldrh	r2, [r2, #10]
 80099fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80099fe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <find_volume+0x2ca>
 8009a06:	230d      	movs	r3, #13
 8009a08:	e0db      	b.n	8009bc2 <find_volume+0x482>
		fmt = FS_FAT32;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a12:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d802      	bhi.n	8009a20 <find_volume+0x2e0>
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a22:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d802      	bhi.n	8009a30 <find_volume+0x2f0>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a32:	1c9a      	adds	r2, r3, #2
 8009a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a36:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009a3c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009a3e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a42:	441a      	add	r2, r3
 8009a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a46:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009a48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4c:	441a      	add	r2, r3
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a50:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009a52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d11e      	bne.n	8009a98 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5c:	3330      	adds	r3, #48	@ 0x30
 8009a5e:	332a      	adds	r3, #42	@ 0x2a
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe fc53 	bl	800830c <ld_word>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <find_volume+0x330>
 8009a6c:	230d      	movs	r3, #13
 8009a6e:	e0a8      	b.n	8009bc2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a72:	891b      	ldrh	r3, [r3, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <find_volume+0x33c>
 8009a78:	230d      	movs	r3, #13
 8009a7a:	e0a2      	b.n	8009bc2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7e:	3330      	adds	r3, #48	@ 0x30
 8009a80:	332c      	adds	r3, #44	@ 0x2c
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fc5a 	bl	800833c <ld_dword>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a96:	e01f      	b.n	8009ad8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9a:	891b      	ldrh	r3, [r3, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <find_volume+0x364>
 8009aa0:	230d      	movs	r3, #13
 8009aa2:	e08e      	b.n	8009bc2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa6:	6a1a      	ldr	r2, [r3, #32]
 8009aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aaa:	441a      	add	r2, r3
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d103      	bne.n	8009ac0 <find_volume+0x380>
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	e00a      	b.n	8009ad6 <find_volume+0x396>
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac2:	695a      	ldr	r2, [r3, #20]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	4413      	add	r3, r2
 8009aca:	085a      	lsrs	r2, r3, #1
 8009acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009ad6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ada:	699a      	ldr	r2, [r3, #24]
 8009adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ade:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009ae2:	0a5b      	lsrs	r3, r3, #9
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d201      	bcs.n	8009aec <find_volume+0x3ac>
 8009ae8:	230d      	movs	r3, #13
 8009aea:	e06a      	b.n	8009bc2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aee:	f04f 32ff 	mov.w	r2, #4294967295
 8009af2:	611a      	str	r2, [r3, #16]
 8009af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af6:	691a      	ldr	r2, [r3, #16]
 8009af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	2280      	movs	r2, #128	@ 0x80
 8009b00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009b02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d149      	bne.n	8009b9e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0c:	3330      	adds	r3, #48	@ 0x30
 8009b0e:	3330      	adds	r3, #48	@ 0x30
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fe fbfb 	bl	800830c <ld_word>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d140      	bne.n	8009b9e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b1e:	3301      	adds	r3, #1
 8009b20:	4619      	mov	r1, r3
 8009b22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b24:	f7fe fea2 	bl	800886c <move_window>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d137      	bne.n	8009b9e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b30:	2200      	movs	r2, #0
 8009b32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b36:	3330      	adds	r3, #48	@ 0x30
 8009b38:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe fbe5 	bl	800830c <ld_word>
 8009b42:	4603      	mov	r3, r0
 8009b44:	461a      	mov	r2, r3
 8009b46:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d127      	bne.n	8009b9e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b50:	3330      	adds	r3, #48	@ 0x30
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe fbf2 	bl	800833c <ld_dword>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8009bcc <find_volume+0x48c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d11e      	bne.n	8009b9e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b62:	3330      	adds	r3, #48	@ 0x30
 8009b64:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe fbe7 	bl	800833c <ld_dword>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	4a17      	ldr	r2, [pc, #92]	@ (8009bd0 <find_volume+0x490>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d113      	bne.n	8009b9e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b78:	3330      	adds	r3, #48	@ 0x30
 8009b7a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe fbdc 	bl	800833c <ld_dword>
 8009b84:	4602      	mov	r2, r0
 8009b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b88:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	3330      	adds	r3, #48	@ 0x30
 8009b8e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fbd2 	bl	800833c <ld_dword>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009ba4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8009bd4 <find_volume+0x494>)
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	3301      	adds	r3, #1
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	4b09      	ldr	r3, [pc, #36]	@ (8009bd4 <find_volume+0x494>)
 8009bb0:	801a      	strh	r2, [r3, #0]
 8009bb2:	4b08      	ldr	r3, [pc, #32]	@ (8009bd4 <find_volume+0x494>)
 8009bb4:	881a      	ldrh	r2, [r3, #0]
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009bba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009bbc:	f7fe fdee 	bl	800879c <clear_lock>
#endif
	return FR_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3758      	adds	r7, #88	@ 0x58
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	41615252 	.word	0x41615252
 8009bd0:	61417272 	.word	0x61417272
 8009bd4:	20016a34 	.word	0x20016a34

08009bd8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009be2:	2309      	movs	r3, #9
 8009be4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d01c      	beq.n	8009c26 <validate+0x4e>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d018      	beq.n	8009c26 <validate+0x4e>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d013      	beq.n	8009c26 <validate+0x4e>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	889a      	ldrh	r2, [r3, #4]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	88db      	ldrh	r3, [r3, #6]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d10c      	bne.n	8009c26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	785b      	ldrb	r3, [r3, #1]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe fadc 	bl	80081d0 <disk_status>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <validate+0x4e>
			res = FR_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <validate+0x5a>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	e000      	b.n	8009c34 <validate+0x5c>
 8009c32:	2300      	movs	r3, #0
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	6013      	str	r3, [r2, #0]
	return res;
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
	...

08009c44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009c56:	f107 0310 	add.w	r3, r7, #16
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7ff fcd5 	bl	800960a <get_ldnumber>
 8009c60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	da01      	bge.n	8009c6c <f_mount+0x28>
 8009c68:	230b      	movs	r3, #11
 8009c6a:	e02b      	b.n	8009cc4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009c6c:	4a17      	ldr	r2, [pc, #92]	@ (8009ccc <f_mount+0x88>)
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d005      	beq.n	8009c88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009c7c:	69b8      	ldr	r0, [r7, #24]
 8009c7e:	f7fe fd8d 	bl	800879c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	2200      	movs	r2, #0
 8009c86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	490d      	ldr	r1, [pc, #52]	@ (8009ccc <f_mount+0x88>)
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <f_mount+0x66>
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d001      	beq.n	8009cae <f_mount+0x6a>
 8009caa:	2300      	movs	r3, #0
 8009cac:	e00a      	b.n	8009cc4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009cae:	f107 010c 	add.w	r1, r7, #12
 8009cb2:	f107 0308 	add.w	r3, r7, #8
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7ff fd41 	bl	8009740 <find_volume>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3720      	adds	r7, #32
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	20016a30 	.word	0x20016a30

08009cd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b098      	sub	sp, #96	@ 0x60
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <f_open+0x18>
 8009ce4:	2309      	movs	r3, #9
 8009ce6:	e1a9      	b.n	800a03c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009cf0:	79fa      	ldrb	r2, [r7, #7]
 8009cf2:	f107 0110 	add.w	r1, r7, #16
 8009cf6:	f107 0308 	add.w	r3, r7, #8
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7ff fd20 	bl	8009740 <find_volume>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009d06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f040 818d 	bne.w	800a02a <f_open+0x35a>
		dj.obj.fs = fs;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	f107 0314 	add.w	r3, r7, #20
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff fc03 	bl	8009528 <follow_path>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009d28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d118      	bne.n	8009d62 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009d30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d34:	b25b      	sxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da03      	bge.n	8009d42 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009d3a:	2306      	movs	r3, #6
 8009d3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009d40:	e00f      	b.n	8009d62 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	bf8c      	ite	hi
 8009d48:	2301      	movhi	r3, #1
 8009d4a:	2300      	movls	r3, #0
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f107 0314 	add.w	r3, r7, #20
 8009d54:	4611      	mov	r1, r2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fbd8 	bl	800850c <chk_lock>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	f003 031c 	and.w	r3, r3, #28
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d07f      	beq.n	8009e6c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d017      	beq.n	8009da4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009d74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d10e      	bne.n	8009d9a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009d7c:	f7fe fc22 	bl	80085c4 <enq_lock>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d006      	beq.n	8009d94 <f_open+0xc4>
 8009d86:	f107 0314 	add.w	r3, r7, #20
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff fb06 	bl	800939c <dir_register>
 8009d90:	4603      	mov	r3, r0
 8009d92:	e000      	b.n	8009d96 <f_open+0xc6>
 8009d94:	2312      	movs	r3, #18
 8009d96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009d9a:	79fb      	ldrb	r3, [r7, #7]
 8009d9c:	f043 0308 	orr.w	r3, r3, #8
 8009da0:	71fb      	strb	r3, [r7, #7]
 8009da2:	e010      	b.n	8009dc6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009da4:	7ebb      	ldrb	r3, [r7, #26]
 8009da6:	f003 0311 	and.w	r3, r3, #17
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <f_open+0xe6>
					res = FR_DENIED;
 8009dae:	2307      	movs	r3, #7
 8009db0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009db4:	e007      	b.n	8009dc6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	f003 0304 	and.w	r3, r3, #4
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <f_open+0xf6>
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d168      	bne.n	8009ea0 <f_open+0x1d0>
 8009dce:	79fb      	ldrb	r3, [r7, #7]
 8009dd0:	f003 0308 	and.w	r3, r3, #8
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d063      	beq.n	8009ea0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009dd8:	f7fd fcbe 	bl	8007758 <get_fattime>
 8009ddc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de0:	330e      	adds	r3, #14
 8009de2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe fae7 	bl	80083b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dec:	3316      	adds	r3, #22
 8009dee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe fae1 	bl	80083b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df8:	330b      	adds	r3, #11
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e02:	4611      	mov	r1, r2
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7ff fa35 	bl	8009274 <ld_clust>
 8009e0a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009e10:	2200      	movs	r2, #0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7ff fa4d 	bl	80092b2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e1a:	331c      	adds	r3, #28
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe faca 	bl	80083b8 <st_dword>
					fs->wflag = 1;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2201      	movs	r2, #1
 8009e28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d037      	beq.n	8009ea0 <f_open+0x1d0>
						dw = fs->winsect;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e34:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009e36:	f107 0314 	add.w	r3, r7, #20
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe ff60 	bl	8008d04 <remove_chain>
 8009e44:	4603      	mov	r3, r0
 8009e46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009e4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d126      	bne.n	8009ea0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fd08 	bl	800886c <move_window>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e66:	3a01      	subs	r2, #1
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	e019      	b.n	8009ea0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009e6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d115      	bne.n	8009ea0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009e74:	7ebb      	ldrb	r3, [r7, #26]
 8009e76:	f003 0310 	and.w	r3, r3, #16
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <f_open+0x1b6>
					res = FR_NO_FILE;
 8009e7e:	2304      	movs	r3, #4
 8009e80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009e84:	e00c      	b.n	8009ea0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	f003 0302 	and.w	r3, r3, #2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d007      	beq.n	8009ea0 <f_open+0x1d0>
 8009e90:	7ebb      	ldrb	r3, [r7, #26]
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <f_open+0x1d0>
						res = FR_DENIED;
 8009e9a:	2307      	movs	r3, #7
 8009e9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d126      	bne.n	8009ef6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009ea8:	79fb      	ldrb	r3, [r7, #7]
 8009eaa:	f003 0308 	and.w	r3, r3, #8
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eb8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009ec2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	bf8c      	ite	hi
 8009ece:	2301      	movhi	r3, #1
 8009ed0:	2300      	movls	r3, #0
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	f107 0314 	add.w	r3, r7, #20
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe fb93 	bl	8008608 <inc_lock>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d102      	bne.n	8009ef6 <f_open+0x226>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f040 8095 	bne.w	800a02a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f04:	4611      	mov	r1, r2
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff f9b4 	bl	8009274 <ld_clust>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f14:	331c      	adds	r3, #28
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe fa10 	bl	800833c <ld_dword>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	88da      	ldrh	r2, [r3, #6]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	79fa      	ldrb	r2, [r7, #7]
 8009f3a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3330      	adds	r3, #48	@ 0x30
 8009f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe fa7a 	bl	8008452 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	f003 0320 	and.w	r3, r3, #32
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d060      	beq.n	800a02a <f_open+0x35a>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d05c      	beq.n	800a02a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	895b      	ldrh	r3, [r3, #10]
 8009f7c:	025b      	lsls	r3, r3, #9
 8009f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f8c:	e016      	b.n	8009fbc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fe fd25 	bl	80089e2 <get_fat>
 8009f98:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009f9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d802      	bhi.n	8009fa6 <f_open+0x2d6>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009fa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fac:	d102      	bne.n	8009fb4 <f_open+0x2e4>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009fb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d103      	bne.n	8009fcc <f_open+0x2fc>
 8009fc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d8e0      	bhi.n	8009f8e <f_open+0x2be>
				}
				fp->clust = clst;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fd0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009fd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d127      	bne.n	800a02a <f_open+0x35a>
 8009fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d022      	beq.n	800a02a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fe fcdb 	bl	80089a4 <clust2sect>
 8009fee:	6478      	str	r0, [r7, #68]	@ 0x44
 8009ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d103      	bne.n	8009ffe <f_open+0x32e>
						res = FR_INT_ERR;
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009ffc:	e015      	b.n	800a02a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a000:	0a5a      	lsrs	r2, r3, #9
 800a002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a004:	441a      	add	r2, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	7858      	ldrb	r0, [r3, #1]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a1a      	ldr	r2, [r3, #32]
 800a018:	2301      	movs	r3, #1
 800a01a:	f7fe f919 	bl	8008250 <disk_read>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <f_open+0x35a>
 800a024:	2301      	movs	r3, #1
 800a026:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a02a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <f_open+0x368>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a038:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3760      	adds	r7, #96	@ 0x60
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08e      	sub	sp, #56	@ 0x38
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f107 0214 	add.w	r2, r7, #20
 800a062:	4611      	mov	r1, r2
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fdb7 	bl	8009bd8 <validate>
 800a06a:	4603      	mov	r3, r0
 800a06c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a070:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a074:	2b00      	cmp	r3, #0
 800a076:	d107      	bne.n	800a088 <f_read+0x44>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	7d5b      	ldrb	r3, [r3, #21]
 800a07c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a080:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <f_read+0x4a>
 800a088:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a08c:	e115      	b.n	800a2ba <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	7d1b      	ldrb	r3, [r3, #20]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <f_read+0x5a>
 800a09a:	2307      	movs	r3, #7
 800a09c:	e10d      	b.n	800a2ba <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68da      	ldr	r2, [r3, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	f240 80fe 	bls.w	800a2b0 <f_read+0x26c>
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a0b8:	e0fa      	b.n	800a2b0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f040 80c6 	bne.w	800a254 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	0a5b      	lsrs	r3, r3, #9
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	8952      	ldrh	r2, [r2, #10]
 800a0d2:	3a01      	subs	r2, #1
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d12f      	bne.n	800a13e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d103      	bne.n	800a0ee <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0ec:	e013      	b.n	800a116 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d007      	beq.n	800a106 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7fe fefe 	bl	8008efe <clmt_clust>
 800a102:	6338      	str	r0, [r7, #48]	@ 0x30
 800a104:	e007      	b.n	800a116 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	69db      	ldr	r3, [r3, #28]
 800a10c:	4619      	mov	r1, r3
 800a10e:	4610      	mov	r0, r2
 800a110:	f7fe fc67 	bl	80089e2 <get_fat>
 800a114:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d804      	bhi.n	800a126 <f_read+0xe2>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2202      	movs	r2, #2
 800a120:	755a      	strb	r2, [r3, #21]
 800a122:	2302      	movs	r3, #2
 800a124:	e0c9      	b.n	800a2ba <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d104      	bne.n	800a138 <f_read+0xf4>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2201      	movs	r2, #1
 800a132:	755a      	strb	r2, [r3, #21]
 800a134:	2301      	movs	r3, #1
 800a136:	e0c0      	b.n	800a2ba <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a13c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	4619      	mov	r1, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f7fe fc2c 	bl	80089a4 <clust2sect>
 800a14c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d104      	bne.n	800a15e <f_read+0x11a>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2202      	movs	r2, #2
 800a158:	755a      	strb	r2, [r3, #21]
 800a15a:	2302      	movs	r3, #2
 800a15c:	e0ad      	b.n	800a2ba <f_read+0x276>
			sect += csect;
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	4413      	add	r3, r2
 800a164:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	0a5b      	lsrs	r3, r3, #9
 800a16a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d039      	beq.n	800a1e6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a176:	4413      	add	r3, r2
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	8952      	ldrh	r2, [r2, #10]
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d905      	bls.n	800a18c <f_read+0x148>
					cc = fs->csize - csect;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	895b      	ldrh	r3, [r3, #10]
 800a184:	461a      	mov	r2, r3
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	7858      	ldrb	r0, [r3, #1]
 800a190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a192:	69ba      	ldr	r2, [r7, #24]
 800a194:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a196:	f7fe f85b 	bl	8008250 <disk_read>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d004      	beq.n	800a1aa <f_read+0x166>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	755a      	strb	r2, [r3, #21]
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e087      	b.n	800a2ba <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	7d1b      	ldrb	r3, [r3, #20]
 800a1ae:	b25b      	sxtb	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	da14      	bge.n	800a1de <f_read+0x19a>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6a1a      	ldr	r2, [r3, #32]
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d90d      	bls.n	800a1de <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a1a      	ldr	r2, [r3, #32]
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	025b      	lsls	r3, r3, #9
 800a1cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1ce:	18d0      	adds	r0, r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	3330      	adds	r3, #48	@ 0x30
 800a1d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1d8:	4619      	mov	r1, r3
 800a1da:	f7fe f919 	bl	8008410 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e0:	025b      	lsls	r3, r3, #9
 800a1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a1e4:	e050      	b.n	800a288 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	69ba      	ldr	r2, [r7, #24]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d02e      	beq.n	800a24e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	7d1b      	ldrb	r3, [r3, #20]
 800a1f4:	b25b      	sxtb	r3, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	da18      	bge.n	800a22c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	7858      	ldrb	r0, [r3, #1]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a1a      	ldr	r2, [r3, #32]
 800a208:	2301      	movs	r3, #1
 800a20a:	f7fe f841 	bl	8008290 <disk_write>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d004      	beq.n	800a21e <f_read+0x1da>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2201      	movs	r2, #1
 800a218:	755a      	strb	r2, [r3, #21]
 800a21a:	2301      	movs	r3, #1
 800a21c:	e04d      	b.n	800a2ba <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	7d1b      	ldrb	r3, [r3, #20]
 800a222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a226:	b2da      	uxtb	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	7858      	ldrb	r0, [r3, #1]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a236:	2301      	movs	r3, #1
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	f7fe f809 	bl	8008250 <disk_read>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d004      	beq.n	800a24e <f_read+0x20a>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2201      	movs	r2, #1
 800a248:	755a      	strb	r2, [r3, #21]
 800a24a:	2301      	movs	r3, #1
 800a24c:	e035      	b.n	800a2ba <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	69ba      	ldr	r2, [r7, #24]
 800a252:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a260:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	429a      	cmp	r2, r3
 800a268:	d901      	bls.n	800a26e <f_read+0x22a>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a27c:	4413      	add	r3, r2
 800a27e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a280:	4619      	mov	r1, r3
 800a282:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a284:	f7fe f8c4 	bl	8008410 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28c:	4413      	add	r3, r2
 800a28e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	699a      	ldr	r2, [r3, #24]
 800a294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a296:	441a      	add	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	619a      	str	r2, [r3, #24]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a2:	441a      	add	r2, r3
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	601a      	str	r2, [r3, #0]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f47f af01 	bne.w	800a0ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3738      	adds	r7, #56	@ 0x38
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b086      	sub	sp, #24
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f107 0208 	add.w	r2, r7, #8
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7ff fc80 	bl	8009bd8 <validate>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a2dc:	7dfb      	ldrb	r3, [r7, #23]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d168      	bne.n	800a3b4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	7d1b      	ldrb	r3, [r3, #20]
 800a2e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d062      	beq.n	800a3b4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	7d1b      	ldrb	r3, [r3, #20]
 800a2f2:	b25b      	sxtb	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	da15      	bge.n	800a324 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	7858      	ldrb	r0, [r3, #1]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1a      	ldr	r2, [r3, #32]
 800a306:	2301      	movs	r3, #1
 800a308:	f7fd ffc2 	bl	8008290 <disk_write>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <f_sync+0x54>
 800a312:	2301      	movs	r3, #1
 800a314:	e04f      	b.n	800a3b6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	7d1b      	ldrb	r3, [r3, #20]
 800a31a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a324:	f7fd fa18 	bl	8007758 <get_fattime>
 800a328:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a330:	4619      	mov	r1, r3
 800a332:	4610      	mov	r0, r2
 800a334:	f7fe fa9a 	bl	800886c <move_window>
 800a338:	4603      	mov	r3, r0
 800a33a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d138      	bne.n	800a3b4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a346:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	330b      	adds	r3, #11
 800a34c:	781a      	ldrb	r2, [r3, #0]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	330b      	adds	r3, #11
 800a352:	f042 0220 	orr.w	r2, r2, #32
 800a356:	b2d2      	uxtb	r2, r2
 800a358:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	461a      	mov	r2, r3
 800a364:	68f9      	ldr	r1, [r7, #12]
 800a366:	f7fe ffa4 	bl	80092b2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f103 021c 	add.w	r2, r3, #28
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	4619      	mov	r1, r3
 800a376:	4610      	mov	r0, r2
 800a378:	f7fe f81e 	bl	80083b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3316      	adds	r3, #22
 800a380:	6939      	ldr	r1, [r7, #16]
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe f818 	bl	80083b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3312      	adds	r3, #18
 800a38c:	2100      	movs	r1, #0
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fd fff7 	bl	8008382 <st_word>
					fs->wflag = 1;
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2201      	movs	r2, #1
 800a398:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fe fa93 	bl	80088c8 <sync_fs>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	7d1b      	ldrb	r3, [r3, #20]
 800a3aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff ff7b 	bl	800a2c2 <f_sync>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d118      	bne.n	800a408 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f107 0208 	add.w	r2, r7, #8
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff fbfa 	bl	8009bd8 <validate>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10c      	bne.n	800a408 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe f996 	bl	8008724 <dec_lock>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d102      	bne.n	800a408 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
	...

0800a414 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a422:	2301      	movs	r3, #1
 800a424:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a42a:	4b1f      	ldr	r3, [pc, #124]	@ (800a4a8 <FATFS_LinkDriverEx+0x94>)
 800a42c:	7a5b      	ldrb	r3, [r3, #9]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d131      	bne.n	800a498 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a434:	4b1c      	ldr	r3, [pc, #112]	@ (800a4a8 <FATFS_LinkDriverEx+0x94>)
 800a436:	7a5b      	ldrb	r3, [r3, #9]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	461a      	mov	r2, r3
 800a43c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4a8 <FATFS_LinkDriverEx+0x94>)
 800a43e:	2100      	movs	r1, #0
 800a440:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a442:	4b19      	ldr	r3, [pc, #100]	@ (800a4a8 <FATFS_LinkDriverEx+0x94>)
 800a444:	7a5b      	ldrb	r3, [r3, #9]
 800a446:	b2db      	uxtb	r3, r3
 800a448:	4a17      	ldr	r2, [pc, #92]	@ (800a4a8 <FATFS_LinkDriverEx+0x94>)
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a452:	4b15      	ldr	r3, [pc, #84]	@ (800a4a8 <FATFS_LinkDriverEx+0x94>)
 800a454:	7a5b      	ldrb	r3, [r3, #9]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	4b13      	ldr	r3, [pc, #76]	@ (800a4a8 <FATFS_LinkDriverEx+0x94>)
 800a45c:	4413      	add	r3, r2
 800a45e:	79fa      	ldrb	r2, [r7, #7]
 800a460:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a462:	4b11      	ldr	r3, [pc, #68]	@ (800a4a8 <FATFS_LinkDriverEx+0x94>)
 800a464:	7a5b      	ldrb	r3, [r3, #9]
 800a466:	b2db      	uxtb	r3, r3
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	b2d1      	uxtb	r1, r2
 800a46c:	4a0e      	ldr	r2, [pc, #56]	@ (800a4a8 <FATFS_LinkDriverEx+0x94>)
 800a46e:	7251      	strb	r1, [r2, #9]
 800a470:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a472:	7dbb      	ldrb	r3, [r7, #22]
 800a474:	3330      	adds	r3, #48	@ 0x30
 800a476:	b2da      	uxtb	r2, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	3301      	adds	r3, #1
 800a480:	223a      	movs	r2, #58	@ 0x3a
 800a482:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	3302      	adds	r3, #2
 800a488:	222f      	movs	r2, #47	@ 0x2f
 800a48a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	3303      	adds	r3, #3
 800a490:	2200      	movs	r2, #0
 800a492:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a498:	7dfb      	ldrb	r3, [r7, #23]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	20016a58 	.word	0x20016a58

0800a4ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7ff ffaa 	bl	800a414 <FATFS_LinkDriverEx>
 800a4c0:	4603      	mov	r3, r0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <arm_rfft_32_fast_init_f32>:
 800a4cc:	b178      	cbz	r0, 800a4ee <arm_rfft_32_fast_init_f32+0x22>
 800a4ce:	b430      	push	{r4, r5}
 800a4d0:	4908      	ldr	r1, [pc, #32]	@ (800a4f4 <arm_rfft_32_fast_init_f32+0x28>)
 800a4d2:	4a09      	ldr	r2, [pc, #36]	@ (800a4f8 <arm_rfft_32_fast_init_f32+0x2c>)
 800a4d4:	2310      	movs	r3, #16
 800a4d6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a4da:	8003      	strh	r3, [r0, #0]
 800a4dc:	2520      	movs	r5, #32
 800a4de:	2414      	movs	r4, #20
 800a4e0:	4b06      	ldr	r3, [pc, #24]	@ (800a4fc <arm_rfft_32_fast_init_f32+0x30>)
 800a4e2:	8205      	strh	r5, [r0, #16]
 800a4e4:	8184      	strh	r4, [r0, #12]
 800a4e6:	6143      	str	r3, [r0, #20]
 800a4e8:	bc30      	pop	{r4, r5}
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	4770      	bx	lr
 800a4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f2:	4770      	bx	lr
 800a4f4:	0800d2f0 	.word	0x0800d2f0
 800a4f8:	08011c28 	.word	0x08011c28
 800a4fc:	0801a9a8 	.word	0x0801a9a8

0800a500 <arm_rfft_64_fast_init_f32>:
 800a500:	b178      	cbz	r0, 800a522 <arm_rfft_64_fast_init_f32+0x22>
 800a502:	b430      	push	{r4, r5}
 800a504:	4908      	ldr	r1, [pc, #32]	@ (800a528 <arm_rfft_64_fast_init_f32+0x28>)
 800a506:	4a09      	ldr	r2, [pc, #36]	@ (800a52c <arm_rfft_64_fast_init_f32+0x2c>)
 800a508:	2320      	movs	r3, #32
 800a50a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a50e:	8003      	strh	r3, [r0, #0]
 800a510:	2540      	movs	r5, #64	@ 0x40
 800a512:	2430      	movs	r4, #48	@ 0x30
 800a514:	4b06      	ldr	r3, [pc, #24]	@ (800a530 <arm_rfft_64_fast_init_f32+0x30>)
 800a516:	8205      	strh	r5, [r0, #16]
 800a518:	8184      	strh	r4, [r0, #12]
 800a51a:	6143      	str	r3, [r0, #20]
 800a51c:	bc30      	pop	{r4, r5}
 800a51e:	2000      	movs	r0, #0
 800a520:	4770      	bx	lr
 800a522:	f04f 30ff 	mov.w	r0, #4294967295
 800a526:	4770      	bx	lr
 800a528:	0800f448 	.word	0x0800f448
 800a52c:	080164a8 	.word	0x080164a8
 800a530:	0801f228 	.word	0x0801f228

0800a534 <arm_rfft_256_fast_init_f32>:
 800a534:	b180      	cbz	r0, 800a558 <arm_rfft_256_fast_init_f32+0x24>
 800a536:	b430      	push	{r4, r5}
 800a538:	4909      	ldr	r1, [pc, #36]	@ (800a560 <arm_rfft_256_fast_init_f32+0x2c>)
 800a53a:	4a0a      	ldr	r2, [pc, #40]	@ (800a564 <arm_rfft_256_fast_init_f32+0x30>)
 800a53c:	2380      	movs	r3, #128	@ 0x80
 800a53e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a542:	8003      	strh	r3, [r0, #0]
 800a544:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800a548:	24d0      	movs	r4, #208	@ 0xd0
 800a54a:	4b07      	ldr	r3, [pc, #28]	@ (800a568 <arm_rfft_256_fast_init_f32+0x34>)
 800a54c:	8205      	strh	r5, [r0, #16]
 800a54e:	8184      	strh	r4, [r0, #12]
 800a550:	6143      	str	r3, [r0, #20]
 800a552:	bc30      	pop	{r4, r5}
 800a554:	2000      	movs	r0, #0
 800a556:	4770      	bx	lr
 800a558:	f04f 30ff 	mov.w	r0, #4294967295
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	0800d150 	.word	0x0800d150
 800a564:	08011828 	.word	0x08011828
 800a568:	0801a5a8 	.word	0x0801a5a8

0800a56c <arm_rfft_512_fast_init_f32>:
 800a56c:	b190      	cbz	r0, 800a594 <arm_rfft_512_fast_init_f32+0x28>
 800a56e:	b430      	push	{r4, r5}
 800a570:	490a      	ldr	r1, [pc, #40]	@ (800a59c <arm_rfft_512_fast_init_f32+0x30>)
 800a572:	4a0b      	ldr	r2, [pc, #44]	@ (800a5a0 <arm_rfft_512_fast_init_f32+0x34>)
 800a574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a578:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a57c:	8003      	strh	r3, [r0, #0]
 800a57e:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800a582:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800a586:	4b07      	ldr	r3, [pc, #28]	@ (800a5a4 <arm_rfft_512_fast_init_f32+0x38>)
 800a588:	8205      	strh	r5, [r0, #16]
 800a58a:	8184      	strh	r4, [r0, #12]
 800a58c:	6143      	str	r3, [r0, #20]
 800a58e:	bc30      	pop	{r4, r5}
 800a590:	2000      	movs	r0, #0
 800a592:	4770      	bx	lr
 800a594:	f04f 30ff 	mov.w	r0, #4294967295
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	0800f0d8 	.word	0x0800f0d8
 800a5a0:	08015ca8 	.word	0x08015ca8
 800a5a4:	0801ea28 	.word	0x0801ea28

0800a5a8 <arm_rfft_1024_fast_init_f32>:
 800a5a8:	b190      	cbz	r0, 800a5d0 <arm_rfft_1024_fast_init_f32+0x28>
 800a5aa:	b430      	push	{r4, r5}
 800a5ac:	490a      	ldr	r1, [pc, #40]	@ (800a5d8 <arm_rfft_1024_fast_init_f32+0x30>)
 800a5ae:	4a0b      	ldr	r2, [pc, #44]	@ (800a5dc <arm_rfft_1024_fast_init_f32+0x34>)
 800a5b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5b4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a5b8:	8003      	strh	r3, [r0, #0]
 800a5ba:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800a5be:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800a5c2:	4b07      	ldr	r3, [pc, #28]	@ (800a5e0 <arm_rfft_1024_fast_init_f32+0x38>)
 800a5c4:	8205      	strh	r5, [r0, #16]
 800a5c6:	8184      	strh	r4, [r0, #12]
 800a5c8:	6143      	str	r3, [r0, #20]
 800a5ca:	bc30      	pop	{r4, r5}
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	4770      	bx	lr
 800a5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	0800f4a8 	.word	0x0800f4a8
 800a5dc:	080165a8 	.word	0x080165a8
 800a5e0:	080175a8 	.word	0x080175a8

0800a5e4 <arm_rfft_2048_fast_init_f32>:
 800a5e4:	b190      	cbz	r0, 800a60c <arm_rfft_2048_fast_init_f32+0x28>
 800a5e6:	b430      	push	{r4, r5}
 800a5e8:	490a      	ldr	r1, [pc, #40]	@ (800a614 <arm_rfft_2048_fast_init_f32+0x30>)
 800a5ea:	4a0b      	ldr	r2, [pc, #44]	@ (800a618 <arm_rfft_2048_fast_init_f32+0x34>)
 800a5ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5f0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a5f4:	8003      	strh	r3, [r0, #0]
 800a5f6:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800a5fa:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800a5fe:	4b07      	ldr	r3, [pc, #28]	@ (800a61c <arm_rfft_2048_fast_init_f32+0x38>)
 800a600:	8205      	strh	r5, [r0, #16]
 800a602:	8184      	strh	r4, [r0, #12]
 800a604:	6143      	str	r3, [r0, #20]
 800a606:	bc30      	pop	{r4, r5}
 800a608:	2000      	movs	r0, #0
 800a60a:	4770      	bx	lr
 800a60c:	f04f 30ff 	mov.w	r0, #4294967295
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	0800c340 	.word	0x0800c340
 800a618:	0800f828 	.word	0x0800f828
 800a61c:	080185a8 	.word	0x080185a8

0800a620 <arm_rfft_4096_fast_init_f32>:
 800a620:	b190      	cbz	r0, 800a648 <arm_rfft_4096_fast_init_f32+0x28>
 800a622:	b430      	push	{r4, r5}
 800a624:	490a      	ldr	r1, [pc, #40]	@ (800a650 <arm_rfft_4096_fast_init_f32+0x30>)
 800a626:	4a0b      	ldr	r2, [pc, #44]	@ (800a654 <arm_rfft_4096_fast_init_f32+0x34>)
 800a628:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a62c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a630:	8003      	strh	r3, [r0, #0]
 800a632:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800a636:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800a63a:	4b07      	ldr	r3, [pc, #28]	@ (800a658 <arm_rfft_4096_fast_init_f32+0x38>)
 800a63c:	8205      	strh	r5, [r0, #16]
 800a63e:	8184      	strh	r4, [r0, #12]
 800a640:	6143      	str	r3, [r0, #20]
 800a642:	bc30      	pop	{r4, r5}
 800a644:	2000      	movs	r0, #0
 800a646:	4770      	bx	lr
 800a648:	f04f 30ff 	mov.w	r0, #4294967295
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	0800d318 	.word	0x0800d318
 800a654:	08011ca8 	.word	0x08011ca8
 800a658:	0801aa28 	.word	0x0801aa28

0800a65c <arm_rfft_fast_init_f32>:
 800a65c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a660:	d01f      	beq.n	800a6a2 <arm_rfft_fast_init_f32+0x46>
 800a662:	d90b      	bls.n	800a67c <arm_rfft_fast_init_f32+0x20>
 800a664:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800a668:	d019      	beq.n	800a69e <arm_rfft_fast_init_f32+0x42>
 800a66a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800a66e:	d012      	beq.n	800a696 <arm_rfft_fast_init_f32+0x3a>
 800a670:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a674:	d00d      	beq.n	800a692 <arm_rfft_fast_init_f32+0x36>
 800a676:	f04f 30ff 	mov.w	r0, #4294967295
 800a67a:	4770      	bx	lr
 800a67c:	2940      	cmp	r1, #64	@ 0x40
 800a67e:	d00c      	beq.n	800a69a <arm_rfft_fast_init_f32+0x3e>
 800a680:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a684:	d003      	beq.n	800a68e <arm_rfft_fast_init_f32+0x32>
 800a686:	2920      	cmp	r1, #32
 800a688:	d1f5      	bne.n	800a676 <arm_rfft_fast_init_f32+0x1a>
 800a68a:	4b07      	ldr	r3, [pc, #28]	@ (800a6a8 <arm_rfft_fast_init_f32+0x4c>)
 800a68c:	4718      	bx	r3
 800a68e:	4b07      	ldr	r3, [pc, #28]	@ (800a6ac <arm_rfft_fast_init_f32+0x50>)
 800a690:	4718      	bx	r3
 800a692:	4b07      	ldr	r3, [pc, #28]	@ (800a6b0 <arm_rfft_fast_init_f32+0x54>)
 800a694:	4718      	bx	r3
 800a696:	4b07      	ldr	r3, [pc, #28]	@ (800a6b4 <arm_rfft_fast_init_f32+0x58>)
 800a698:	4718      	bx	r3
 800a69a:	4b07      	ldr	r3, [pc, #28]	@ (800a6b8 <arm_rfft_fast_init_f32+0x5c>)
 800a69c:	e7f6      	b.n	800a68c <arm_rfft_fast_init_f32+0x30>
 800a69e:	4b07      	ldr	r3, [pc, #28]	@ (800a6bc <arm_rfft_fast_init_f32+0x60>)
 800a6a0:	e7f4      	b.n	800a68c <arm_rfft_fast_init_f32+0x30>
 800a6a2:	4b07      	ldr	r3, [pc, #28]	@ (800a6c0 <arm_rfft_fast_init_f32+0x64>)
 800a6a4:	e7f2      	b.n	800a68c <arm_rfft_fast_init_f32+0x30>
 800a6a6:	bf00      	nop
 800a6a8:	0800a4cd 	.word	0x0800a4cd
 800a6ac:	0800a535 	.word	0x0800a535
 800a6b0:	0800a5a9 	.word	0x0800a5a9
 800a6b4:	0800a621 	.word	0x0800a621
 800a6b8:	0800a501 	.word	0x0800a501
 800a6bc:	0800a5e5 	.word	0x0800a5e5
 800a6c0:	0800a56d 	.word	0x0800a56d

0800a6c4 <stage_rfft_f32>:
 800a6c4:	b410      	push	{r4}
 800a6c6:	edd1 7a00 	vldr	s15, [r1]
 800a6ca:	ed91 7a01 	vldr	s14, [r1, #4]
 800a6ce:	8804      	ldrh	r4, [r0, #0]
 800a6d0:	6940      	ldr	r0, [r0, #20]
 800a6d2:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a6d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a6da:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800a6de:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a6e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6e6:	3c01      	subs	r4, #1
 800a6e8:	ee26 7a84 	vmul.f32	s14, s13, s8
 800a6ec:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a6f0:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800a6f4:	ed82 7a00 	vstr	s14, [r2]
 800a6f8:	edc2 7a01 	vstr	s15, [r2, #4]
 800a6fc:	3010      	adds	r0, #16
 800a6fe:	3210      	adds	r2, #16
 800a700:	3b08      	subs	r3, #8
 800a702:	3110      	adds	r1, #16
 800a704:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a708:	ed93 7a02 	vldr	s14, [r3, #8]
 800a70c:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a710:	edd3 4a03 	vldr	s9, [r3, #12]
 800a714:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a718:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a71c:	ee77 5a45 	vsub.f32	s11, s14, s10
 800a720:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a724:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a728:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a72c:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a730:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a734:	ee37 7a23 	vadd.f32	s14, s14, s7
 800a738:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a73c:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a740:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a744:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a748:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a74c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a750:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a754:	3c01      	subs	r4, #1
 800a756:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a75a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a75e:	f1a3 0308 	sub.w	r3, r3, #8
 800a762:	f101 0108 	add.w	r1, r1, #8
 800a766:	f100 0008 	add.w	r0, r0, #8
 800a76a:	f102 0208 	add.w	r2, r2, #8
 800a76e:	d1c9      	bne.n	800a704 <stage_rfft_f32+0x40>
 800a770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop

0800a778 <merge_rfft_f32>:
 800a778:	b410      	push	{r4}
 800a77a:	edd1 7a00 	vldr	s15, [r1]
 800a77e:	edd1 6a01 	vldr	s13, [r1, #4]
 800a782:	8804      	ldrh	r4, [r0, #0]
 800a784:	6940      	ldr	r0, [r0, #20]
 800a786:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a78a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a78e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800a792:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a796:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a79a:	3c01      	subs	r4, #1
 800a79c:	ed82 7a00 	vstr	s14, [r2]
 800a7a0:	edc2 7a01 	vstr	s15, [r2, #4]
 800a7a4:	b3dc      	cbz	r4, 800a81e <merge_rfft_f32+0xa6>
 800a7a6:	00e3      	lsls	r3, r4, #3
 800a7a8:	3b08      	subs	r3, #8
 800a7aa:	440b      	add	r3, r1
 800a7ac:	3010      	adds	r0, #16
 800a7ae:	3210      	adds	r2, #16
 800a7b0:	3110      	adds	r1, #16
 800a7b2:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a7b6:	ed93 7a02 	vldr	s14, [r3, #8]
 800a7ba:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a7be:	edd3 4a03 	vldr	s9, [r3, #12]
 800a7c2:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a7c6:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a7ca:	ee75 5a47 	vsub.f32	s11, s10, s14
 800a7ce:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a7d2:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a7d6:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a7da:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a7de:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a7e2:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a7e6:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a7ea:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a7ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a7f2:	ee37 7a46 	vsub.f32	s14, s14, s12
 800a7f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a7fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a7fe:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a802:	3c01      	subs	r4, #1
 800a804:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a808:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a80c:	f1a3 0308 	sub.w	r3, r3, #8
 800a810:	f101 0108 	add.w	r1, r1, #8
 800a814:	f100 0008 	add.w	r0, r0, #8
 800a818:	f102 0208 	add.w	r2, r2, #8
 800a81c:	d1c9      	bne.n	800a7b2 <merge_rfft_f32+0x3a>
 800a81e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <arm_rfft_fast_f32>:
 800a824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a828:	8a05      	ldrh	r5, [r0, #16]
 800a82a:	086d      	lsrs	r5, r5, #1
 800a82c:	8005      	strh	r5, [r0, #0]
 800a82e:	4604      	mov	r4, r0
 800a830:	4616      	mov	r6, r2
 800a832:	461d      	mov	r5, r3
 800a834:	b14b      	cbz	r3, 800a84a <arm_rfft_fast_f32+0x26>
 800a836:	f7ff ff9f 	bl	800a778 <merge_rfft_f32>
 800a83a:	462a      	mov	r2, r5
 800a83c:	4631      	mov	r1, r6
 800a83e:	4620      	mov	r0, r4
 800a840:	2301      	movs	r3, #1
 800a842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	f000 bb33 	b.w	800aeb0 <arm_cfft_f32>
 800a84a:	460f      	mov	r7, r1
 800a84c:	461a      	mov	r2, r3
 800a84e:	2301      	movs	r3, #1
 800a850:	f000 fb2e 	bl	800aeb0 <arm_cfft_f32>
 800a854:	4632      	mov	r2, r6
 800a856:	4639      	mov	r1, r7
 800a858:	4620      	mov	r0, r4
 800a85a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a85e:	f7ff bf31 	b.w	800a6c4 <stage_rfft_f32>
 800a862:	bf00      	nop

0800a864 <arm_cfft_radix8by2_f32>:
 800a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a868:	ed2d 8b08 	vpush	{d8-d11}
 800a86c:	4607      	mov	r7, r0
 800a86e:	4608      	mov	r0, r1
 800a870:	f8b7 c000 	ldrh.w	ip, [r7]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800a87a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800a87e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a882:	f000 80b0 	beq.w	800a9e6 <arm_cfft_radix8by2_f32+0x182>
 800a886:	008c      	lsls	r4, r1, #2
 800a888:	3410      	adds	r4, #16
 800a88a:	f100 0310 	add.w	r3, r0, #16
 800a88e:	1906      	adds	r6, r0, r4
 800a890:	3210      	adds	r2, #16
 800a892:	4444      	add	r4, r8
 800a894:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800a898:	f108 0510 	add.w	r5, r8, #16
 800a89c:	ed15 2a04 	vldr	s4, [r5, #-16]
 800a8a0:	ed55 2a03 	vldr	s5, [r5, #-12]
 800a8a4:	ed54 4a04 	vldr	s9, [r4, #-16]
 800a8a8:	ed14 4a03 	vldr	s8, [r4, #-12]
 800a8ac:	ed14 6a02 	vldr	s12, [r4, #-8]
 800a8b0:	ed54 5a01 	vldr	s11, [r4, #-4]
 800a8b4:	ed53 3a04 	vldr	s7, [r3, #-16]
 800a8b8:	ed15 0a02 	vldr	s0, [r5, #-8]
 800a8bc:	ed55 0a01 	vldr	s1, [r5, #-4]
 800a8c0:	ed56 6a04 	vldr	s13, [r6, #-16]
 800a8c4:	ed16 3a03 	vldr	s6, [r6, #-12]
 800a8c8:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a8cc:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a8d0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a8d4:	ed16 1a02 	vldr	s2, [r6, #-8]
 800a8d8:	ed56 1a01 	vldr	s3, [r6, #-4]
 800a8dc:	ee73 ba82 	vadd.f32	s23, s7, s4
 800a8e0:	ee37 ba22 	vadd.f32	s22, s14, s5
 800a8e4:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800a8e8:	ee33 9a04 	vadd.f32	s18, s6, s8
 800a8ec:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800a8f0:	ee75 aa00 	vadd.f32	s21, s10, s0
 800a8f4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800a8f8:	ee71 8a06 	vadd.f32	s17, s2, s12
 800a8fc:	ed43 ba04 	vstr	s23, [r3, #-16]
 800a900:	ed03 ba03 	vstr	s22, [r3, #-12]
 800a904:	ed43 aa02 	vstr	s21, [r3, #-8]
 800a908:	ed03 aa01 	vstr	s20, [r3, #-4]
 800a90c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a910:	ed46 9a04 	vstr	s19, [r6, #-16]
 800a914:	ed06 9a03 	vstr	s18, [r6, #-12]
 800a918:	ed46 8a02 	vstr	s17, [r6, #-8]
 800a91c:	ee37 7a62 	vsub.f32	s14, s14, s5
 800a920:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a924:	ee34 4a43 	vsub.f32	s8, s8, s6
 800a928:	ed52 6a03 	vldr	s13, [r2, #-12]
 800a92c:	ed12 3a04 	vldr	s6, [r2, #-16]
 800a930:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800a934:	ee27 8a26 	vmul.f32	s16, s14, s13
 800a938:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800a93c:	ee23 2a83 	vmul.f32	s4, s7, s6
 800a940:	ee64 4a83 	vmul.f32	s9, s9, s6
 800a944:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800a948:	ee27 7a03 	vmul.f32	s14, s14, s6
 800a94c:	ee64 6a26 	vmul.f32	s13, s8, s13
 800a950:	ee24 4a03 	vmul.f32	s8, s8, s6
 800a954:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a958:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a95c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800a960:	ee32 3a08 	vadd.f32	s6, s4, s16
 800a964:	ed05 7a03 	vstr	s14, [r5, #-12]
 800a968:	ed05 3a04 	vstr	s6, [r5, #-16]
 800a96c:	ed04 4a04 	vstr	s8, [r4, #-16]
 800a970:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a974:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a978:	ee76 6a41 	vsub.f32	s13, s12, s2
 800a97c:	ee35 5a40 	vsub.f32	s10, s10, s0
 800a980:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800a984:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a988:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a98c:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a990:	ee66 4a87 	vmul.f32	s9, s13, s14
 800a994:	ee25 4a25 	vmul.f32	s8, s10, s11
 800a998:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a99c:	ee25 5a07 	vmul.f32	s10, s10, s14
 800a9a0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a9a4:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a9a8:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a9ac:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a9b0:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a9b4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800a9b8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a9bc:	3310      	adds	r3, #16
 800a9be:	4563      	cmp	r3, ip
 800a9c0:	ed45 5a02 	vstr	s11, [r5, #-8]
 800a9c4:	f106 0610 	add.w	r6, r6, #16
 800a9c8:	ed45 7a01 	vstr	s15, [r5, #-4]
 800a9cc:	f102 0210 	add.w	r2, r2, #16
 800a9d0:	ed04 6a02 	vstr	s12, [r4, #-8]
 800a9d4:	ed04 7a01 	vstr	s14, [r4, #-4]
 800a9d8:	f105 0510 	add.w	r5, r5, #16
 800a9dc:	f104 0410 	add.w	r4, r4, #16
 800a9e0:	f47f af5c 	bne.w	800a89c <arm_cfft_radix8by2_f32+0x38>
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	b28c      	uxth	r4, r1
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	f000 fc2c 	bl	800b248 <arm_radix8_butterfly_f32>
 800a9f0:	ecbd 8b08 	vpop	{d8-d11}
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa00:	f000 bc22 	b.w	800b248 <arm_radix8_butterfly_f32>

0800aa04 <arm_cfft_radix8by4_f32>:
 800aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	ed2d 8b0a 	vpush	{d8-d12}
 800aa0c:	b08d      	sub	sp, #52	@ 0x34
 800aa0e:	460d      	mov	r5, r1
 800aa10:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa12:	8801      	ldrh	r1, [r0, #0]
 800aa14:	6842      	ldr	r2, [r0, #4]
 800aa16:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa18:	0849      	lsrs	r1, r1, #1
 800aa1a:	008b      	lsls	r3, r1, #2
 800aa1c:	18ee      	adds	r6, r5, r3
 800aa1e:	18f0      	adds	r0, r6, r3
 800aa20:	edd0 5a00 	vldr	s11, [r0]
 800aa24:	edd5 7a00 	vldr	s15, [r5]
 800aa28:	ed96 7a00 	vldr	s14, [r6]
 800aa2c:	edd0 3a01 	vldr	s7, [r0, #4]
 800aa30:	ed96 4a01 	vldr	s8, [r6, #4]
 800aa34:	ed95 5a01 	vldr	s10, [r5, #4]
 800aa38:	9008      	str	r0, [sp, #32]
 800aa3a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800aa3e:	18c7      	adds	r7, r0, r3
 800aa40:	edd7 4a00 	vldr	s9, [r7]
 800aa44:	ed97 3a01 	vldr	s6, [r7, #4]
 800aa48:	9701      	str	r7, [sp, #4]
 800aa4a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800aa4e:	462c      	mov	r4, r5
 800aa50:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800aa54:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800aa58:	ee16 ca90 	vmov	ip, s13
 800aa5c:	f844 cb08 	str.w	ip, [r4], #8
 800aa60:	ee75 6a23 	vadd.f32	s13, s10, s7
 800aa64:	edd6 5a01 	vldr	s11, [r6, #4]
 800aa68:	edd7 2a01 	vldr	s5, [r7, #4]
 800aa6c:	9404      	str	r4, [sp, #16]
 800aa6e:	ee35 5a63 	vsub.f32	s10, s10, s7
 800aa72:	ee74 3a27 	vadd.f32	s7, s8, s15
 800aa76:	ee36 6a47 	vsub.f32	s12, s12, s14
 800aa7a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800aa7e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800aa82:	0849      	lsrs	r1, r1, #1
 800aa84:	f102 0e08 	add.w	lr, r2, #8
 800aa88:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800aa8c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800aa90:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa92:	ee35 4a47 	vsub.f32	s8, s10, s14
 800aa96:	f1a1 0902 	sub.w	r9, r1, #2
 800aa9a:	f8cd e00c 	str.w	lr, [sp, #12]
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	ee13 ea90 	vmov	lr, s7
 800aaa4:	ee36 6a64 	vsub.f32	s12, s12, s9
 800aaa8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800aaac:	4604      	mov	r4, r0
 800aaae:	edc5 5a01 	vstr	s11, [r5, #4]
 800aab2:	ee37 7a05 	vadd.f32	s14, s14, s10
 800aab6:	f841 eb08 	str.w	lr, [r1], #8
 800aaba:	ee34 5a24 	vadd.f32	s10, s8, s9
 800aabe:	ee16 ea10 	vmov	lr, s12
 800aac2:	ed86 5a01 	vstr	s10, [r6, #4]
 800aac6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800aaca:	f844 eb08 	str.w	lr, [r4], #8
 800aace:	ee77 7a83 	vadd.f32	s15, s15, s6
 800aad2:	edc0 6a01 	vstr	s13, [r0, #4]
 800aad6:	9405      	str	r4, [sp, #20]
 800aad8:	4604      	mov	r4, r0
 800aada:	ee17 0a90 	vmov	r0, s15
 800aade:	9106      	str	r1, [sp, #24]
 800aae0:	ee37 7a64 	vsub.f32	s14, s14, s9
 800aae4:	f102 0110 	add.w	r1, r2, #16
 800aae8:	46bc      	mov	ip, r7
 800aaea:	9100      	str	r1, [sp, #0]
 800aaec:	f847 0b08 	str.w	r0, [r7], #8
 800aaf0:	f102 0118 	add.w	r1, r2, #24
 800aaf4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800aaf8:	9102      	str	r1, [sp, #8]
 800aafa:	ed8c 7a01 	vstr	s14, [ip, #4]
 800aafe:	9007      	str	r0, [sp, #28]
 800ab00:	f000 8134 	beq.w	800ad6c <arm_cfft_radix8by4_f32+0x368>
 800ab04:	f102 0920 	add.w	r9, r2, #32
 800ab08:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800ab0c:	9a01      	ldr	r2, [sp, #4]
 800ab0e:	f8dd a000 	ldr.w	sl, [sp]
 800ab12:	3b0c      	subs	r3, #12
 800ab14:	4683      	mov	fp, r0
 800ab16:	4463      	add	r3, ip
 800ab18:	f105 0e10 	add.w	lr, r5, #16
 800ab1c:	f1a4 010c 	sub.w	r1, r4, #12
 800ab20:	f104 0510 	add.w	r5, r4, #16
 800ab24:	f1a6 0c0c 	sub.w	ip, r6, #12
 800ab28:	f1a2 040c 	sub.w	r4, r2, #12
 800ab2c:	f106 0010 	add.w	r0, r6, #16
 800ab30:	3210      	adds	r2, #16
 800ab32:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800ab36:	ed55 5a02 	vldr	s11, [r5, #-8]
 800ab3a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800ab3e:	ed52 1a02 	vldr	s3, [r2, #-8]
 800ab42:	ed55 6a01 	vldr	s13, [r5, #-4]
 800ab46:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800ab4a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800ab4e:	ed10 8a01 	vldr	s16, [r0, #-4]
 800ab52:	ee35 4a25 	vadd.f32	s8, s10, s11
 800ab56:	ee30 6a26 	vadd.f32	s12, s0, s13
 800ab5a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800ab5e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ab62:	ee37 7a21 	vadd.f32	s14, s14, s3
 800ab66:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ab6a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800ab6e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800ab72:	ed52 6a01 	vldr	s13, [r2, #-4]
 800ab76:	ee36 7a07 	vadd.f32	s14, s12, s14
 800ab7a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800ab7e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ab82:	ee70 3a67 	vsub.f32	s7, s0, s15
 800ab86:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800ab8a:	ed94 7a02 	vldr	s14, [r4, #8]
 800ab8e:	ed9c 2a02 	vldr	s4, [ip, #8]
 800ab92:	ed91 ba02 	vldr	s22, [r1, #8]
 800ab96:	edd3 9a02 	vldr	s19, [r3, #8]
 800ab9a:	edd4 2a01 	vldr	s5, [r4, #4]
 800ab9e:	ed9c 9a01 	vldr	s18, [ip, #4]
 800aba2:	ed93 5a01 	vldr	s10, [r3, #4]
 800aba6:	edd1 0a01 	vldr	s1, [r1, #4]
 800abaa:	ee72 6a07 	vadd.f32	s13, s4, s14
 800abae:	ee32 2a47 	vsub.f32	s4, s4, s14
 800abb2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800abb6:	ee79 4a22 	vadd.f32	s9, s18, s5
 800abba:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800abbe:	ee79 2a62 	vsub.f32	s5, s18, s5
 800abc2:	ed8c 7a02 	vstr	s14, [ip, #8]
 800abc6:	ed91 7a01 	vldr	s14, [r1, #4]
 800abca:	edd3 8a01 	vldr	s17, [r3, #4]
 800abce:	ee34 7a87 	vadd.f32	s14, s9, s14
 800abd2:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800abd6:	ee37 7a28 	vadd.f32	s14, s14, s17
 800abda:	ee32 9a60 	vsub.f32	s18, s4, s1
 800abde:	ed8c 7a01 	vstr	s14, [ip, #4]
 800abe2:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800abe6:	ed1a aa02 	vldr	s20, [sl, #-8]
 800abea:	ee73 8a22 	vadd.f32	s17, s6, s5
 800abee:	ee39 9a05 	vadd.f32	s18, s18, s10
 800abf2:	ee7a aac1 	vsub.f32	s21, s21, s2
 800abf6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800abfa:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800abfe:	ee69 ba07 	vmul.f32	s23, s18, s14
 800ac02:	ee6a aa87 	vmul.f32	s21, s21, s14
 800ac06:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800ac0a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800ac0e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800ac12:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800ac16:	ee68 8a87 	vmul.f32	s17, s17, s14
 800ac1a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800ac1e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800ac22:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800ac26:	ee3b aaca 	vsub.f32	s20, s23, s20
 800ac2a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800ac2e:	ee76 6acb 	vsub.f32	s13, s13, s22
 800ac32:	ee36 6a48 	vsub.f32	s12, s12, s16
 800ac36:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800ac3a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800ac3e:	ed40 3a01 	vstr	s7, [r0, #-4]
 800ac42:	edc1 8a01 	vstr	s17, [r1, #4]
 800ac46:	ed81 aa02 	vstr	s20, [r1, #8]
 800ac4a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800ac4e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800ac52:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800ac56:	ed59 6a03 	vldr	s13, [r9, #-12]
 800ac5a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800ac5e:	ee36 6a41 	vsub.f32	s12, s12, s2
 800ac62:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800ac66:	ee66 9a26 	vmul.f32	s19, s12, s13
 800ac6a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800ac6e:	ee26 6a23 	vmul.f32	s12, s12, s7
 800ac72:	ee24 4a26 	vmul.f32	s8, s8, s13
 800ac76:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ac7a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800ac7e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800ac82:	ee36 6a44 	vsub.f32	s12, s12, s8
 800ac86:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ac8a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800ac8e:	ee79 3a29 	vadd.f32	s7, s18, s19
 800ac92:	ee75 6a60 	vsub.f32	s13, s10, s1
 800ac96:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800ac9a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ac9e:	ed45 3a02 	vstr	s7, [r5, #-8]
 800aca2:	ed05 6a01 	vstr	s12, [r5, #-4]
 800aca6:	ed84 7a01 	vstr	s14, [r4, #4]
 800acaa:	ed84 4a02 	vstr	s8, [r4, #8]
 800acae:	ee35 6a81 	vadd.f32	s12, s11, s2
 800acb2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800acb6:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800acba:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800acbe:	ee33 3a62 	vsub.f32	s6, s6, s5
 800acc2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800acc6:	ee67 2a26 	vmul.f32	s5, s14, s13
 800acca:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800acce:	ee26 5a25 	vmul.f32	s10, s12, s11
 800acd2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800acd6:	ee26 6a26 	vmul.f32	s12, s12, s13
 800acda:	ee27 7a25 	vmul.f32	s14, s14, s11
 800acde:	ee63 6a26 	vmul.f32	s13, s6, s13
 800ace2:	ee23 3a25 	vmul.f32	s6, s6, s11
 800ace6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800acea:	ee75 5a24 	vadd.f32	s11, s10, s9
 800acee:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800acf2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800acf6:	f1bb 0b01 	subs.w	fp, fp, #1
 800acfa:	ed42 5a02 	vstr	s11, [r2, #-8]
 800acfe:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ad02:	f10e 0e08 	add.w	lr, lr, #8
 800ad06:	ed83 3a02 	vstr	s6, [r3, #8]
 800ad0a:	ed83 7a01 	vstr	s14, [r3, #4]
 800ad0e:	f1ac 0c08 	sub.w	ip, ip, #8
 800ad12:	f10a 0a08 	add.w	sl, sl, #8
 800ad16:	f100 0008 	add.w	r0, r0, #8
 800ad1a:	f1a1 0108 	sub.w	r1, r1, #8
 800ad1e:	f109 0910 	add.w	r9, r9, #16
 800ad22:	f105 0508 	add.w	r5, r5, #8
 800ad26:	f1a4 0408 	sub.w	r4, r4, #8
 800ad2a:	f108 0818 	add.w	r8, r8, #24
 800ad2e:	f102 0208 	add.w	r2, r2, #8
 800ad32:	f1a3 0308 	sub.w	r3, r3, #8
 800ad36:	f47f aefc 	bne.w	800ab32 <arm_cfft_radix8by4_f32+0x12e>
 800ad3a:	9907      	ldr	r1, [sp, #28]
 800ad3c:	9800      	ldr	r0, [sp, #0]
 800ad3e:	00cb      	lsls	r3, r1, #3
 800ad40:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ad44:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ad48:	9100      	str	r1, [sp, #0]
 800ad4a:	9904      	ldr	r1, [sp, #16]
 800ad4c:	4419      	add	r1, r3
 800ad4e:	9104      	str	r1, [sp, #16]
 800ad50:	9903      	ldr	r1, [sp, #12]
 800ad52:	4419      	add	r1, r3
 800ad54:	9103      	str	r1, [sp, #12]
 800ad56:	9906      	ldr	r1, [sp, #24]
 800ad58:	4419      	add	r1, r3
 800ad5a:	9106      	str	r1, [sp, #24]
 800ad5c:	9905      	ldr	r1, [sp, #20]
 800ad5e:	441f      	add	r7, r3
 800ad60:	4419      	add	r1, r3
 800ad62:	9b02      	ldr	r3, [sp, #8]
 800ad64:	9105      	str	r1, [sp, #20]
 800ad66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad6a:	9302      	str	r3, [sp, #8]
 800ad6c:	9904      	ldr	r1, [sp, #16]
 800ad6e:	9805      	ldr	r0, [sp, #20]
 800ad70:	ed91 4a00 	vldr	s8, [r1]
 800ad74:	edd0 6a00 	vldr	s13, [r0]
 800ad78:	9b06      	ldr	r3, [sp, #24]
 800ad7a:	ed97 3a00 	vldr	s6, [r7]
 800ad7e:	edd3 7a00 	vldr	s15, [r3]
 800ad82:	edd0 4a01 	vldr	s9, [r0, #4]
 800ad86:	edd1 3a01 	vldr	s7, [r1, #4]
 800ad8a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ad8e:	ed93 7a01 	vldr	s14, [r3, #4]
 800ad92:	9a03      	ldr	r2, [sp, #12]
 800ad94:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800ad98:	ee34 6a26 	vadd.f32	s12, s8, s13
 800ad9c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800ada0:	ee37 5a86 	vadd.f32	s10, s15, s12
 800ada4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800ada8:	ee35 5a03 	vadd.f32	s10, s10, s6
 800adac:	ee74 6a66 	vsub.f32	s13, s8, s13
 800adb0:	ed81 5a00 	vstr	s10, [r1]
 800adb4:	ed93 5a01 	vldr	s10, [r3, #4]
 800adb8:	edd7 4a01 	vldr	s9, [r7, #4]
 800adbc:	ee35 5a85 	vadd.f32	s10, s11, s10
 800adc0:	ee37 4a26 	vadd.f32	s8, s14, s13
 800adc4:	ee35 5a24 	vadd.f32	s10, s10, s9
 800adc8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800adcc:	ed81 5a01 	vstr	s10, [r1, #4]
 800add0:	edd2 1a00 	vldr	s3, [r2]
 800add4:	edd2 2a01 	vldr	s5, [r2, #4]
 800add8:	ee34 5a83 	vadd.f32	s10, s9, s6
 800addc:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ade0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ade4:	ee64 4a21 	vmul.f32	s9, s8, s3
 800ade8:	ee24 4a22 	vmul.f32	s8, s8, s5
 800adec:	ee65 2a22 	vmul.f32	s5, s10, s5
 800adf0:	ee25 5a21 	vmul.f32	s10, s10, s3
 800adf4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800adf8:	ee35 5a44 	vsub.f32	s10, s10, s8
 800adfc:	edc3 2a00 	vstr	s5, [r3]
 800ae00:	ed83 5a01 	vstr	s10, [r3, #4]
 800ae04:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800ae08:	9b00      	ldr	r3, [sp, #0]
 800ae0a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ae0e:	ed93 4a01 	vldr	s8, [r3, #4]
 800ae12:	ed93 5a00 	vldr	s10, [r3]
 800ae16:	9b02      	ldr	r3, [sp, #8]
 800ae18:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ae1c:	ee66 4a05 	vmul.f32	s9, s12, s10
 800ae20:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ae24:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ae28:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ae2c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ae30:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800ae34:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ae38:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ae3c:	ed80 6a01 	vstr	s12, [r0, #4]
 800ae40:	edc0 5a00 	vstr	s11, [r0]
 800ae44:	edd3 5a01 	vldr	s11, [r3, #4]
 800ae48:	edd3 6a00 	vldr	s13, [r3]
 800ae4c:	ee37 7a02 	vadd.f32	s14, s14, s4
 800ae50:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ae54:	ee27 6a26 	vmul.f32	s12, s14, s13
 800ae58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ae5c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ae60:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ae64:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ae68:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ae6c:	ed87 7a01 	vstr	s14, [r7, #4]
 800ae70:	edc7 7a00 	vstr	s15, [r7]
 800ae74:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800ae78:	4621      	mov	r1, r4
 800ae7a:	686a      	ldr	r2, [r5, #4]
 800ae7c:	2304      	movs	r3, #4
 800ae7e:	f000 f9e3 	bl	800b248 <arm_radix8_butterfly_f32>
 800ae82:	4630      	mov	r0, r6
 800ae84:	4621      	mov	r1, r4
 800ae86:	686a      	ldr	r2, [r5, #4]
 800ae88:	2304      	movs	r3, #4
 800ae8a:	f000 f9dd 	bl	800b248 <arm_radix8_butterfly_f32>
 800ae8e:	9808      	ldr	r0, [sp, #32]
 800ae90:	686a      	ldr	r2, [r5, #4]
 800ae92:	4621      	mov	r1, r4
 800ae94:	2304      	movs	r3, #4
 800ae96:	f000 f9d7 	bl	800b248 <arm_radix8_butterfly_f32>
 800ae9a:	686a      	ldr	r2, [r5, #4]
 800ae9c:	9801      	ldr	r0, [sp, #4]
 800ae9e:	4621      	mov	r1, r4
 800aea0:	2304      	movs	r3, #4
 800aea2:	b00d      	add	sp, #52	@ 0x34
 800aea4:	ecbd 8b0a 	vpop	{d8-d12}
 800aea8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeac:	f000 b9cc 	b.w	800b248 <arm_radix8_butterfly_f32>

0800aeb0 <arm_cfft_f32>:
 800aeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb4:	2a01      	cmp	r2, #1
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	4617      	mov	r7, r2
 800aeba:	460c      	mov	r4, r1
 800aebc:	4698      	mov	r8, r3
 800aebe:	8805      	ldrh	r5, [r0, #0]
 800aec0:	d056      	beq.n	800af70 <arm_cfft_f32+0xc0>
 800aec2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800aec6:	d063      	beq.n	800af90 <arm_cfft_f32+0xe0>
 800aec8:	d916      	bls.n	800aef8 <arm_cfft_f32+0x48>
 800aeca:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800aece:	d01a      	beq.n	800af06 <arm_cfft_f32+0x56>
 800aed0:	d947      	bls.n	800af62 <arm_cfft_f32+0xb2>
 800aed2:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800aed6:	d05b      	beq.n	800af90 <arm_cfft_f32+0xe0>
 800aed8:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800aedc:	d105      	bne.n	800aeea <arm_cfft_f32+0x3a>
 800aede:	2301      	movs	r3, #1
 800aee0:	6872      	ldr	r2, [r6, #4]
 800aee2:	4629      	mov	r1, r5
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 f9af 	bl	800b248 <arm_radix8_butterfly_f32>
 800aeea:	f1b8 0f00 	cmp.w	r8, #0
 800aeee:	d111      	bne.n	800af14 <arm_cfft_f32+0x64>
 800aef0:	2f01      	cmp	r7, #1
 800aef2:	d016      	beq.n	800af22 <arm_cfft_f32+0x72>
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef8:	2d20      	cmp	r5, #32
 800aefa:	d049      	beq.n	800af90 <arm_cfft_f32+0xe0>
 800aefc:	d935      	bls.n	800af6a <arm_cfft_f32+0xba>
 800aefe:	2d40      	cmp	r5, #64	@ 0x40
 800af00:	d0ed      	beq.n	800aede <arm_cfft_f32+0x2e>
 800af02:	2d80      	cmp	r5, #128	@ 0x80
 800af04:	d1f1      	bne.n	800aeea <arm_cfft_f32+0x3a>
 800af06:	4621      	mov	r1, r4
 800af08:	4630      	mov	r0, r6
 800af0a:	f7ff fcab 	bl	800a864 <arm_cfft_radix8by2_f32>
 800af0e:	f1b8 0f00 	cmp.w	r8, #0
 800af12:	d0ed      	beq.n	800aef0 <arm_cfft_f32+0x40>
 800af14:	68b2      	ldr	r2, [r6, #8]
 800af16:	89b1      	ldrh	r1, [r6, #12]
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 f841 	bl	800afa0 <arm_bitreversal_32>
 800af1e:	2f01      	cmp	r7, #1
 800af20:	d1e8      	bne.n	800aef4 <arm_cfft_f32+0x44>
 800af22:	ee07 5a90 	vmov	s15, r5
 800af26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800af32:	2d00      	cmp	r5, #0
 800af34:	d0de      	beq.n	800aef4 <arm_cfft_f32+0x44>
 800af36:	f104 0108 	add.w	r1, r4, #8
 800af3a:	2300      	movs	r3, #0
 800af3c:	3301      	adds	r3, #1
 800af3e:	429d      	cmp	r5, r3
 800af40:	f101 0108 	add.w	r1, r1, #8
 800af44:	ed11 7a04 	vldr	s14, [r1, #-16]
 800af48:	ed51 7a03 	vldr	s15, [r1, #-12]
 800af4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800af50:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800af54:	ed01 7a04 	vstr	s14, [r1, #-16]
 800af58:	ed41 7a03 	vstr	s15, [r1, #-12]
 800af5c:	d1ee      	bne.n	800af3c <arm_cfft_f32+0x8c>
 800af5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af62:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800af66:	d0ba      	beq.n	800aede <arm_cfft_f32+0x2e>
 800af68:	e7bf      	b.n	800aeea <arm_cfft_f32+0x3a>
 800af6a:	2d10      	cmp	r5, #16
 800af6c:	d0cb      	beq.n	800af06 <arm_cfft_f32+0x56>
 800af6e:	e7bc      	b.n	800aeea <arm_cfft_f32+0x3a>
 800af70:	b19d      	cbz	r5, 800af9a <arm_cfft_f32+0xea>
 800af72:	f101 030c 	add.w	r3, r1, #12
 800af76:	2200      	movs	r2, #0
 800af78:	ed53 7a02 	vldr	s15, [r3, #-8]
 800af7c:	3201      	adds	r2, #1
 800af7e:	eef1 7a67 	vneg.f32	s15, s15
 800af82:	4295      	cmp	r5, r2
 800af84:	ed43 7a02 	vstr	s15, [r3, #-8]
 800af88:	f103 0308 	add.w	r3, r3, #8
 800af8c:	d1f4      	bne.n	800af78 <arm_cfft_f32+0xc8>
 800af8e:	e798      	b.n	800aec2 <arm_cfft_f32+0x12>
 800af90:	4621      	mov	r1, r4
 800af92:	4630      	mov	r0, r6
 800af94:	f7ff fd36 	bl	800aa04 <arm_cfft_radix8by4_f32>
 800af98:	e7a7      	b.n	800aeea <arm_cfft_f32+0x3a>
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0aa      	beq.n	800aef4 <arm_cfft_f32+0x44>
 800af9e:	e7b9      	b.n	800af14 <arm_cfft_f32+0x64>

0800afa0 <arm_bitreversal_32>:
 800afa0:	b1e9      	cbz	r1, 800afde <arm_bitreversal_32+0x3e>
 800afa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afa4:	2500      	movs	r5, #0
 800afa6:	f102 0e02 	add.w	lr, r2, #2
 800afaa:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800afae:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800afb2:	08a4      	lsrs	r4, r4, #2
 800afb4:	089b      	lsrs	r3, r3, #2
 800afb6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800afba:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800afbe:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800afc2:	00a6      	lsls	r6, r4, #2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800afca:	3304      	adds	r3, #4
 800afcc:	1d34      	adds	r4, r6, #4
 800afce:	3502      	adds	r5, #2
 800afd0:	58c6      	ldr	r6, [r0, r3]
 800afd2:	5907      	ldr	r7, [r0, r4]
 800afd4:	50c7      	str	r7, [r0, r3]
 800afd6:	428d      	cmp	r5, r1
 800afd8:	5106      	str	r6, [r0, r4]
 800afda:	d3e6      	bcc.n	800afaa <arm_bitreversal_32+0xa>
 800afdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afde:	4770      	bx	lr

0800afe0 <arm_fir_init_f32>:
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	9c04      	ldr	r4, [sp, #16]
 800afe4:	6082      	str	r2, [r0, #8]
 800afe6:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800afea:	3c01      	subs	r4, #1
 800afec:	440c      	add	r4, r1
 800afee:	8001      	strh	r1, [r0, #0]
 800aff0:	4605      	mov	r5, r0
 800aff2:	00a2      	lsls	r2, r4, #2
 800aff4:	4618      	mov	r0, r3
 800aff6:	2100      	movs	r1, #0
 800aff8:	f000 fc20 	bl	800b83c <memset>
 800affc:	6068      	str	r0, [r5, #4]
 800affe:	bd38      	pop	{r3, r4, r5, pc}

0800b000 <arm_cmplx_mag_f32>:
 800b000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b004:	ed2d 8b02 	vpush	{d8}
 800b008:	0897      	lsrs	r7, r2, #2
 800b00a:	b084      	sub	sp, #16
 800b00c:	d077      	beq.n	800b0fe <arm_cmplx_mag_f32+0xfe>
 800b00e:	f04f 0800 	mov.w	r8, #0
 800b012:	f100 0420 	add.w	r4, r0, #32
 800b016:	f101 0510 	add.w	r5, r1, #16
 800b01a:	463e      	mov	r6, r7
 800b01c:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800b020:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800b024:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b028:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b02c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b030:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b038:	f2c0 80c5 	blt.w	800b1c6 <arm_cmplx_mag_f32+0x1c6>
 800b03c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b044:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b048:	f100 80cb 	bmi.w	800b1e2 <arm_cmplx_mag_f32+0x1e2>
 800b04c:	ed05 8a04 	vstr	s16, [r5, #-16]
 800b050:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800b054:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b058:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b05c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b060:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b064:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06c:	f2c0 80a8 	blt.w	800b1c0 <arm_cmplx_mag_f32+0x1c0>
 800b070:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b078:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b07c:	f100 80a8 	bmi.w	800b1d0 <arm_cmplx_mag_f32+0x1d0>
 800b080:	ed05 8a03 	vstr	s16, [r5, #-12]
 800b084:	ed14 0a04 	vldr	s0, [r4, #-16]
 800b088:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b08c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b090:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b094:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b098:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a0:	f2c0 808b 	blt.w	800b1ba <arm_cmplx_mag_f32+0x1ba>
 800b0a4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ac:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b0b0:	f100 80a9 	bmi.w	800b206 <arm_cmplx_mag_f32+0x206>
 800b0b4:	ed05 8a02 	vstr	s16, [r5, #-8]
 800b0b8:	ed14 0a02 	vldr	s0, [r4, #-8]
 800b0bc:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b0c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b0c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b0c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d4:	db6e      	blt.n	800b1b4 <arm_cmplx_mag_f32+0x1b4>
 800b0d6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0de:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b0e2:	f100 8087 	bmi.w	800b1f4 <arm_cmplx_mag_f32+0x1f4>
 800b0e6:	ed05 8a01 	vstr	s16, [r5, #-4]
 800b0ea:	3e01      	subs	r6, #1
 800b0ec:	f104 0420 	add.w	r4, r4, #32
 800b0f0:	f105 0510 	add.w	r5, r5, #16
 800b0f4:	d192      	bne.n	800b01c <arm_cmplx_mag_f32+0x1c>
 800b0f6:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800b0fa:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800b0fe:	f012 0203 	ands.w	r2, r2, #3
 800b102:	d052      	beq.n	800b1aa <arm_cmplx_mag_f32+0x1aa>
 800b104:	ed90 0a00 	vldr	s0, [r0]
 800b108:	edd0 7a01 	vldr	s15, [r0, #4]
 800b10c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b110:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b114:	2300      	movs	r3, #0
 800b116:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b11a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b122:	bfb8      	it	lt
 800b124:	600b      	strlt	r3, [r1, #0]
 800b126:	db08      	blt.n	800b13a <arm_cmplx_mag_f32+0x13a>
 800b128:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b130:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b134:	d479      	bmi.n	800b22a <arm_cmplx_mag_f32+0x22a>
 800b136:	ed81 8a00 	vstr	s16, [r1]
 800b13a:	3a01      	subs	r2, #1
 800b13c:	d035      	beq.n	800b1aa <arm_cmplx_mag_f32+0x1aa>
 800b13e:	ed90 0a02 	vldr	s0, [r0, #8]
 800b142:	edd0 7a03 	vldr	s15, [r0, #12]
 800b146:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b14a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b14e:	2300      	movs	r3, #0
 800b150:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b154:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15c:	bfb8      	it	lt
 800b15e:	604b      	strlt	r3, [r1, #4]
 800b160:	db08      	blt.n	800b174 <arm_cmplx_mag_f32+0x174>
 800b162:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b16e:	d453      	bmi.n	800b218 <arm_cmplx_mag_f32+0x218>
 800b170:	ed81 8a01 	vstr	s16, [r1, #4]
 800b174:	2a01      	cmp	r2, #1
 800b176:	d018      	beq.n	800b1aa <arm_cmplx_mag_f32+0x1aa>
 800b178:	ed90 0a04 	vldr	s0, [r0, #16]
 800b17c:	edd0 7a05 	vldr	s15, [r0, #20]
 800b180:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b184:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b188:	2300      	movs	r3, #0
 800b18a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b18e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b196:	db19      	blt.n	800b1cc <arm_cmplx_mag_f32+0x1cc>
 800b198:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b1a4:	d44a      	bmi.n	800b23c <arm_cmplx_mag_f32+0x23c>
 800b1a6:	ed81 8a02 	vstr	s16, [r1, #8]
 800b1aa:	b004      	add	sp, #16
 800b1ac:	ecbd 8b02 	vpop	{d8}
 800b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b4:	f845 8c04 	str.w	r8, [r5, #-4]
 800b1b8:	e797      	b.n	800b0ea <arm_cmplx_mag_f32+0xea>
 800b1ba:	f845 8c08 	str.w	r8, [r5, #-8]
 800b1be:	e77b      	b.n	800b0b8 <arm_cmplx_mag_f32+0xb8>
 800b1c0:	f845 8c0c 	str.w	r8, [r5, #-12]
 800b1c4:	e75e      	b.n	800b084 <arm_cmplx_mag_f32+0x84>
 800b1c6:	f845 8c10 	str.w	r8, [r5, #-16]
 800b1ca:	e741      	b.n	800b050 <arm_cmplx_mag_f32+0x50>
 800b1cc:	608b      	str	r3, [r1, #8]
 800b1ce:	e7ec      	b.n	800b1aa <arm_cmplx_mag_f32+0x1aa>
 800b1d0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b1d4:	9001      	str	r0, [sp, #4]
 800b1d6:	f000 ffb1 	bl	800c13c <sqrtf>
 800b1da:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b1de:	9801      	ldr	r0, [sp, #4]
 800b1e0:	e74e      	b.n	800b080 <arm_cmplx_mag_f32+0x80>
 800b1e2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b1e6:	9001      	str	r0, [sp, #4]
 800b1e8:	f000 ffa8 	bl	800c13c <sqrtf>
 800b1ec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b1f0:	9801      	ldr	r0, [sp, #4]
 800b1f2:	e72b      	b.n	800b04c <arm_cmplx_mag_f32+0x4c>
 800b1f4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b1f8:	9001      	str	r0, [sp, #4]
 800b1fa:	f000 ff9f 	bl	800c13c <sqrtf>
 800b1fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b202:	9801      	ldr	r0, [sp, #4]
 800b204:	e76f      	b.n	800b0e6 <arm_cmplx_mag_f32+0xe6>
 800b206:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b20a:	9001      	str	r0, [sp, #4]
 800b20c:	f000 ff96 	bl	800c13c <sqrtf>
 800b210:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b214:	9801      	ldr	r0, [sp, #4]
 800b216:	e74d      	b.n	800b0b4 <arm_cmplx_mag_f32+0xb4>
 800b218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b21c:	9201      	str	r2, [sp, #4]
 800b21e:	f000 ff8d 	bl	800c13c <sqrtf>
 800b222:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b226:	9903      	ldr	r1, [sp, #12]
 800b228:	e7a2      	b.n	800b170 <arm_cmplx_mag_f32+0x170>
 800b22a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b22e:	9201      	str	r2, [sp, #4]
 800b230:	f000 ff84 	bl	800c13c <sqrtf>
 800b234:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b238:	9903      	ldr	r1, [sp, #12]
 800b23a:	e77c      	b.n	800b136 <arm_cmplx_mag_f32+0x136>
 800b23c:	9101      	str	r1, [sp, #4]
 800b23e:	f000 ff7d 	bl	800c13c <sqrtf>
 800b242:	9901      	ldr	r1, [sp, #4]
 800b244:	e7af      	b.n	800b1a6 <arm_cmplx_mag_f32+0x1a6>
 800b246:	bf00      	nop

0800b248 <arm_radix8_butterfly_f32>:
 800b248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24c:	ed2d 8b10 	vpush	{d8-d15}
 800b250:	b095      	sub	sp, #84	@ 0x54
 800b252:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800b256:	4603      	mov	r3, r0
 800b258:	3304      	adds	r3, #4
 800b25a:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800b540 <arm_radix8_butterfly_f32+0x2f8>
 800b25e:	9012      	str	r0, [sp, #72]	@ 0x48
 800b260:	468b      	mov	fp, r1
 800b262:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b264:	4689      	mov	r9, r1
 800b266:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b26a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b26c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800b26e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b272:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b276:	eb03 0508 	add.w	r5, r3, r8
 800b27a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b27e:	eb05 040e 	add.w	r4, r5, lr
 800b282:	0137      	lsls	r7, r6, #4
 800b284:	eba6 030a 	sub.w	r3, r6, sl
 800b288:	eb04 000e 	add.w	r0, r4, lr
 800b28c:	44b2      	add	sl, r6
 800b28e:	1d3a      	adds	r2, r7, #4
 800b290:	9702      	str	r7, [sp, #8]
 800b292:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b296:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b29a:	ebae 0c06 	sub.w	ip, lr, r6
 800b29e:	9703      	str	r7, [sp, #12]
 800b2a0:	eb03 0708 	add.w	r7, r3, r8
 800b2a4:	9701      	str	r7, [sp, #4]
 800b2a6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b2aa:	9706      	str	r7, [sp, #24]
 800b2ac:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b2ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b2b2:	f10e 0104 	add.w	r1, lr, #4
 800b2b6:	4439      	add	r1, r7
 800b2b8:	443a      	add	r2, r7
 800b2ba:	0137      	lsls	r7, r6, #4
 800b2bc:	00f6      	lsls	r6, r6, #3
 800b2be:	9704      	str	r7, [sp, #16]
 800b2c0:	9605      	str	r6, [sp, #20]
 800b2c2:	9f01      	ldr	r7, [sp, #4]
 800b2c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b2c6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b2ca:	f04f 0c00 	mov.w	ip, #0
 800b2ce:	edd4 6a00 	vldr	s13, [r4]
 800b2d2:	edd7 1a00 	vldr	s3, [r7]
 800b2d6:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b2da:	edd5 5a00 	vldr	s11, [r5]
 800b2de:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b2e2:	ed90 6a00 	vldr	s12, [r0]
 800b2e6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b2ea:	ed93 3a00 	vldr	s6, [r3]
 800b2ee:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b2f2:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b2f6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b2fa:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b2fe:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b302:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b306:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b30a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b30e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b312:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b316:	ed85 4a00 	vstr	s8, [r5]
 800b31a:	edd1 6a00 	vldr	s13, [r1]
 800b31e:	ed94 9a01 	vldr	s18, [r4, #4]
 800b322:	edd3 2a01 	vldr	s5, [r3, #4]
 800b326:	edd7 8a01 	vldr	s17, [r7, #4]
 800b32a:	edd6 0a00 	vldr	s1, [r6]
 800b32e:	edd5 3a01 	vldr	s7, [r5, #4]
 800b332:	ed90 8a01 	vldr	s16, [r0, #4]
 800b336:	ed92 7a00 	vldr	s14, [r2]
 800b33a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b33e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b342:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b346:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b34a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b34e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b352:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b356:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b35a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b35e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b362:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b366:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b36a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b36e:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b372:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b376:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b37a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b37e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b382:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b386:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b38a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b38e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b392:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b396:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b39a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b39e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b3a2:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b3a6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b3aa:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b3ae:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b3b2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b3b6:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b3ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b3be:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b3c2:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b3c6:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b3ca:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b3ce:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b3d2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b3d6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b3da:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b3de:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b3e2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b3e6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b3ea:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b3ee:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b3f2:	44dc      	add	ip, fp
 800b3f4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b3f8:	45e1      	cmp	r9, ip
 800b3fa:	ed86 8a00 	vstr	s16, [r6]
 800b3fe:	ed85 2a01 	vstr	s4, [r5, #4]
 800b402:	4456      	add	r6, sl
 800b404:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b408:	4455      	add	r5, sl
 800b40a:	edc0 6a00 	vstr	s13, [r0]
 800b40e:	ed82 1a00 	vstr	s2, [r2]
 800b412:	ed80 5a01 	vstr	s10, [r0, #4]
 800b416:	4452      	add	r2, sl
 800b418:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b41c:	4450      	add	r0, sl
 800b41e:	edc7 2a00 	vstr	s5, [r7]
 800b422:	edc4 4a00 	vstr	s9, [r4]
 800b426:	ed83 7a00 	vstr	s14, [r3]
 800b42a:	edc1 5a00 	vstr	s11, [r1]
 800b42e:	edc7 3a01 	vstr	s7, [r7, #4]
 800b432:	4451      	add	r1, sl
 800b434:	ed84 6a01 	vstr	s12, [r4, #4]
 800b438:	4457      	add	r7, sl
 800b43a:	edc3 7a01 	vstr	s15, [r3, #4]
 800b43e:	4454      	add	r4, sl
 800b440:	4453      	add	r3, sl
 800b442:	f63f af44 	bhi.w	800b2ce <arm_radix8_butterfly_f32+0x86>
 800b446:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b448:	2b07      	cmp	r3, #7
 800b44a:	f240 81b7 	bls.w	800b7bc <arm_radix8_butterfly_f32+0x574>
 800b44e:	9b06      	ldr	r3, [sp, #24]
 800b450:	9903      	ldr	r1, [sp, #12]
 800b452:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b454:	9e05      	ldr	r6, [sp, #20]
 800b456:	9a04      	ldr	r2, [sp, #16]
 800b458:	f103 0c08 	add.w	ip, r3, #8
 800b45c:	9b02      	ldr	r3, [sp, #8]
 800b45e:	3108      	adds	r1, #8
 800b460:	f108 0808 	add.w	r8, r8, #8
 800b464:	1841      	adds	r1, r0, r1
 800b466:	3608      	adds	r6, #8
 800b468:	330c      	adds	r3, #12
 800b46a:	4604      	mov	r4, r0
 800b46c:	4444      	add	r4, r8
 800b46e:	18c3      	adds	r3, r0, r3
 800b470:	9109      	str	r1, [sp, #36]	@ 0x24
 800b472:	1981      	adds	r1, r0, r6
 800b474:	f10e 0e08 	add.w	lr, lr, #8
 800b478:	3208      	adds	r2, #8
 800b47a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b47c:	9107      	str	r1, [sp, #28]
 800b47e:	4604      	mov	r4, r0
 800b480:	4601      	mov	r1, r0
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	f100 030c 	add.w	r3, r0, #12
 800b488:	4474      	add	r4, lr
 800b48a:	f04f 0801 	mov.w	r8, #1
 800b48e:	1882      	adds	r2, r0, r2
 800b490:	4461      	add	r1, ip
 800b492:	9305      	str	r3, [sp, #20]
 800b494:	464b      	mov	r3, r9
 800b496:	940a      	str	r4, [sp, #40]	@ 0x28
 800b498:	46c1      	mov	r9, r8
 800b49a:	9208      	str	r2, [sp, #32]
 800b49c:	46d8      	mov	r8, fp
 800b49e:	9106      	str	r1, [sp, #24]
 800b4a0:	f04f 0e00 	mov.w	lr, #0
 800b4a4:	469b      	mov	fp, r3
 800b4a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b4a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b4aa:	449e      	add	lr, r3
 800b4ac:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b4b0:	441a      	add	r2, r3
 800b4b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4b4:	441a      	add	r2, r3
 800b4b6:	18d4      	adds	r4, r2, r3
 800b4b8:	18e5      	adds	r5, r4, r3
 800b4ba:	18ee      	adds	r6, r5, r3
 800b4bc:	18f7      	adds	r7, r6, r3
 800b4be:	eb07 0c03 	add.w	ip, r7, r3
 800b4c2:	920d      	str	r2, [sp, #52]	@ 0x34
 800b4c4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800b4c8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800b4cc:	910c      	str	r1, [sp, #48]	@ 0x30
 800b4ce:	4419      	add	r1, r3
 800b4d0:	9103      	str	r1, [sp, #12]
 800b4d2:	4419      	add	r1, r3
 800b4d4:	18ca      	adds	r2, r1, r3
 800b4d6:	9202      	str	r2, [sp, #8]
 800b4d8:	441a      	add	r2, r3
 800b4da:	18d0      	adds	r0, r2, r3
 800b4dc:	ed92 ea01 	vldr	s28, [r2, #4]
 800b4e0:	9a02      	ldr	r2, [sp, #8]
 800b4e2:	edd4 7a00 	vldr	s15, [r4]
 800b4e6:	edd2 da01 	vldr	s27, [r2, #4]
 800b4ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b4ec:	ed91 da01 	vldr	s26, [r1, #4]
 800b4f0:	ed92 ca01 	vldr	s24, [r2, #4]
 800b4f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4f6:	9903      	ldr	r1, [sp, #12]
 800b4f8:	edcd 7a03 	vstr	s15, [sp, #12]
 800b4fc:	edd2 7a00 	vldr	s15, [r2]
 800b500:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b502:	edcd 7a02 	vstr	s15, [sp, #8]
 800b506:	edd2 7a00 	vldr	s15, [r2]
 800b50a:	edd0 ea01 	vldr	s29, [r0, #4]
 800b50e:	edd1 ca01 	vldr	s25, [r1, #4]
 800b512:	eddc ba00 	vldr	s23, [ip]
 800b516:	edd7 aa00 	vldr	s21, [r7]
 800b51a:	ed96 aa00 	vldr	s20, [r6]
 800b51e:	edd5 9a00 	vldr	s19, [r5]
 800b522:	edcd 7a01 	vstr	s15, [sp, #4]
 800b526:	4403      	add	r3, r0
 800b528:	ed93 fa01 	vldr	s30, [r3, #4]
 800b52c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b530:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b538:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b53c:	46cc      	mov	ip, r9
 800b53e:	e001      	b.n	800b544 <arm_radix8_butterfly_f32+0x2fc>
 800b540:	3f3504f3 	.word	0x3f3504f3
 800b544:	ed91 6a00 	vldr	s12, [r1]
 800b548:	ed93 5a00 	vldr	s10, [r3]
 800b54c:	edd0 fa00 	vldr	s31, [r0]
 800b550:	edd4 7a00 	vldr	s15, [r4]
 800b554:	ed95 7a00 	vldr	s14, [r5]
 800b558:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b55c:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b560:	ed92 2a00 	vldr	s4, [r2]
 800b564:	ed96 0a00 	vldr	s0, [r6]
 800b568:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b56c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b570:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800b574:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b578:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b57c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b580:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b584:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b588:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b58c:	ed06 6a01 	vstr	s12, [r6, #-4]
 800b590:	edd4 8a01 	vldr	s17, [r4, #4]
 800b594:	ed92 9a01 	vldr	s18, [r2, #4]
 800b598:	edd7 0a00 	vldr	s1, [r7]
 800b59c:	edd1 2a01 	vldr	s5, [r1, #4]
 800b5a0:	ed95 7a01 	vldr	s14, [r5, #4]
 800b5a4:	ed93 6a01 	vldr	s12, [r3, #4]
 800b5a8:	edd0 5a01 	vldr	s11, [r0, #4]
 800b5ac:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b5b0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800b5b4:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b5b8:	ee78 fac7 	vsub.f32	s31, s17, s14
 800b5bc:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b5c0:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b5c4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b5c8:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b5cc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b5d0:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b5d4:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b5d8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b5dc:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b5e0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b5e4:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b5e8:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b5ec:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b5f0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b5f4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b5f8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b5fc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b600:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b604:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b608:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b60c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b610:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b614:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b618:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b61c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b620:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b624:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b628:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b62c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b630:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b634:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800b638:	ee35 3a85 	vadd.f32	s6, s11, s10
 800b63c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b640:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800b644:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b648:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800b64c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800b650:	ee35 8a03 	vadd.f32	s16, s10, s6
 800b654:	ee38 0a80 	vadd.f32	s0, s17, s0
 800b658:	ee73 3a82 	vadd.f32	s7, s7, s4
 800b65c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800b660:	ed9d 2a01 	vldr	s4, [sp, #4]
 800b664:	eddd 1a02 	vldr	s3, [sp, #8]
 800b668:	ee35 5a43 	vsub.f32	s10, s10, s6
 800b66c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800b670:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b674:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b678:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b67c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b680:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b684:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b688:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b68c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b690:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b694:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b698:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b69c:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b6a0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b6a4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b6a8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b6ac:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b6b0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b6b4:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b6b8:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b6bc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b6c0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b6c4:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b6c8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b6cc:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b6d0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b6d4:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b6d8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b6dc:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b6e0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b6e4:	eddd 5a03 	vldr	s11, [sp, #12]
 800b6e8:	edc6 fa00 	vstr	s31, [r6]
 800b6ec:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b6f0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b6f4:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b6f8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b6fc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b700:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b704:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b708:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b70c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b710:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b714:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b718:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b71c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b720:	44c4      	add	ip, r8
 800b722:	45e3      	cmp	fp, ip
 800b724:	edc3 3a00 	vstr	s7, [r3]
 800b728:	edc3 6a01 	vstr	s13, [r3, #4]
 800b72c:	4456      	add	r6, sl
 800b72e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b732:	edc7 0a00 	vstr	s1, [r7]
 800b736:	4453      	add	r3, sl
 800b738:	ed80 2a00 	vstr	s4, [r0]
 800b73c:	edc0 2a01 	vstr	s5, [r0, #4]
 800b740:	4457      	add	r7, sl
 800b742:	edc2 1a00 	vstr	s3, [r2]
 800b746:	ed82 7a01 	vstr	s14, [r2, #4]
 800b74a:	4450      	add	r0, sl
 800b74c:	ed85 8a00 	vstr	s16, [r5]
 800b750:	ed85 0a01 	vstr	s0, [r5, #4]
 800b754:	4452      	add	r2, sl
 800b756:	edc1 4a00 	vstr	s9, [r1]
 800b75a:	4455      	add	r5, sl
 800b75c:	ed81 3a01 	vstr	s6, [r1, #4]
 800b760:	edc4 8a00 	vstr	s17, [r4]
 800b764:	ed84 6a01 	vstr	s12, [r4, #4]
 800b768:	4451      	add	r1, sl
 800b76a:	4454      	add	r4, sl
 800b76c:	f63f aeea 	bhi.w	800b544 <arm_radix8_butterfly_f32+0x2fc>
 800b770:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b772:	3308      	adds	r3, #8
 800b774:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b778:	3308      	adds	r3, #8
 800b77a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b77e:	3308      	adds	r3, #8
 800b780:	9309      	str	r3, [sp, #36]	@ 0x24
 800b782:	9b08      	ldr	r3, [sp, #32]
 800b784:	3308      	adds	r3, #8
 800b786:	9308      	str	r3, [sp, #32]
 800b788:	9b07      	ldr	r3, [sp, #28]
 800b78a:	3308      	adds	r3, #8
 800b78c:	9307      	str	r3, [sp, #28]
 800b78e:	9b06      	ldr	r3, [sp, #24]
 800b790:	3308      	adds	r3, #8
 800b792:	9306      	str	r3, [sp, #24]
 800b794:	9b05      	ldr	r3, [sp, #20]
 800b796:	3308      	adds	r3, #8
 800b798:	9305      	str	r3, [sp, #20]
 800b79a:	9b04      	ldr	r3, [sp, #16]
 800b79c:	3308      	adds	r3, #8
 800b79e:	9304      	str	r3, [sp, #16]
 800b7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7a2:	f109 0901 	add.w	r9, r9, #1
 800b7a6:	454b      	cmp	r3, r9
 800b7a8:	f47f ae7d 	bne.w	800b4a6 <arm_radix8_butterfly_f32+0x25e>
 800b7ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	46d9      	mov	r9, fp
 800b7b4:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7b6:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800b7ba:	e554      	b.n	800b266 <arm_radix8_butterfly_f32+0x1e>
 800b7bc:	b015      	add	sp, #84	@ 0x54
 800b7be:	ecbd 8b10 	vpop	{d8-d15}
 800b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c6:	bf00      	nop

0800b7c8 <_vsniprintf_r>:
 800b7c8:	b530      	push	{r4, r5, lr}
 800b7ca:	4614      	mov	r4, r2
 800b7cc:	2c00      	cmp	r4, #0
 800b7ce:	b09b      	sub	sp, #108	@ 0x6c
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	da05      	bge.n	800b7e2 <_vsniprintf_r+0x1a>
 800b7d6:	238b      	movs	r3, #139	@ 0x8b
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	f04f 30ff 	mov.w	r0, #4294967295
 800b7de:	b01b      	add	sp, #108	@ 0x6c
 800b7e0:	bd30      	pop	{r4, r5, pc}
 800b7e2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b7e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b7ea:	bf14      	ite	ne
 800b7ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7f0:	4623      	moveq	r3, r4
 800b7f2:	9302      	str	r3, [sp, #8]
 800b7f4:	9305      	str	r3, [sp, #20]
 800b7f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b7fa:	9100      	str	r1, [sp, #0]
 800b7fc:	9104      	str	r1, [sp, #16]
 800b7fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b802:	4669      	mov	r1, sp
 800b804:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b806:	f000 f9a1 	bl	800bb4c <_svfiprintf_r>
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	bfbc      	itt	lt
 800b80e:	238b      	movlt	r3, #139	@ 0x8b
 800b810:	602b      	strlt	r3, [r5, #0]
 800b812:	2c00      	cmp	r4, #0
 800b814:	d0e3      	beq.n	800b7de <_vsniprintf_r+0x16>
 800b816:	9b00      	ldr	r3, [sp, #0]
 800b818:	2200      	movs	r2, #0
 800b81a:	701a      	strb	r2, [r3, #0]
 800b81c:	e7df      	b.n	800b7de <_vsniprintf_r+0x16>
	...

0800b820 <vsniprintf>:
 800b820:	b507      	push	{r0, r1, r2, lr}
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	4613      	mov	r3, r2
 800b826:	460a      	mov	r2, r1
 800b828:	4601      	mov	r1, r0
 800b82a:	4803      	ldr	r0, [pc, #12]	@ (800b838 <vsniprintf+0x18>)
 800b82c:	6800      	ldr	r0, [r0, #0]
 800b82e:	f7ff ffcb 	bl	800b7c8 <_vsniprintf_r>
 800b832:	b003      	add	sp, #12
 800b834:	f85d fb04 	ldr.w	pc, [sp], #4
 800b838:	200000a4 	.word	0x200000a4

0800b83c <memset>:
 800b83c:	4402      	add	r2, r0
 800b83e:	4603      	mov	r3, r0
 800b840:	4293      	cmp	r3, r2
 800b842:	d100      	bne.n	800b846 <memset+0xa>
 800b844:	4770      	bx	lr
 800b846:	f803 1b01 	strb.w	r1, [r3], #1
 800b84a:	e7f9      	b.n	800b840 <memset+0x4>

0800b84c <__errno>:
 800b84c:	4b01      	ldr	r3, [pc, #4]	@ (800b854 <__errno+0x8>)
 800b84e:	6818      	ldr	r0, [r3, #0]
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	200000a4 	.word	0x200000a4

0800b858 <__libc_init_array>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	4d0d      	ldr	r5, [pc, #52]	@ (800b890 <__libc_init_array+0x38>)
 800b85c:	4c0d      	ldr	r4, [pc, #52]	@ (800b894 <__libc_init_array+0x3c>)
 800b85e:	1b64      	subs	r4, r4, r5
 800b860:	10a4      	asrs	r4, r4, #2
 800b862:	2600      	movs	r6, #0
 800b864:	42a6      	cmp	r6, r4
 800b866:	d109      	bne.n	800b87c <__libc_init_array+0x24>
 800b868:	4d0b      	ldr	r5, [pc, #44]	@ (800b898 <__libc_init_array+0x40>)
 800b86a:	4c0c      	ldr	r4, [pc, #48]	@ (800b89c <__libc_init_array+0x44>)
 800b86c:	f000 fc88 	bl	800c180 <_init>
 800b870:	1b64      	subs	r4, r4, r5
 800b872:	10a4      	asrs	r4, r4, #2
 800b874:	2600      	movs	r6, #0
 800b876:	42a6      	cmp	r6, r4
 800b878:	d105      	bne.n	800b886 <__libc_init_array+0x2e>
 800b87a:	bd70      	pop	{r4, r5, r6, pc}
 800b87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b880:	4798      	blx	r3
 800b882:	3601      	adds	r6, #1
 800b884:	e7ee      	b.n	800b864 <__libc_init_array+0xc>
 800b886:	f855 3b04 	ldr.w	r3, [r5], #4
 800b88a:	4798      	blx	r3
 800b88c:	3601      	adds	r6, #1
 800b88e:	e7f2      	b.n	800b876 <__libc_init_array+0x1e>
 800b890:	0801f364 	.word	0x0801f364
 800b894:	0801f364 	.word	0x0801f364
 800b898:	0801f364 	.word	0x0801f364
 800b89c:	0801f368 	.word	0x0801f368

0800b8a0 <__retarget_lock_acquire_recursive>:
 800b8a0:	4770      	bx	lr

0800b8a2 <__retarget_lock_release_recursive>:
 800b8a2:	4770      	bx	lr

0800b8a4 <_free_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	2900      	cmp	r1, #0
 800b8aa:	d041      	beq.n	800b930 <_free_r+0x8c>
 800b8ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8b0:	1f0c      	subs	r4, r1, #4
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	bfb8      	it	lt
 800b8b6:	18e4      	addlt	r4, r4, r3
 800b8b8:	f000 f8e0 	bl	800ba7c <__malloc_lock>
 800b8bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b934 <_free_r+0x90>)
 800b8be:	6813      	ldr	r3, [r2, #0]
 800b8c0:	b933      	cbnz	r3, 800b8d0 <_free_r+0x2c>
 800b8c2:	6063      	str	r3, [r4, #4]
 800b8c4:	6014      	str	r4, [r2, #0]
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8cc:	f000 b8dc 	b.w	800ba88 <__malloc_unlock>
 800b8d0:	42a3      	cmp	r3, r4
 800b8d2:	d908      	bls.n	800b8e6 <_free_r+0x42>
 800b8d4:	6820      	ldr	r0, [r4, #0]
 800b8d6:	1821      	adds	r1, r4, r0
 800b8d8:	428b      	cmp	r3, r1
 800b8da:	bf01      	itttt	eq
 800b8dc:	6819      	ldreq	r1, [r3, #0]
 800b8de:	685b      	ldreq	r3, [r3, #4]
 800b8e0:	1809      	addeq	r1, r1, r0
 800b8e2:	6021      	streq	r1, [r4, #0]
 800b8e4:	e7ed      	b.n	800b8c2 <_free_r+0x1e>
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	b10b      	cbz	r3, 800b8f0 <_free_r+0x4c>
 800b8ec:	42a3      	cmp	r3, r4
 800b8ee:	d9fa      	bls.n	800b8e6 <_free_r+0x42>
 800b8f0:	6811      	ldr	r1, [r2, #0]
 800b8f2:	1850      	adds	r0, r2, r1
 800b8f4:	42a0      	cmp	r0, r4
 800b8f6:	d10b      	bne.n	800b910 <_free_r+0x6c>
 800b8f8:	6820      	ldr	r0, [r4, #0]
 800b8fa:	4401      	add	r1, r0
 800b8fc:	1850      	adds	r0, r2, r1
 800b8fe:	4283      	cmp	r3, r0
 800b900:	6011      	str	r1, [r2, #0]
 800b902:	d1e0      	bne.n	800b8c6 <_free_r+0x22>
 800b904:	6818      	ldr	r0, [r3, #0]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	6053      	str	r3, [r2, #4]
 800b90a:	4408      	add	r0, r1
 800b90c:	6010      	str	r0, [r2, #0]
 800b90e:	e7da      	b.n	800b8c6 <_free_r+0x22>
 800b910:	d902      	bls.n	800b918 <_free_r+0x74>
 800b912:	230c      	movs	r3, #12
 800b914:	602b      	str	r3, [r5, #0]
 800b916:	e7d6      	b.n	800b8c6 <_free_r+0x22>
 800b918:	6820      	ldr	r0, [r4, #0]
 800b91a:	1821      	adds	r1, r4, r0
 800b91c:	428b      	cmp	r3, r1
 800b91e:	bf04      	itt	eq
 800b920:	6819      	ldreq	r1, [r3, #0]
 800b922:	685b      	ldreq	r3, [r3, #4]
 800b924:	6063      	str	r3, [r4, #4]
 800b926:	bf04      	itt	eq
 800b928:	1809      	addeq	r1, r1, r0
 800b92a:	6021      	streq	r1, [r4, #0]
 800b92c:	6054      	str	r4, [r2, #4]
 800b92e:	e7ca      	b.n	800b8c6 <_free_r+0x22>
 800b930:	bd38      	pop	{r3, r4, r5, pc}
 800b932:	bf00      	nop
 800b934:	20016ba8 	.word	0x20016ba8

0800b938 <sbrk_aligned>:
 800b938:	b570      	push	{r4, r5, r6, lr}
 800b93a:	4e0f      	ldr	r6, [pc, #60]	@ (800b978 <sbrk_aligned+0x40>)
 800b93c:	460c      	mov	r4, r1
 800b93e:	6831      	ldr	r1, [r6, #0]
 800b940:	4605      	mov	r5, r0
 800b942:	b911      	cbnz	r1, 800b94a <sbrk_aligned+0x12>
 800b944:	f000 fba6 	bl	800c094 <_sbrk_r>
 800b948:	6030      	str	r0, [r6, #0]
 800b94a:	4621      	mov	r1, r4
 800b94c:	4628      	mov	r0, r5
 800b94e:	f000 fba1 	bl	800c094 <_sbrk_r>
 800b952:	1c43      	adds	r3, r0, #1
 800b954:	d103      	bne.n	800b95e <sbrk_aligned+0x26>
 800b956:	f04f 34ff 	mov.w	r4, #4294967295
 800b95a:	4620      	mov	r0, r4
 800b95c:	bd70      	pop	{r4, r5, r6, pc}
 800b95e:	1cc4      	adds	r4, r0, #3
 800b960:	f024 0403 	bic.w	r4, r4, #3
 800b964:	42a0      	cmp	r0, r4
 800b966:	d0f8      	beq.n	800b95a <sbrk_aligned+0x22>
 800b968:	1a21      	subs	r1, r4, r0
 800b96a:	4628      	mov	r0, r5
 800b96c:	f000 fb92 	bl	800c094 <_sbrk_r>
 800b970:	3001      	adds	r0, #1
 800b972:	d1f2      	bne.n	800b95a <sbrk_aligned+0x22>
 800b974:	e7ef      	b.n	800b956 <sbrk_aligned+0x1e>
 800b976:	bf00      	nop
 800b978:	20016ba4 	.word	0x20016ba4

0800b97c <_malloc_r>:
 800b97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b980:	1ccd      	adds	r5, r1, #3
 800b982:	f025 0503 	bic.w	r5, r5, #3
 800b986:	3508      	adds	r5, #8
 800b988:	2d0c      	cmp	r5, #12
 800b98a:	bf38      	it	cc
 800b98c:	250c      	movcc	r5, #12
 800b98e:	2d00      	cmp	r5, #0
 800b990:	4606      	mov	r6, r0
 800b992:	db01      	blt.n	800b998 <_malloc_r+0x1c>
 800b994:	42a9      	cmp	r1, r5
 800b996:	d904      	bls.n	800b9a2 <_malloc_r+0x26>
 800b998:	230c      	movs	r3, #12
 800b99a:	6033      	str	r3, [r6, #0]
 800b99c:	2000      	movs	r0, #0
 800b99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba78 <_malloc_r+0xfc>
 800b9a6:	f000 f869 	bl	800ba7c <__malloc_lock>
 800b9aa:	f8d8 3000 	ldr.w	r3, [r8]
 800b9ae:	461c      	mov	r4, r3
 800b9b0:	bb44      	cbnz	r4, 800ba04 <_malloc_r+0x88>
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7ff ffbf 	bl	800b938 <sbrk_aligned>
 800b9ba:	1c43      	adds	r3, r0, #1
 800b9bc:	4604      	mov	r4, r0
 800b9be:	d158      	bne.n	800ba72 <_malloc_r+0xf6>
 800b9c0:	f8d8 4000 	ldr.w	r4, [r8]
 800b9c4:	4627      	mov	r7, r4
 800b9c6:	2f00      	cmp	r7, #0
 800b9c8:	d143      	bne.n	800ba52 <_malloc_r+0xd6>
 800b9ca:	2c00      	cmp	r4, #0
 800b9cc:	d04b      	beq.n	800ba66 <_malloc_r+0xea>
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	eb04 0903 	add.w	r9, r4, r3
 800b9d8:	f000 fb5c 	bl	800c094 <_sbrk_r>
 800b9dc:	4581      	cmp	r9, r0
 800b9de:	d142      	bne.n	800ba66 <_malloc_r+0xea>
 800b9e0:	6821      	ldr	r1, [r4, #0]
 800b9e2:	1a6d      	subs	r5, r5, r1
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	f7ff ffa6 	bl	800b938 <sbrk_aligned>
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	d03a      	beq.n	800ba66 <_malloc_r+0xea>
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	442b      	add	r3, r5
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b9fa:	685a      	ldr	r2, [r3, #4]
 800b9fc:	bb62      	cbnz	r2, 800ba58 <_malloc_r+0xdc>
 800b9fe:	f8c8 7000 	str.w	r7, [r8]
 800ba02:	e00f      	b.n	800ba24 <_malloc_r+0xa8>
 800ba04:	6822      	ldr	r2, [r4, #0]
 800ba06:	1b52      	subs	r2, r2, r5
 800ba08:	d420      	bmi.n	800ba4c <_malloc_r+0xd0>
 800ba0a:	2a0b      	cmp	r2, #11
 800ba0c:	d917      	bls.n	800ba3e <_malloc_r+0xc2>
 800ba0e:	1961      	adds	r1, r4, r5
 800ba10:	42a3      	cmp	r3, r4
 800ba12:	6025      	str	r5, [r4, #0]
 800ba14:	bf18      	it	ne
 800ba16:	6059      	strne	r1, [r3, #4]
 800ba18:	6863      	ldr	r3, [r4, #4]
 800ba1a:	bf08      	it	eq
 800ba1c:	f8c8 1000 	streq.w	r1, [r8]
 800ba20:	5162      	str	r2, [r4, r5]
 800ba22:	604b      	str	r3, [r1, #4]
 800ba24:	4630      	mov	r0, r6
 800ba26:	f000 f82f 	bl	800ba88 <__malloc_unlock>
 800ba2a:	f104 000b 	add.w	r0, r4, #11
 800ba2e:	1d23      	adds	r3, r4, #4
 800ba30:	f020 0007 	bic.w	r0, r0, #7
 800ba34:	1ac2      	subs	r2, r0, r3
 800ba36:	bf1c      	itt	ne
 800ba38:	1a1b      	subne	r3, r3, r0
 800ba3a:	50a3      	strne	r3, [r4, r2]
 800ba3c:	e7af      	b.n	800b99e <_malloc_r+0x22>
 800ba3e:	6862      	ldr	r2, [r4, #4]
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	bf0c      	ite	eq
 800ba44:	f8c8 2000 	streq.w	r2, [r8]
 800ba48:	605a      	strne	r2, [r3, #4]
 800ba4a:	e7eb      	b.n	800ba24 <_malloc_r+0xa8>
 800ba4c:	4623      	mov	r3, r4
 800ba4e:	6864      	ldr	r4, [r4, #4]
 800ba50:	e7ae      	b.n	800b9b0 <_malloc_r+0x34>
 800ba52:	463c      	mov	r4, r7
 800ba54:	687f      	ldr	r7, [r7, #4]
 800ba56:	e7b6      	b.n	800b9c6 <_malloc_r+0x4a>
 800ba58:	461a      	mov	r2, r3
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	d1fb      	bne.n	800ba58 <_malloc_r+0xdc>
 800ba60:	2300      	movs	r3, #0
 800ba62:	6053      	str	r3, [r2, #4]
 800ba64:	e7de      	b.n	800ba24 <_malloc_r+0xa8>
 800ba66:	230c      	movs	r3, #12
 800ba68:	6033      	str	r3, [r6, #0]
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f000 f80c 	bl	800ba88 <__malloc_unlock>
 800ba70:	e794      	b.n	800b99c <_malloc_r+0x20>
 800ba72:	6005      	str	r5, [r0, #0]
 800ba74:	e7d6      	b.n	800ba24 <_malloc_r+0xa8>
 800ba76:	bf00      	nop
 800ba78:	20016ba8 	.word	0x20016ba8

0800ba7c <__malloc_lock>:
 800ba7c:	4801      	ldr	r0, [pc, #4]	@ (800ba84 <__malloc_lock+0x8>)
 800ba7e:	f7ff bf0f 	b.w	800b8a0 <__retarget_lock_acquire_recursive>
 800ba82:	bf00      	nop
 800ba84:	20016ba0 	.word	0x20016ba0

0800ba88 <__malloc_unlock>:
 800ba88:	4801      	ldr	r0, [pc, #4]	@ (800ba90 <__malloc_unlock+0x8>)
 800ba8a:	f7ff bf0a 	b.w	800b8a2 <__retarget_lock_release_recursive>
 800ba8e:	bf00      	nop
 800ba90:	20016ba0 	.word	0x20016ba0

0800ba94 <__ssputs_r>:
 800ba94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba98:	688e      	ldr	r6, [r1, #8]
 800ba9a:	461f      	mov	r7, r3
 800ba9c:	42be      	cmp	r6, r7
 800ba9e:	680b      	ldr	r3, [r1, #0]
 800baa0:	4682      	mov	sl, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	4690      	mov	r8, r2
 800baa6:	d82d      	bhi.n	800bb04 <__ssputs_r+0x70>
 800baa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800baac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bab0:	d026      	beq.n	800bb00 <__ssputs_r+0x6c>
 800bab2:	6965      	ldr	r5, [r4, #20]
 800bab4:	6909      	ldr	r1, [r1, #16]
 800bab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baba:	eba3 0901 	sub.w	r9, r3, r1
 800babe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bac2:	1c7b      	adds	r3, r7, #1
 800bac4:	444b      	add	r3, r9
 800bac6:	106d      	asrs	r5, r5, #1
 800bac8:	429d      	cmp	r5, r3
 800baca:	bf38      	it	cc
 800bacc:	461d      	movcc	r5, r3
 800bace:	0553      	lsls	r3, r2, #21
 800bad0:	d527      	bpl.n	800bb22 <__ssputs_r+0x8e>
 800bad2:	4629      	mov	r1, r5
 800bad4:	f7ff ff52 	bl	800b97c <_malloc_r>
 800bad8:	4606      	mov	r6, r0
 800bada:	b360      	cbz	r0, 800bb36 <__ssputs_r+0xa2>
 800badc:	6921      	ldr	r1, [r4, #16]
 800bade:	464a      	mov	r2, r9
 800bae0:	f000 fae8 	bl	800c0b4 <memcpy>
 800bae4:	89a3      	ldrh	r3, [r4, #12]
 800bae6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800baea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baee:	81a3      	strh	r3, [r4, #12]
 800baf0:	6126      	str	r6, [r4, #16]
 800baf2:	6165      	str	r5, [r4, #20]
 800baf4:	444e      	add	r6, r9
 800baf6:	eba5 0509 	sub.w	r5, r5, r9
 800bafa:	6026      	str	r6, [r4, #0]
 800bafc:	60a5      	str	r5, [r4, #8]
 800bafe:	463e      	mov	r6, r7
 800bb00:	42be      	cmp	r6, r7
 800bb02:	d900      	bls.n	800bb06 <__ssputs_r+0x72>
 800bb04:	463e      	mov	r6, r7
 800bb06:	6820      	ldr	r0, [r4, #0]
 800bb08:	4632      	mov	r2, r6
 800bb0a:	4641      	mov	r1, r8
 800bb0c:	f000 faa8 	bl	800c060 <memmove>
 800bb10:	68a3      	ldr	r3, [r4, #8]
 800bb12:	1b9b      	subs	r3, r3, r6
 800bb14:	60a3      	str	r3, [r4, #8]
 800bb16:	6823      	ldr	r3, [r4, #0]
 800bb18:	4433      	add	r3, r6
 800bb1a:	6023      	str	r3, [r4, #0]
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb22:	462a      	mov	r2, r5
 800bb24:	f000 fad4 	bl	800c0d0 <_realloc_r>
 800bb28:	4606      	mov	r6, r0
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d1e0      	bne.n	800baf0 <__ssputs_r+0x5c>
 800bb2e:	6921      	ldr	r1, [r4, #16]
 800bb30:	4650      	mov	r0, sl
 800bb32:	f7ff feb7 	bl	800b8a4 <_free_r>
 800bb36:	230c      	movs	r3, #12
 800bb38:	f8ca 3000 	str.w	r3, [sl]
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	f04f 30ff 	mov.w	r0, #4294967295
 800bb48:	e7e9      	b.n	800bb1e <__ssputs_r+0x8a>
	...

0800bb4c <_svfiprintf_r>:
 800bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb50:	4698      	mov	r8, r3
 800bb52:	898b      	ldrh	r3, [r1, #12]
 800bb54:	061b      	lsls	r3, r3, #24
 800bb56:	b09d      	sub	sp, #116	@ 0x74
 800bb58:	4607      	mov	r7, r0
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	4614      	mov	r4, r2
 800bb5e:	d510      	bpl.n	800bb82 <_svfiprintf_r+0x36>
 800bb60:	690b      	ldr	r3, [r1, #16]
 800bb62:	b973      	cbnz	r3, 800bb82 <_svfiprintf_r+0x36>
 800bb64:	2140      	movs	r1, #64	@ 0x40
 800bb66:	f7ff ff09 	bl	800b97c <_malloc_r>
 800bb6a:	6028      	str	r0, [r5, #0]
 800bb6c:	6128      	str	r0, [r5, #16]
 800bb6e:	b930      	cbnz	r0, 800bb7e <_svfiprintf_r+0x32>
 800bb70:	230c      	movs	r3, #12
 800bb72:	603b      	str	r3, [r7, #0]
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	b01d      	add	sp, #116	@ 0x74
 800bb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7e:	2340      	movs	r3, #64	@ 0x40
 800bb80:	616b      	str	r3, [r5, #20]
 800bb82:	2300      	movs	r3, #0
 800bb84:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb86:	2320      	movs	r3, #32
 800bb88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb90:	2330      	movs	r3, #48	@ 0x30
 800bb92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd30 <_svfiprintf_r+0x1e4>
 800bb96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb9a:	f04f 0901 	mov.w	r9, #1
 800bb9e:	4623      	mov	r3, r4
 800bba0:	469a      	mov	sl, r3
 800bba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bba6:	b10a      	cbz	r2, 800bbac <_svfiprintf_r+0x60>
 800bba8:	2a25      	cmp	r2, #37	@ 0x25
 800bbaa:	d1f9      	bne.n	800bba0 <_svfiprintf_r+0x54>
 800bbac:	ebba 0b04 	subs.w	fp, sl, r4
 800bbb0:	d00b      	beq.n	800bbca <_svfiprintf_r+0x7e>
 800bbb2:	465b      	mov	r3, fp
 800bbb4:	4622      	mov	r2, r4
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	4638      	mov	r0, r7
 800bbba:	f7ff ff6b 	bl	800ba94 <__ssputs_r>
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	f000 80a7 	beq.w	800bd12 <_svfiprintf_r+0x1c6>
 800bbc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbc6:	445a      	add	r2, fp
 800bbc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbca:	f89a 3000 	ldrb.w	r3, [sl]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 809f 	beq.w	800bd12 <_svfiprintf_r+0x1c6>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbde:	f10a 0a01 	add.w	sl, sl, #1
 800bbe2:	9304      	str	r3, [sp, #16]
 800bbe4:	9307      	str	r3, [sp, #28]
 800bbe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbea:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbec:	4654      	mov	r4, sl
 800bbee:	2205      	movs	r2, #5
 800bbf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf4:	484e      	ldr	r0, [pc, #312]	@ (800bd30 <_svfiprintf_r+0x1e4>)
 800bbf6:	f7f4 faf3 	bl	80001e0 <memchr>
 800bbfa:	9a04      	ldr	r2, [sp, #16]
 800bbfc:	b9d8      	cbnz	r0, 800bc36 <_svfiprintf_r+0xea>
 800bbfe:	06d0      	lsls	r0, r2, #27
 800bc00:	bf44      	itt	mi
 800bc02:	2320      	movmi	r3, #32
 800bc04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc08:	0711      	lsls	r1, r2, #28
 800bc0a:	bf44      	itt	mi
 800bc0c:	232b      	movmi	r3, #43	@ 0x2b
 800bc0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc12:	f89a 3000 	ldrb.w	r3, [sl]
 800bc16:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc18:	d015      	beq.n	800bc46 <_svfiprintf_r+0xfa>
 800bc1a:	9a07      	ldr	r2, [sp, #28]
 800bc1c:	4654      	mov	r4, sl
 800bc1e:	2000      	movs	r0, #0
 800bc20:	f04f 0c0a 	mov.w	ip, #10
 800bc24:	4621      	mov	r1, r4
 800bc26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc2a:	3b30      	subs	r3, #48	@ 0x30
 800bc2c:	2b09      	cmp	r3, #9
 800bc2e:	d94b      	bls.n	800bcc8 <_svfiprintf_r+0x17c>
 800bc30:	b1b0      	cbz	r0, 800bc60 <_svfiprintf_r+0x114>
 800bc32:	9207      	str	r2, [sp, #28]
 800bc34:	e014      	b.n	800bc60 <_svfiprintf_r+0x114>
 800bc36:	eba0 0308 	sub.w	r3, r0, r8
 800bc3a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	9304      	str	r3, [sp, #16]
 800bc42:	46a2      	mov	sl, r4
 800bc44:	e7d2      	b.n	800bbec <_svfiprintf_r+0xa0>
 800bc46:	9b03      	ldr	r3, [sp, #12]
 800bc48:	1d19      	adds	r1, r3, #4
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	9103      	str	r1, [sp, #12]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bfbb      	ittet	lt
 800bc52:	425b      	neglt	r3, r3
 800bc54:	f042 0202 	orrlt.w	r2, r2, #2
 800bc58:	9307      	strge	r3, [sp, #28]
 800bc5a:	9307      	strlt	r3, [sp, #28]
 800bc5c:	bfb8      	it	lt
 800bc5e:	9204      	strlt	r2, [sp, #16]
 800bc60:	7823      	ldrb	r3, [r4, #0]
 800bc62:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc64:	d10a      	bne.n	800bc7c <_svfiprintf_r+0x130>
 800bc66:	7863      	ldrb	r3, [r4, #1]
 800bc68:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc6a:	d132      	bne.n	800bcd2 <_svfiprintf_r+0x186>
 800bc6c:	9b03      	ldr	r3, [sp, #12]
 800bc6e:	1d1a      	adds	r2, r3, #4
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	9203      	str	r2, [sp, #12]
 800bc74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc78:	3402      	adds	r4, #2
 800bc7a:	9305      	str	r3, [sp, #20]
 800bc7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd40 <_svfiprintf_r+0x1f4>
 800bc80:	7821      	ldrb	r1, [r4, #0]
 800bc82:	2203      	movs	r2, #3
 800bc84:	4650      	mov	r0, sl
 800bc86:	f7f4 faab 	bl	80001e0 <memchr>
 800bc8a:	b138      	cbz	r0, 800bc9c <_svfiprintf_r+0x150>
 800bc8c:	9b04      	ldr	r3, [sp, #16]
 800bc8e:	eba0 000a 	sub.w	r0, r0, sl
 800bc92:	2240      	movs	r2, #64	@ 0x40
 800bc94:	4082      	lsls	r2, r0
 800bc96:	4313      	orrs	r3, r2
 800bc98:	3401      	adds	r4, #1
 800bc9a:	9304      	str	r3, [sp, #16]
 800bc9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca0:	4824      	ldr	r0, [pc, #144]	@ (800bd34 <_svfiprintf_r+0x1e8>)
 800bca2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bca6:	2206      	movs	r2, #6
 800bca8:	f7f4 fa9a 	bl	80001e0 <memchr>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d036      	beq.n	800bd1e <_svfiprintf_r+0x1d2>
 800bcb0:	4b21      	ldr	r3, [pc, #132]	@ (800bd38 <_svfiprintf_r+0x1ec>)
 800bcb2:	bb1b      	cbnz	r3, 800bcfc <_svfiprintf_r+0x1b0>
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	3307      	adds	r3, #7
 800bcb8:	f023 0307 	bic.w	r3, r3, #7
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	9303      	str	r3, [sp, #12]
 800bcc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc2:	4433      	add	r3, r6
 800bcc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcc6:	e76a      	b.n	800bb9e <_svfiprintf_r+0x52>
 800bcc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bccc:	460c      	mov	r4, r1
 800bcce:	2001      	movs	r0, #1
 800bcd0:	e7a8      	b.n	800bc24 <_svfiprintf_r+0xd8>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	3401      	adds	r4, #1
 800bcd6:	9305      	str	r3, [sp, #20]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	f04f 0c0a 	mov.w	ip, #10
 800bcde:	4620      	mov	r0, r4
 800bce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bce4:	3a30      	subs	r2, #48	@ 0x30
 800bce6:	2a09      	cmp	r2, #9
 800bce8:	d903      	bls.n	800bcf2 <_svfiprintf_r+0x1a6>
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0c6      	beq.n	800bc7c <_svfiprintf_r+0x130>
 800bcee:	9105      	str	r1, [sp, #20]
 800bcf0:	e7c4      	b.n	800bc7c <_svfiprintf_r+0x130>
 800bcf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e7f0      	b.n	800bcde <_svfiprintf_r+0x192>
 800bcfc:	ab03      	add	r3, sp, #12
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	462a      	mov	r2, r5
 800bd02:	4b0e      	ldr	r3, [pc, #56]	@ (800bd3c <_svfiprintf_r+0x1f0>)
 800bd04:	a904      	add	r1, sp, #16
 800bd06:	4638      	mov	r0, r7
 800bd08:	f3af 8000 	nop.w
 800bd0c:	1c42      	adds	r2, r0, #1
 800bd0e:	4606      	mov	r6, r0
 800bd10:	d1d6      	bne.n	800bcc0 <_svfiprintf_r+0x174>
 800bd12:	89ab      	ldrh	r3, [r5, #12]
 800bd14:	065b      	lsls	r3, r3, #25
 800bd16:	f53f af2d 	bmi.w	800bb74 <_svfiprintf_r+0x28>
 800bd1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd1c:	e72c      	b.n	800bb78 <_svfiprintf_r+0x2c>
 800bd1e:	ab03      	add	r3, sp, #12
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	462a      	mov	r2, r5
 800bd24:	4b05      	ldr	r3, [pc, #20]	@ (800bd3c <_svfiprintf_r+0x1f0>)
 800bd26:	a904      	add	r1, sp, #16
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f000 f879 	bl	800be20 <_printf_i>
 800bd2e:	e7ed      	b.n	800bd0c <_svfiprintf_r+0x1c0>
 800bd30:	0801f328 	.word	0x0801f328
 800bd34:	0801f332 	.word	0x0801f332
 800bd38:	00000000 	.word	0x00000000
 800bd3c:	0800ba95 	.word	0x0800ba95
 800bd40:	0801f32e 	.word	0x0801f32e

0800bd44 <_printf_common>:
 800bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd48:	4616      	mov	r6, r2
 800bd4a:	4698      	mov	r8, r3
 800bd4c:	688a      	ldr	r2, [r1, #8]
 800bd4e:	690b      	ldr	r3, [r1, #16]
 800bd50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd54:	4293      	cmp	r3, r2
 800bd56:	bfb8      	it	lt
 800bd58:	4613      	movlt	r3, r2
 800bd5a:	6033      	str	r3, [r6, #0]
 800bd5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd60:	4607      	mov	r7, r0
 800bd62:	460c      	mov	r4, r1
 800bd64:	b10a      	cbz	r2, 800bd6a <_printf_common+0x26>
 800bd66:	3301      	adds	r3, #1
 800bd68:	6033      	str	r3, [r6, #0]
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	0699      	lsls	r1, r3, #26
 800bd6e:	bf42      	ittt	mi
 800bd70:	6833      	ldrmi	r3, [r6, #0]
 800bd72:	3302      	addmi	r3, #2
 800bd74:	6033      	strmi	r3, [r6, #0]
 800bd76:	6825      	ldr	r5, [r4, #0]
 800bd78:	f015 0506 	ands.w	r5, r5, #6
 800bd7c:	d106      	bne.n	800bd8c <_printf_common+0x48>
 800bd7e:	f104 0a19 	add.w	sl, r4, #25
 800bd82:	68e3      	ldr	r3, [r4, #12]
 800bd84:	6832      	ldr	r2, [r6, #0]
 800bd86:	1a9b      	subs	r3, r3, r2
 800bd88:	42ab      	cmp	r3, r5
 800bd8a:	dc26      	bgt.n	800bdda <_printf_common+0x96>
 800bd8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd90:	6822      	ldr	r2, [r4, #0]
 800bd92:	3b00      	subs	r3, #0
 800bd94:	bf18      	it	ne
 800bd96:	2301      	movne	r3, #1
 800bd98:	0692      	lsls	r2, r2, #26
 800bd9a:	d42b      	bmi.n	800bdf4 <_printf_common+0xb0>
 800bd9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bda0:	4641      	mov	r1, r8
 800bda2:	4638      	mov	r0, r7
 800bda4:	47c8      	blx	r9
 800bda6:	3001      	adds	r0, #1
 800bda8:	d01e      	beq.n	800bde8 <_printf_common+0xa4>
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	6922      	ldr	r2, [r4, #16]
 800bdae:	f003 0306 	and.w	r3, r3, #6
 800bdb2:	2b04      	cmp	r3, #4
 800bdb4:	bf02      	ittt	eq
 800bdb6:	68e5      	ldreq	r5, [r4, #12]
 800bdb8:	6833      	ldreq	r3, [r6, #0]
 800bdba:	1aed      	subeq	r5, r5, r3
 800bdbc:	68a3      	ldr	r3, [r4, #8]
 800bdbe:	bf0c      	ite	eq
 800bdc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdc4:	2500      	movne	r5, #0
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	bfc4      	itt	gt
 800bdca:	1a9b      	subgt	r3, r3, r2
 800bdcc:	18ed      	addgt	r5, r5, r3
 800bdce:	2600      	movs	r6, #0
 800bdd0:	341a      	adds	r4, #26
 800bdd2:	42b5      	cmp	r5, r6
 800bdd4:	d11a      	bne.n	800be0c <_printf_common+0xc8>
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	e008      	b.n	800bdec <_printf_common+0xa8>
 800bdda:	2301      	movs	r3, #1
 800bddc:	4652      	mov	r2, sl
 800bdde:	4641      	mov	r1, r8
 800bde0:	4638      	mov	r0, r7
 800bde2:	47c8      	blx	r9
 800bde4:	3001      	adds	r0, #1
 800bde6:	d103      	bne.n	800bdf0 <_printf_common+0xac>
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf0:	3501      	adds	r5, #1
 800bdf2:	e7c6      	b.n	800bd82 <_printf_common+0x3e>
 800bdf4:	18e1      	adds	r1, r4, r3
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	2030      	movs	r0, #48	@ 0x30
 800bdfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bdfe:	4422      	add	r2, r4
 800be00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be08:	3302      	adds	r3, #2
 800be0a:	e7c7      	b.n	800bd9c <_printf_common+0x58>
 800be0c:	2301      	movs	r3, #1
 800be0e:	4622      	mov	r2, r4
 800be10:	4641      	mov	r1, r8
 800be12:	4638      	mov	r0, r7
 800be14:	47c8      	blx	r9
 800be16:	3001      	adds	r0, #1
 800be18:	d0e6      	beq.n	800bde8 <_printf_common+0xa4>
 800be1a:	3601      	adds	r6, #1
 800be1c:	e7d9      	b.n	800bdd2 <_printf_common+0x8e>
	...

0800be20 <_printf_i>:
 800be20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be24:	7e0f      	ldrb	r7, [r1, #24]
 800be26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be28:	2f78      	cmp	r7, #120	@ 0x78
 800be2a:	4691      	mov	r9, r2
 800be2c:	4680      	mov	r8, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	469a      	mov	sl, r3
 800be32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be36:	d807      	bhi.n	800be48 <_printf_i+0x28>
 800be38:	2f62      	cmp	r7, #98	@ 0x62
 800be3a:	d80a      	bhi.n	800be52 <_printf_i+0x32>
 800be3c:	2f00      	cmp	r7, #0
 800be3e:	f000 80d2 	beq.w	800bfe6 <_printf_i+0x1c6>
 800be42:	2f58      	cmp	r7, #88	@ 0x58
 800be44:	f000 80b9 	beq.w	800bfba <_printf_i+0x19a>
 800be48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be50:	e03a      	b.n	800bec8 <_printf_i+0xa8>
 800be52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be56:	2b15      	cmp	r3, #21
 800be58:	d8f6      	bhi.n	800be48 <_printf_i+0x28>
 800be5a:	a101      	add	r1, pc, #4	@ (adr r1, 800be60 <_printf_i+0x40>)
 800be5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be60:	0800beb9 	.word	0x0800beb9
 800be64:	0800becd 	.word	0x0800becd
 800be68:	0800be49 	.word	0x0800be49
 800be6c:	0800be49 	.word	0x0800be49
 800be70:	0800be49 	.word	0x0800be49
 800be74:	0800be49 	.word	0x0800be49
 800be78:	0800becd 	.word	0x0800becd
 800be7c:	0800be49 	.word	0x0800be49
 800be80:	0800be49 	.word	0x0800be49
 800be84:	0800be49 	.word	0x0800be49
 800be88:	0800be49 	.word	0x0800be49
 800be8c:	0800bfcd 	.word	0x0800bfcd
 800be90:	0800bef7 	.word	0x0800bef7
 800be94:	0800bf87 	.word	0x0800bf87
 800be98:	0800be49 	.word	0x0800be49
 800be9c:	0800be49 	.word	0x0800be49
 800bea0:	0800bfef 	.word	0x0800bfef
 800bea4:	0800be49 	.word	0x0800be49
 800bea8:	0800bef7 	.word	0x0800bef7
 800beac:	0800be49 	.word	0x0800be49
 800beb0:	0800be49 	.word	0x0800be49
 800beb4:	0800bf8f 	.word	0x0800bf8f
 800beb8:	6833      	ldr	r3, [r6, #0]
 800beba:	1d1a      	adds	r2, r3, #4
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6032      	str	r2, [r6, #0]
 800bec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bec8:	2301      	movs	r3, #1
 800beca:	e09d      	b.n	800c008 <_printf_i+0x1e8>
 800becc:	6833      	ldr	r3, [r6, #0]
 800bece:	6820      	ldr	r0, [r4, #0]
 800bed0:	1d19      	adds	r1, r3, #4
 800bed2:	6031      	str	r1, [r6, #0]
 800bed4:	0606      	lsls	r6, r0, #24
 800bed6:	d501      	bpl.n	800bedc <_printf_i+0xbc>
 800bed8:	681d      	ldr	r5, [r3, #0]
 800beda:	e003      	b.n	800bee4 <_printf_i+0xc4>
 800bedc:	0645      	lsls	r5, r0, #25
 800bede:	d5fb      	bpl.n	800bed8 <_printf_i+0xb8>
 800bee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bee4:	2d00      	cmp	r5, #0
 800bee6:	da03      	bge.n	800bef0 <_printf_i+0xd0>
 800bee8:	232d      	movs	r3, #45	@ 0x2d
 800beea:	426d      	negs	r5, r5
 800beec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bef0:	4859      	ldr	r0, [pc, #356]	@ (800c058 <_printf_i+0x238>)
 800bef2:	230a      	movs	r3, #10
 800bef4:	e011      	b.n	800bf1a <_printf_i+0xfa>
 800bef6:	6821      	ldr	r1, [r4, #0]
 800bef8:	6833      	ldr	r3, [r6, #0]
 800befa:	0608      	lsls	r0, r1, #24
 800befc:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf00:	d402      	bmi.n	800bf08 <_printf_i+0xe8>
 800bf02:	0649      	lsls	r1, r1, #25
 800bf04:	bf48      	it	mi
 800bf06:	b2ad      	uxthmi	r5, r5
 800bf08:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf0a:	4853      	ldr	r0, [pc, #332]	@ (800c058 <_printf_i+0x238>)
 800bf0c:	6033      	str	r3, [r6, #0]
 800bf0e:	bf14      	ite	ne
 800bf10:	230a      	movne	r3, #10
 800bf12:	2308      	moveq	r3, #8
 800bf14:	2100      	movs	r1, #0
 800bf16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf1a:	6866      	ldr	r6, [r4, #4]
 800bf1c:	60a6      	str	r6, [r4, #8]
 800bf1e:	2e00      	cmp	r6, #0
 800bf20:	bfa2      	ittt	ge
 800bf22:	6821      	ldrge	r1, [r4, #0]
 800bf24:	f021 0104 	bicge.w	r1, r1, #4
 800bf28:	6021      	strge	r1, [r4, #0]
 800bf2a:	b90d      	cbnz	r5, 800bf30 <_printf_i+0x110>
 800bf2c:	2e00      	cmp	r6, #0
 800bf2e:	d04b      	beq.n	800bfc8 <_printf_i+0x1a8>
 800bf30:	4616      	mov	r6, r2
 800bf32:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf36:	fb03 5711 	mls	r7, r3, r1, r5
 800bf3a:	5dc7      	ldrb	r7, [r0, r7]
 800bf3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf40:	462f      	mov	r7, r5
 800bf42:	42bb      	cmp	r3, r7
 800bf44:	460d      	mov	r5, r1
 800bf46:	d9f4      	bls.n	800bf32 <_printf_i+0x112>
 800bf48:	2b08      	cmp	r3, #8
 800bf4a:	d10b      	bne.n	800bf64 <_printf_i+0x144>
 800bf4c:	6823      	ldr	r3, [r4, #0]
 800bf4e:	07df      	lsls	r7, r3, #31
 800bf50:	d508      	bpl.n	800bf64 <_printf_i+0x144>
 800bf52:	6923      	ldr	r3, [r4, #16]
 800bf54:	6861      	ldr	r1, [r4, #4]
 800bf56:	4299      	cmp	r1, r3
 800bf58:	bfde      	ittt	le
 800bf5a:	2330      	movle	r3, #48	@ 0x30
 800bf5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf60:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf64:	1b92      	subs	r2, r2, r6
 800bf66:	6122      	str	r2, [r4, #16]
 800bf68:	f8cd a000 	str.w	sl, [sp]
 800bf6c:	464b      	mov	r3, r9
 800bf6e:	aa03      	add	r2, sp, #12
 800bf70:	4621      	mov	r1, r4
 800bf72:	4640      	mov	r0, r8
 800bf74:	f7ff fee6 	bl	800bd44 <_printf_common>
 800bf78:	3001      	adds	r0, #1
 800bf7a:	d14a      	bne.n	800c012 <_printf_i+0x1f2>
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf80:	b004      	add	sp, #16
 800bf82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	f043 0320 	orr.w	r3, r3, #32
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	4833      	ldr	r0, [pc, #204]	@ (800c05c <_printf_i+0x23c>)
 800bf90:	2778      	movs	r7, #120	@ 0x78
 800bf92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf96:	6823      	ldr	r3, [r4, #0]
 800bf98:	6831      	ldr	r1, [r6, #0]
 800bf9a:	061f      	lsls	r7, r3, #24
 800bf9c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bfa0:	d402      	bmi.n	800bfa8 <_printf_i+0x188>
 800bfa2:	065f      	lsls	r7, r3, #25
 800bfa4:	bf48      	it	mi
 800bfa6:	b2ad      	uxthmi	r5, r5
 800bfa8:	6031      	str	r1, [r6, #0]
 800bfaa:	07d9      	lsls	r1, r3, #31
 800bfac:	bf44      	itt	mi
 800bfae:	f043 0320 	orrmi.w	r3, r3, #32
 800bfb2:	6023      	strmi	r3, [r4, #0]
 800bfb4:	b11d      	cbz	r5, 800bfbe <_printf_i+0x19e>
 800bfb6:	2310      	movs	r3, #16
 800bfb8:	e7ac      	b.n	800bf14 <_printf_i+0xf4>
 800bfba:	4827      	ldr	r0, [pc, #156]	@ (800c058 <_printf_i+0x238>)
 800bfbc:	e7e9      	b.n	800bf92 <_printf_i+0x172>
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	f023 0320 	bic.w	r3, r3, #32
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	e7f6      	b.n	800bfb6 <_printf_i+0x196>
 800bfc8:	4616      	mov	r6, r2
 800bfca:	e7bd      	b.n	800bf48 <_printf_i+0x128>
 800bfcc:	6833      	ldr	r3, [r6, #0]
 800bfce:	6825      	ldr	r5, [r4, #0]
 800bfd0:	6961      	ldr	r1, [r4, #20]
 800bfd2:	1d18      	adds	r0, r3, #4
 800bfd4:	6030      	str	r0, [r6, #0]
 800bfd6:	062e      	lsls	r6, r5, #24
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	d501      	bpl.n	800bfe0 <_printf_i+0x1c0>
 800bfdc:	6019      	str	r1, [r3, #0]
 800bfde:	e002      	b.n	800bfe6 <_printf_i+0x1c6>
 800bfe0:	0668      	lsls	r0, r5, #25
 800bfe2:	d5fb      	bpl.n	800bfdc <_printf_i+0x1bc>
 800bfe4:	8019      	strh	r1, [r3, #0]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	6123      	str	r3, [r4, #16]
 800bfea:	4616      	mov	r6, r2
 800bfec:	e7bc      	b.n	800bf68 <_printf_i+0x148>
 800bfee:	6833      	ldr	r3, [r6, #0]
 800bff0:	1d1a      	adds	r2, r3, #4
 800bff2:	6032      	str	r2, [r6, #0]
 800bff4:	681e      	ldr	r6, [r3, #0]
 800bff6:	6862      	ldr	r2, [r4, #4]
 800bff8:	2100      	movs	r1, #0
 800bffa:	4630      	mov	r0, r6
 800bffc:	f7f4 f8f0 	bl	80001e0 <memchr>
 800c000:	b108      	cbz	r0, 800c006 <_printf_i+0x1e6>
 800c002:	1b80      	subs	r0, r0, r6
 800c004:	6060      	str	r0, [r4, #4]
 800c006:	6863      	ldr	r3, [r4, #4]
 800c008:	6123      	str	r3, [r4, #16]
 800c00a:	2300      	movs	r3, #0
 800c00c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c010:	e7aa      	b.n	800bf68 <_printf_i+0x148>
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	4632      	mov	r2, r6
 800c016:	4649      	mov	r1, r9
 800c018:	4640      	mov	r0, r8
 800c01a:	47d0      	blx	sl
 800c01c:	3001      	adds	r0, #1
 800c01e:	d0ad      	beq.n	800bf7c <_printf_i+0x15c>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	079b      	lsls	r3, r3, #30
 800c024:	d413      	bmi.n	800c04e <_printf_i+0x22e>
 800c026:	68e0      	ldr	r0, [r4, #12]
 800c028:	9b03      	ldr	r3, [sp, #12]
 800c02a:	4298      	cmp	r0, r3
 800c02c:	bfb8      	it	lt
 800c02e:	4618      	movlt	r0, r3
 800c030:	e7a6      	b.n	800bf80 <_printf_i+0x160>
 800c032:	2301      	movs	r3, #1
 800c034:	4632      	mov	r2, r6
 800c036:	4649      	mov	r1, r9
 800c038:	4640      	mov	r0, r8
 800c03a:	47d0      	blx	sl
 800c03c:	3001      	adds	r0, #1
 800c03e:	d09d      	beq.n	800bf7c <_printf_i+0x15c>
 800c040:	3501      	adds	r5, #1
 800c042:	68e3      	ldr	r3, [r4, #12]
 800c044:	9903      	ldr	r1, [sp, #12]
 800c046:	1a5b      	subs	r3, r3, r1
 800c048:	42ab      	cmp	r3, r5
 800c04a:	dcf2      	bgt.n	800c032 <_printf_i+0x212>
 800c04c:	e7eb      	b.n	800c026 <_printf_i+0x206>
 800c04e:	2500      	movs	r5, #0
 800c050:	f104 0619 	add.w	r6, r4, #25
 800c054:	e7f5      	b.n	800c042 <_printf_i+0x222>
 800c056:	bf00      	nop
 800c058:	0801f339 	.word	0x0801f339
 800c05c:	0801f34a 	.word	0x0801f34a

0800c060 <memmove>:
 800c060:	4288      	cmp	r0, r1
 800c062:	b510      	push	{r4, lr}
 800c064:	eb01 0402 	add.w	r4, r1, r2
 800c068:	d902      	bls.n	800c070 <memmove+0x10>
 800c06a:	4284      	cmp	r4, r0
 800c06c:	4623      	mov	r3, r4
 800c06e:	d807      	bhi.n	800c080 <memmove+0x20>
 800c070:	1e43      	subs	r3, r0, #1
 800c072:	42a1      	cmp	r1, r4
 800c074:	d008      	beq.n	800c088 <memmove+0x28>
 800c076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c07a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c07e:	e7f8      	b.n	800c072 <memmove+0x12>
 800c080:	4402      	add	r2, r0
 800c082:	4601      	mov	r1, r0
 800c084:	428a      	cmp	r2, r1
 800c086:	d100      	bne.n	800c08a <memmove+0x2a>
 800c088:	bd10      	pop	{r4, pc}
 800c08a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c08e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c092:	e7f7      	b.n	800c084 <memmove+0x24>

0800c094 <_sbrk_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d06      	ldr	r5, [pc, #24]	@ (800c0b0 <_sbrk_r+0x1c>)
 800c098:	2300      	movs	r3, #0
 800c09a:	4604      	mov	r4, r0
 800c09c:	4608      	mov	r0, r1
 800c09e:	602b      	str	r3, [r5, #0]
 800c0a0:	f7f5 fe1c 	bl	8001cdc <_sbrk>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d102      	bne.n	800c0ae <_sbrk_r+0x1a>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	b103      	cbz	r3, 800c0ae <_sbrk_r+0x1a>
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	20016b9c 	.word	0x20016b9c

0800c0b4 <memcpy>:
 800c0b4:	440a      	add	r2, r1
 800c0b6:	4291      	cmp	r1, r2
 800c0b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0bc:	d100      	bne.n	800c0c0 <memcpy+0xc>
 800c0be:	4770      	bx	lr
 800c0c0:	b510      	push	{r4, lr}
 800c0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0ca:	4291      	cmp	r1, r2
 800c0cc:	d1f9      	bne.n	800c0c2 <memcpy+0xe>
 800c0ce:	bd10      	pop	{r4, pc}

0800c0d0 <_realloc_r>:
 800c0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d4:	4680      	mov	r8, r0
 800c0d6:	4615      	mov	r5, r2
 800c0d8:	460c      	mov	r4, r1
 800c0da:	b921      	cbnz	r1, 800c0e6 <_realloc_r+0x16>
 800c0dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	f7ff bc4b 	b.w	800b97c <_malloc_r>
 800c0e6:	b92a      	cbnz	r2, 800c0f4 <_realloc_r+0x24>
 800c0e8:	f7ff fbdc 	bl	800b8a4 <_free_r>
 800c0ec:	2400      	movs	r4, #0
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f4:	f000 f81a 	bl	800c12c <_malloc_usable_size_r>
 800c0f8:	4285      	cmp	r5, r0
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	d802      	bhi.n	800c104 <_realloc_r+0x34>
 800c0fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c102:	d8f4      	bhi.n	800c0ee <_realloc_r+0x1e>
 800c104:	4629      	mov	r1, r5
 800c106:	4640      	mov	r0, r8
 800c108:	f7ff fc38 	bl	800b97c <_malloc_r>
 800c10c:	4607      	mov	r7, r0
 800c10e:	2800      	cmp	r0, #0
 800c110:	d0ec      	beq.n	800c0ec <_realloc_r+0x1c>
 800c112:	42b5      	cmp	r5, r6
 800c114:	462a      	mov	r2, r5
 800c116:	4621      	mov	r1, r4
 800c118:	bf28      	it	cs
 800c11a:	4632      	movcs	r2, r6
 800c11c:	f7ff ffca 	bl	800c0b4 <memcpy>
 800c120:	4621      	mov	r1, r4
 800c122:	4640      	mov	r0, r8
 800c124:	f7ff fbbe 	bl	800b8a4 <_free_r>
 800c128:	463c      	mov	r4, r7
 800c12a:	e7e0      	b.n	800c0ee <_realloc_r+0x1e>

0800c12c <_malloc_usable_size_r>:
 800c12c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c130:	1f18      	subs	r0, r3, #4
 800c132:	2b00      	cmp	r3, #0
 800c134:	bfbc      	itt	lt
 800c136:	580b      	ldrlt	r3, [r1, r0]
 800c138:	18c0      	addlt	r0, r0, r3
 800c13a:	4770      	bx	lr

0800c13c <sqrtf>:
 800c13c:	b508      	push	{r3, lr}
 800c13e:	ed2d 8b02 	vpush	{d8}
 800c142:	eeb0 8a40 	vmov.f32	s16, s0
 800c146:	f000 f817 	bl	800c178 <__ieee754_sqrtf>
 800c14a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c152:	d60c      	bvs.n	800c16e <sqrtf+0x32>
 800c154:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c174 <sqrtf+0x38>
 800c158:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c160:	d505      	bpl.n	800c16e <sqrtf+0x32>
 800c162:	f7ff fb73 	bl	800b84c <__errno>
 800c166:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c16a:	2321      	movs	r3, #33	@ 0x21
 800c16c:	6003      	str	r3, [r0, #0]
 800c16e:	ecbd 8b02 	vpop	{d8}
 800c172:	bd08      	pop	{r3, pc}
 800c174:	00000000 	.word	0x00000000

0800c178 <__ieee754_sqrtf>:
 800c178:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c17c:	4770      	bx	lr
	...

0800c180 <_init>:
 800c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c182:	bf00      	nop
 800c184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c186:	bc08      	pop	{r3}
 800c188:	469e      	mov	lr, r3
 800c18a:	4770      	bx	lr

0800c18c <_fini>:
 800c18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18e:	bf00      	nop
 800c190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c192:	bc08      	pop	{r3}
 800c194:	469e      	mov	lr, r3
 800c196:	4770      	bx	lr
